BASIC52S                                                                                                      PAGE 1

                       1    $mod51
                       2    ;                                                             Ver.0.3 2023.05.07
                       3    ; WCH CH552T/G 対応バージョン(SFRアクセス機能付)
                       4    ;   Internal Clock 24MHz, CPU Clock(Fsys) 24MHz(Default->Extend)
                       5    ;   Timer2 を UART0 のシリアルポート用クロック生成に使用。
                       6    ;   シリアルポートの自動速度認識機能が正常に動かないので19.2Kbps固定で使う。
                       7    ;
                       8    ;   SFR領域のアクセス機能を追加
                       9    ;   I2CSFR  (C) H.-J. Boehling & D. Wulf 14.11.01
                      10    ;
                      11    ;*****************************************************************************
                      12    ;*                                                                           *
                      13    ;*                    MCS-BASIC-52 V1.31 Source Listing                      *
                      14    ;*                           12/1986 till 11/2001                            *
                      15    ;*       The original source code of V1.1 (BASIC.SRC and FP52.SRC) by        *
                      16    ;*            Intel Corporation, Embedded Controller Operations              *
                      17    ;*                             is public donain                              *
                      18    ;*                                                                           *
                      19    ;*****************************************************************************
                      20    ;
                      21    ;*****************************************************************************
                      22    ;* General alterations made by D. Wulf, 12/1999.                             *
                      23    ;* e-mail: Detlef.Wulf@onlinehome.de                                         *
                      24    ;*****************************************************************************
                      25    ;
                      26    ;  The following general alterations are made to the original source code:
                      27    ;
                      28    ;  - The original source code had 2 files BASIC.SRC and FP52.SRC those have
                      29    ;    been incorporated into this file for easy of assembly.
                      30    ;
                      31    ;  - All absolute and relativ jumps and calls without labels were provided
                      32    ;    with labels.
                      33    ;
                      34    ;  - All machine code in the original source, coded in databytes are replaced
                      35    ;    by the menomics.
                      36    ;
                      37    ;  - One routine in the source was different to the ROM code and is replaced
                      38    ;    by the ROM code.
                      39    ;
                      40    ;  - Some "ORG" statements between BASIC and floating point code are remarked
                      41    ;    out.
                      42    ;
                      43    ;  - To get room for new code the "ego message" had to be disabled.
                      44    ;    (Remarked with "Sorry")
                      45    ;
                      46    ;  - To get more room for new code the "FPROG" command had to be disabled.
                      47    ;    (Remarked with "get room")
                      48    ;
                      49    ;*****************************************************************************
                      50    ;* Bugfixes for MCS-52-BASIC from D. Karmann, 8/1993.                        *
                      51    ;* e-mail: dankarmann@lucent.com                                             *
                      52    ;*****************************************************************************
                      53    ;
                      54    ;  - Corrected Intel bug to allow BASIC autoboot EPROM at 8000H with user
                      55    ;    command extensions to work.
                      56    ;    (Remarked as Karmann 1)
                      57    ;
                      58    ;  - Corrected Intel bug to that discarded the 'F' in any variable ending in
BASIC52S                                                                                                      PAGE 2

                      59    ;    F, FP, FPR and FPRO and followed by a space.
                      60    ;    (Remarked as Karmann 2)
                      61    ;
                      62    ;*****************************************************************************
                      63    ;* Bugfix and performance for MCS-52-BASIC from                              *
                      64    ;* D. Mudric and Z. Stojsavljevic descipt in                                 *
                      65    ;* Elektor Electronics magazine german issue 3/1992.                         *
                      66    ;*****************************************************************************
                      67    ;
                      68    ;  - Modifications to the unprocess a BASIC line routine.
                      69    ;    (Remarked as Elektor 1)
                      70    ;
                      71    ;  - Modifications to the floating point subtraction routine.
                      72    ;    (Remarked as Elektor 2)
                      73    ;
                      74    ;  - HEX to BIN performance improvements.
                      75    ;    (Remarked as Elektor 3)
                      76    ;
                      77    ; The same article describes a fix for the multiplication underflow bug, but
                      78    ; the fixes did not work.
                      79    ;
                      80    ; The multiplicaton underflow bug is now (V1.31) really fixed by D. Wulf!
                      81    ;    (Remarked as Wulf 1)
                      82    ;
                      83    ;*****************************************************************************
                      84    ;* Change UV-EPROM to EEPROM programming from R. Skowronek, 4/1996           *
                      85    ;* e-mail: r.skowronek@kfa-juelich.de                                        *
                      86    ;*****************************************************************************
                      87    ;
                      88    ; This altered section of code writes the ram resident Basic program to
                      89    ; EEPROM just like the ROM resident Basic interpreter writes to UV-EPROMs.
                      90    ; The EEPROM is connected just like a RAM, i.e. it uses /wr on pin 27
                      91    ; and gets it's adresses from the real address lines, i.e. the only
                      92    ; difference from the normal setup is the use of the /wr line instead of
                      93    ; P1.4, which supplies the program pulse for UV-EPROMs. Now MCS-BASIC-52
                      94    ; can be located in externally ROM and is non the less able to programm
                      95    ; EEPROMs!
                      96    ; (Remarked as Skowronek)
                      97    ;
                      98    ; The original code from R. Skowronek didn't support the "PGM" statement
                      99    ; this feature is added by D. Wulf.
                     100    ; Memory is now limited to 32K bytes RAM, because memory tests above it
                     101    ; would change the EEPROM.
                     102    ;
                     103    ;*****************************************************************************
                     104    ;* Change timer 0 from 13 bit to 16 bit counter mode to use XTAL up to 78MHz *
                     105    ;* from D. Wulf 1/2000                                                       *
                     106    ;*****************************************************************************
                     107    ;
                     108    ; The max. value for XTAL is now 78627473 Hz, for use BASIC-52 with
                     109    ; Dallas 80C320 high speed / low power microcontroller (33 MHz).
                     110    ; The defaut crystal value is still 11059200 Hz. You can set it with
                     111    ; XTAL or patch the souce code at
                     112    ;
                     113    ;       17F1H = 11
                     114    ;       17F0H = 05
                     115    ;       17EFH = 92
                     116    ;       17EEH = 00
BASIC52S                                                                                                      PAGE 3

                     117    ;
                     118    ; with a new crystal value.
                     119    ; (Remarket as Wulf 2)
                     120    ;
                     121    ;*****************************************************************************
                     122    ;* New baudrate detection from D. Wulf 1/2000                                *
                     123    ;*****************************************************************************
                     124    ;
                     125    ; The new baudrate detection uses timer 2 for time measurement in state of
                     126    ; the code loop timing. So the Dallas 80C320 and other controllers can be
                     127    ; used. Also at higher clock speeds the baudrate will detect automaticly.
                     128    ; (Remarked as Wulf 3)
                     129    ;
                     130    ;*****************************************************************************
                     131    ;* New processor type detection from D. Wulf 2/2000                          *
                     132    ;*****************************************************************************
                     133    ;
                     134    ; A new reset routine detects the processor type. So BASIC-52 V1.3 can be
                     135    ; used with the following controllers:
                     136    ;
                     137    ; 8032, 87C52#, Dallas 80C320, 80515*#, 80517*#, 80517A#, 80528, 80535*,
                     138    ; 80537*, 80575 or similars.
                     139    ;
                     140    ; - On processor types marked with the "*" only two different autodetect
                     141    ;   baudrates, depending on the crystal are possible.
                     142    ; - The processor types marked with the "#" have internal ROM, so BASIC-52
                     143    ;   V1.3 can be located there, because it is still only 8K bytes long!
                     144    ;
                     145    ; (Remarked as Wulf 4)
                     146    ;
                     147    ;*****************************************************************************
                     148    ;* OPBYTE 43H for POP from H.-J. Boehling 1/2000                             *
                     149    ;* e-mail: H-Boehling@gmx.de                                                 *
                     150    ;*****************************************************************************
                     151    ;
                     152    ; A feature of BASIC-52 is the ability to add up to 16 custom keywords
                     153    ; representing commands or instructions that you define with assembler
                     154    ; routines. For using system routines in your assembler code there are
                     155    ; operation bytes (for more information see Intels "MCS BASIC-52 MANUAL").
                     156    ; In the original souce code is no OPCODE to put a value from argument
                     157    ; stack and store in a variable.
                     158    ; With BASIC-52 V1.3 you can use OPBYTE 43H which does the same than the
                     159    ; "POP" statement.
                     160    ; (Remarked as Boehling 1)
                     161    ;
                     162    ;*****************************************************************************
                     163    ;* Reset millisecond counter on "TIME=" from H.-J. Boehling 2/2000           *
                     164    ;*****************************************************************************
                     165    ;
                     166    ; The command "TIME=0" now zeros the millisecond register so that TIME
                     167    ; returns with zero.
                     168    ; (Remarked as Boehling 2)
                     169    ;
                     170    ;*****************************************************************************
                     171    ;* New command "ERASE" by H.-J. Boehling 2/2000                              *
                     172    ;*****************************************************************************
                     173    ;
                     174    ; To erase an EEPROM (fill 16K byte up to 8000H with 0FFH) the new command
BASIC52S                                                                                                      PAGE 4

                     175    ; "ERASE" is implemented. It takes 2 min. and 45 sec. to erase the 16K bytes!
                     176    ; (Remarked as Boehling 3)
                     177    ;
                     178    ;*****************************************************************************
                     179    ;* Correct "ASC(x)" bug by D. Wulf 2/2000                                    *
                     180    ;*****************************************************************************
                     181    ;
                     182    ; BASIC-51 V1.1 gives erroneous results for the "ASC(x)" funktion if "x" is
                     183    ; one of the following signs : *, +, -, /, <, =, > or ?.
                     184    ; BASIC-51 V1.3 returns the correct values.
                     185    ; (Remarked as Wulf 5)
                     186    ;
                     187    ;*****************************************************************************
                     188    ;*****************************************************************************
                     189    ; To indicate the new version the start message is changed from
                     190    ; *MCS-51(tm) BASIC V1.1* to
                     191    ; *MCS-BASIC-52 V1.31*
                     192    ;
                     193    ; H.-J. Boehling, D. Wulf 11/26/2001
                     194    ;*****************************************************************************
                     195    ;
  00C8               196    T2CON   EQU     0C8H ; This three lines are necessary for MS-DOS freeware
  00CC               197    TL2     EQU     0CCH ; MCS-51 Family Cross Assembler  ASEM-51 V1.2
  00CD               198    TH2     EQU     0CDH ; from W.W. Heinz (e-mail: ww@andiunx.m.isar.de)
                     199    ;
                     200    ;=== CH552 Added =====
  00C9               201    T2MOD           EQU     0C9H    ; T2MOD define
  00B9               202    CLOCK_CFG       EQU     0B9H    ; System clock configuration register
  00A1               203    SAFE_MOD        EQU     0A1H    ; Safe mode control register
                     204    ;=====================
                     205    ;
                     206            ;**************************************************************
                     207            ;
                     208            ; TRAP VECTORS TO MONITOR
                     209            ;
                     210            ; RESET TAG (0AAH) ---------2001H
                     211            ;
                     212            ; TAG LOCATION (5AH) ------ 2002H
                     213            ;
                     214            ; EXTERNAL INTERRUPT 0 ---- 2040H
                     215            ;
                     216            ; COMMAND MODE ENTRY ------ 2048H
                     217            ;
                     218            ; SERIAL PORT ------------- 2050H
                     219            ;
                     220            ; MONITOR (BUBBLE) OUTPUT - 2058H
                     221            ;
                     222            ; MONITOR (BUBBLE) INPUT -- 2060H
                     223            ;
                     224            ; MONITOR (BUBBLE) CSTS --- 2068H
                     225            ;
                     226            ; GET USER JUMP VECTOR ---- 2070H
                     227            ;
                     228            ; GET USER LOOKUP VECTOR -- 2078H
                     229            ;
                     230            ; PRINT AT VECTOR --------- 2080H
                     231            ;
                     232            ; INTERRUPT PWM ----------- 2088H
BASIC52S                                                                                                      PAGE 5

                     233            ;
                     234            ; EXTERNAL RESET ---------- 2090H
                     235            ;
                     236            ; USER OUTPUT-------------- 4030H
                     237            ;
                     238            ; USER INPUT -------------- 4033H
                     239            ;
                     240            ; USER CSTS --------------- 4036H
                     241            ;
                     242            ; USER RESET -------------- 4039H
                     243            ;
                     244            ; USER DEFINED PRINT @ ---  403CH
                     245            ;
                     246            ;***************************************************************
                     247            ;
                     248            ;***************************************************************
                     249            ;
                     250            ; MCS - 52  -  8K BASIC VERSION 1.3
                     251            ;
                     252            ;***************************************************************
                     253            ;
0000 618B            254            AJMP    CRST            ;START THE PROGRAM
0002 37              255            ADDC    A,@R1
                     256            ;
0003                 257            ORG     3H
                     258            ;
                     259            ;***************************************************************
                     260            ;
                     261            ;EXTERNAL INTERRUPT 0
                     262            ;
                     263            ;***************************************************************
                     264            ;
0003 20312D          265            JB      DRQ,STQ         ;SEE IF DMA IS SET
0006 C0D0            266            PUSH    PSW             ;SAVE THE STATUS
0008 024003          267            LJMP    4003H           ;JUMP TO USER IF NOT SET
                     268            ;
000B                 269            ORG     0BH
                     270            ;
                     271            ;***************************************************************
                     272            ;
                     273            ;TIMER 0 OVERFLOW INTERRUPT
                     274            ;
                     275            ;***************************************************************
                     276            ;
000B C0D0            277            PUSH    PSW             ;SAVE THE STATUS
000D 202E10          278            JB      C_BIT,STJ       ;SEE IF USER WANTS INTERRUPT
0010 02400B          279            LJMP    400BH           ;EXIT IF USER WANTS INTERRUPTS
                     280            ;
0013                 281            ORG     13H
                     282            ;
                     283            ;***************************************************************
                     284            ;
                     285            ;EXTERNAL INTERRUPT 1
                     286            ;
                     287            ;***************************************************************
                     288            ;
0013 20122B          289            JB      INTBIT,STK
0016 C0D0            290            PUSH    PSW
BASIC52S                                                                                                      PAGE 6

0018 024013          291            LJMP    4013H
                     292            ;
                     293            ;
001B                 294            ORG     1BH
                     295            ;
                     296            ;***************************************************************
                     297            ;
                     298            ;TIMER 1 OVERFLOW INTERRUPT
                     299            ;
                     300            ;***************************************************************
                     301            ;
001B C0D0            302            PUSH    PSW
001D 021F78          303            LJMP    CKS_I
                     304            ;
0020 021902          305    STJ:    LJMP    I_DR            ;DO THE INTERRUPT
                     306            ;
                     307            ;***************************************************************
                     308            ;
                     309            ;SERIAL PORT INTERRUPT
                     310            ;
                     311            ;***************************************************************
                     312            ;
0023                 313            ORG     23H
                     314            ;
0023 C0D0            315            PUSH    PSW
0025 201F1C          316            JB      SPINT,STU       ;SEE IF MONITOR EANTS INTERRUPT
0028 024023          317            LJMP    4023H
                     318            ;
002B                 319            ORG     2BH
                     320            ;
                     321            ;**************************************************************
                     322            ;
                     323            ;TIMER 2 OVERFLOW INTERRUPT
                     324            ;
                     325            ;**************************************************************
                     326            ;
002B C0D0            327            PUSH    PSW
002D 02402B          328            LJMP    402BH
                     329            ;
                     330            ;**************************************************************
                     331            ;
                     332            ;USER ENTRY
                     333            ;
                     334            ;**************************************************************
                     335            ;
0030                 336            ORG     30H
                     337            ;
0030 02193F          338            LJMP    IBLK            ;LINK TO USER BLOCK
                     339            ;
0033 202608          340    STQ:    JB      I_T0,STS        ;SEE IF MONITOR WANTS IT
0036 C296            341            CLR     DACK
0038 30B2FD          342            JNB     P3.2,$          ;WAIT FOR DMA TO END
003B D296            343            SETB    DACK
003D 32              344            RETI
                     345            ;
003E 022040          346    STS:    LJMP    2040H           ;GO TO THE MONITOR
                     347            ;
0041 D216            348    STK:    SETB    INTPEN          ;TELL BASIC AN INTERRUPT WAS RECEIVED
BASIC52S                                                                                                      PAGE 7

0043 32              349            RETI
                     350            ;
0044 022050          351    STU:    LJMP    2050H           ;SERIAL PORT INTERRUPT
                     352            ;
                     353            ;
                     354            ;**************************************************************
                     355            ;
                     356            ; This is the equate table for 8052 basic.
                     357            ;
                     358            ;**************************************************************
                     359            ;
                     360            ; The register to direct equates for CJNE instructions.
                     361            ;
  0000               362    R0B0    EQU     0
  0001               363    R1B0    EQU     1
  0002               364    R2B0    EQU     2
  0003               365    R3B0    EQU     3
  0004               366    R4B0    EQU     4
  0005               367    R5B0    EQU     5
  0006               368    R6B0    EQU     6
  0007               369    R7B0    EQU     7
                     370            ;
                     371            ; Register bank 1 contains the text pointer
                     372            ; and the arg stack pointer.
                     373            ;
  0008               374    TXAL    EQU     8               ;R0 BANK 1 = TEXT POINTER LOW
  0009               375    ASTKA   EQU     9               ;R1 BANK 1 = ARG STACK
  000A               376    TXAH    EQU     10              ;R2 BANK 1 = TEXT POINTER HIGH
                     377            ;
                     378            ; Now five temporary locations that are used by basic.
                     379            ;
  000B               380    TEMP1   EQU     11
  000C               381    TEMP2   EQU     12
  000D               382    TEMP3   EQU     13
  000E               383    TEMP4   EQU     14
  000F               384    TEMP5   EQU     15
                     385            ;
                     386            ; Register bank 2 contains the read text pointer
                     387            ; and the control stack pointer.
                     388            ;
  0010               389    RTXAL   EQU     16              ;R0 BANK 2 = READ TEXT POINTER LOW
  0011               390    CSTKA   EQU     17              ;R1 BANK 2 = CONTROL STACK POINTER
  0012               391    RTXAH   EQU     18              ;R2 BANK 2 = READ TEXT POINTER HIGH
                     392            ;
                     393            ; Now some internal system equates.
                     394            ;
  0013               395    BOFAH   EQU     19              ;START OF THE BASIC PROGRAM, HIGH BYTE
  0014               396    BOFAL   EQU     20              ;START OF THE BASIC PROGRAM, LOW BYTE
  0015               397    NULLCT  EQU     21              ;NULL COUNT
  0016               398    PHEAD   EQU     22              ;PRINT HEAD POSITION
  0017               399    FORMAT  EQU     23
                     400            ;
                     401            ; Register bank 3 is for the user and can be loaded
                     402            ; by basic
                     403            ;
                     404            ;
                     405            ;
                     406            ; Now everything else is used by basic.
BASIC52S                                                                                                      PAGE 8

                     407            ; First the bit locations, these use bytes 34, 35, 36, 37 and 38
                     408            ;
  0010               409    OTS             BIT     16      ;34.0-ON TIME INSTRUCTION EXECUTED
  0011               410    INPROG          BIT     17      ;34.1-INTERRUPT IN PROCESS
  0012               411    INTBIT          BIT     18      ;34.2-INTERRUPT SET BIT
  0013               412    ON_ERR          BIT     19      ;34.3-ON ERROR EXECUTED
  0014               413    OTI             BIT     20      ;34.4-ON TIME INTERRUPT IN PROGRESS
  0015               414    LINEB           BIT     21      ;34.5-LINE CHANGE OCCURED
  0016               415    INTPEN          BIT     22      ;34.6-INTERRUPT PENDING BIT
  0017               416    CONB            BIT     23      ;34.7-CAN CONTINUE IF SET
  0018               417    GTRD            BIT     24      ;35.0-READ GET LOCATION
  0019               418    LPB             BIT     25      ;35.1-PRINT TO LINE PRINTER PORT
  001A               419    CKS_B           BIT     26      ;35.2-FOR PWM INTERRUPT
  001B               420    COB             BIT     27      ;35.3-CONSOLE OUT BIT
                     421                                    ;     0 = SERIAL PORT
                     422                                    ;     1 = LINE PRINTER
  001C               423    COUB            BIT     28      ;35.4-USER CONSOLE OUT BIT
                     424                                    ;     0 = SERIAL PORT
                     425                                    ;     1 = USER DRIVER
  001D               426    INBIT           BIT     29      ;35.5-INITIALIZATION BIT
  001E               427    CIUB            BIT     30      ;35.6-USER CONSOLE IN BIT
                     428                                    ;     0 = SERIAL PORT
                     429                                    ;     1 = USER ROUTINE
  001F               430    SPINT           BIT     31      ;35.7-SERIAL PORT INTERRUPT
  0020               431    STOPBIT         BIT     32      ;36.0-PROGRAM STOP ENCOUNTERED
  0021               432    U_IDL           BIT     33      ;36.1-USER IDLE BREAK
  0022               433    INP_B           BIT     34      ;36.2-SET DURING INPUT INSTRUCTION
                     434    ;DCMPXZ         BIT     35      ;36.3-DCMPX ZERO FLAG
  0024               435    ARGF            BIT     36      ;36.4-ARG STACK HAS A VALUE
  0025               436    RETBIT          BIT     37      ;36.5-RET FROM INTERRUPT EXECUTED
  0026               437    I_T0            BIT     38      ;36.6-TRAP INTERRUPT ZERO TO MON
  0027               438    UPB             BIT     39      ;36.7-SET WHEN @ IS VALID
                     439    
                     440    ;
                     441    ;*****************************************************************************
                     442    ;****** Sorry - but the ego message had to be disabled ***********************
                     443    ;
                     444    ;JKBIT          BIT     40      ;37.0-WB TRIGGER We use the bit for detect
                     445    ;
  0028               446    mul_underflow   BIT     40      ;37.0-mul_limit_case
                     447    ;
                     448    ;*****************************************************************************
                     449    ;
  0029               450    ENDBIT          BIT     41      ;37.1-GET END OF PROGRAM
  002A               451    UBIT            BIT     42      ;37.2-FOR DIM STATEMENT
  002B               452    ISAV            BIT     43      ;37.3-SAVE INTERRUPT STATUS
  002C               453    BO              BIT     44      ;37.4-BUBBLE OUTPUT
  002D               454    XBIT            BIT     45      ;37.5-EXTERNAL PROGRAM PRESENT
  002E               455    C_BIT           BIT     46      ;37.6-SET WHEN CLOCK RUNNING
  002F               456    DIRF            BIT     47      ;37.7-DIRECT INPUT MODE
  0030               457    NO_C            BIT     48      ;38.0-NO CONTROL C
  0031               458    DRQ             BIT     49      ;38.1-DMA ENABLED
  0032               459    BI              BIT     50      ;38.2-BUBBLE INPUT
                     460    ;
                     461    ;*****************************************************************************
                     462    ;****** Disable Intel programming for to get room ****************************
                     463    ;
                     464    ;INTELB         BIT     51      ;38.3-INTELLIGENT PROM PROGRAMMING
BASIC52S                                                                                                      PAGE 9

                     465    ;
                     466    ;*****************************************************************************
                     467    ;
  0034               468    C0ORX1          BIT     52      ;38.4-PRINT FROM ROM OR RAM
  0035               469    CNT_S           BIT     53      ;38.5-CONTROL S ENCOUNTERED
  0036               470    ZSURP           BIT     54      ;38.6-ZERO SUPRESS
  0037               471    HMODE           BIT     55      ;38.7-HEX MODE PRINT
  0097               472    LP              BIT     P1.7    ;SOFTWARE LINE PRINTER
  0096               473    DACK            BIT     P1.6    ;DMA ACK
                     474    ;*****************************************************************************
                     475    ;
                     476    ;PROMV          BIT     P1.5    ;TURN ON PROM VOLTAGE
                     477    ;PROMP          BIT     P1.4    ;PROM PULSE
                     478    ;ALED           BIT     P1.3    ;ALE DISABLE
                     479    ;
                     480    ;*****************************************************************************
  0092               481    T_BIT           BIT     P1.2    ;I/O TOGGLE BIT
  00DF               482    BD              BIT     0DFH    ;Baudrategenerator 805x7,x5
                     483            ;
                     484            ;
                     485            ; The next location is a bit addressable byte counter
                     486            ;
  0027               487    BABC    EQU     39
                     488            ;
                     489            ; Now floating point and the other temps
                     490            ;
                     491            ; FP Uses to locations 03CH
                     492            ;
                     493            ; Now the stack designators.
                     494            ;
  003E               495    SPSAV   EQU     3EH
  003F               496    S_LEN   EQU     3FH
  0040               497    T_HH    EQU     40H
  0041               498    T_LL    EQU     41H
  0042               499    INTXAH  EQU     42H
  0043               500    INTXAL  EQU     43H
  0045               501    MT1     EQU     45H
  0046               502    MT2     EQU     46H
  0047               503    MILLIV  EQU     47H             ;Real Time Clock 5 millisec.
  0048               504    TVH     EQU     48H             ;Real Time Clock high byte
  0049               505    TVL     EQU     49H             ;Real Time Clock low byte
  004A               506    SAVE_T  EQU     4AH
  004B               507    SP_H    EQU     4BH             ;SERIAL PORT TIME OUT
  004C               508    SP_L    EQU     4CH
  004D               509    CMNDSP  EQU     4DH             ;SYSTEM STACK POINTER
  0087               510    PCON0   EQU     87H             ;PCON SFR
  00AA               511    S0RELL  EQU     0AAH            ;S0RELL 805x7A SFR
  00BA               512    S0RELH  EQU     0BAH            ;S0RELH 805x7A SFR
  00CB               513    RCAPH2  EQU     0CBH            ;RCAPH2 8052 SFR
  00CA               514    RCAPL2  EQU     0CAH            ;RCAPL2 8052 SFR
  00D8               515    ADCON   EQU     0D8H            ;ADCON 805xx SFR
  00DA               516    DAPR    EQU     0DAH            ;DAPR 805xx SFR
  00FF               517    IRAMTOP EQU     0FFH            ;TOP OF RAM
  00FE               518    STACKTP EQU     0FEH            ;ARG AND CONTROL STACK TOPS
                     519            ;
                     520            ; The character equates
                     521            ;
  000D               522    CR      EQU     0DH             ;CARRIAGE RETURN
BASIC52S                                                                                                      PAGE 10

  000A               523    LF      EQU     0AH             ;LINE FEED
  0007               524    BELL    EQU     07H             ;BELL CHARACTER
  0008               525    BS      EQU     08H             ;BACK SPACE
  0003               526    CNTRLC  EQU     03H             ;CONTROL C
  0004               527    CNTRLD  EQU     04H             ;CONTROL D
  0000               528    NULL    EQU     00H             ;NULL
                     529            ;
                     530            ; The new baud rate constants
                     531            ;
  00B2               532    B4800   EQU     0B2H            ;Timervalue for 4800 baud
  00D9               533    B9600   EQU     0D9H            ;Timervalue for 9600 baud
                     534            ;
                     535            ;
                     536            ; The internal system equates
                     537            ;
  0049               538    LINLEN  EQU     73              ;THE LENGTH OF AN INPUT LINE
  0001               539    EOF     EQU     01              ;END OF FILE CHARACTER
  0001               540    ASTKAH  EQU     01              ;ASTKA IS IN PAGE 1 OF RAM
  0000               541    CSTKAH  EQU     00              ;CSTKA IS IN PAGE 0 OF RAM
  0001               542    FTYPE   EQU     01              ;CONTROL STACK "FOR"
  0002               543    GTYPE   EQU     02              ;CONTROL STACK "GOSUB"
  0003               544    DTYPE   EQU     03              ;DO-WHILE/UNTIL TYPE
  8000               545    ROMADR  EQU     8000H   ;LOCATION OF ROM
                     546    ;
                     547            ; The floating point equates
                     548            ;
  0006               549    FPSIZ   EQU     6               ;NO. OF BYTES IN A FLOATING NUM
  0004               550    DIGIT   EQU     FPSIZ-2         ;THE MANTISSA OF A FLOATING NUM
  0009               551    STESIZ  EQU     FPSIZ+3         ;SIZE OF SYMBOL ADJUSTED TABLE ELEMENT
                     552    ;FP_BASE EQU     1993H           ;BASE OF FLOATING POINT ROUTINES
  0200               553    PSTART  EQU     512             ;START OF A PROGRAM IN RAM
  0011               554    FSIZE   EQU     FPSIZ+FPSIZ+2+2+1
                     555    ;
                     556    ;=== CH552 Added =====
  03FF               557    ERAMEND EQU     03FFH ; EX-RAM last addr (1KB)
                     558    ;=====================
                     559    ;
                     560            ;**************************************************************
                     561            ;
0047                 562    USENT:  ; User entry jump table
                     563            ;
                     564            ;**************************************************************
                     565            ;
0047 1787            566            DW      CMND1           ;(00, 00H)COMMAND MODE JUMP
0049 1223            567            DW      IFIX            ;(01, 01H)CONVERT FP TO INT
004B 0FDD            568            DW      PUSHAS          ;(02, 02H)PUSH VALUE ONTO ARG STACK
004D 0FD3            569            DW      POPAS           ;(03, 03H)POP VALUE OFF ARG STACK
004F 04BD            570            DW      PG1             ;(04, 04H)PROGRAM A PROM
0051 06D8            571            DW      INLINE          ;(05, 05H)INPUT A LINE
0053 06BF            572            DW      UPRNT           ;(06, 06H)PRINT A LINR
0055 06A5            573            DW      CRLF            ;(07, 07H)OUTPUT A CRLF
                     574            ;
                     575            ;**************************************************************
                     576            ;
                     577            ; This is the operation jump table for arithmetics
                     578            ;
                     579            ;**************************************************************
                     580            ;
BASIC52S                                                                                                      PAGE 11

0057 13AC            581    OPTAB:  DW      ALPAR           ;(08, 08H)LEFT PAREN
0059 132B            582            DW      AEXP            ;(09, 09H)EXPONENTAION
005B 11B0            583            DW      AMUL            ;(10, 0AH)FP MUL
005D 1741            584            DW      AADD            ;(11, 0BH)FLOATING POINT ADD
005F 140A            585            DW      ADIV            ;(12, 0CH)FLOATING POINT DIVIDE
0061 171C            586            DW      ASUB            ;(13, 0DH)FLOATING POINT SUBTRACTION
0063 1498            587            DW      AXRL            ;(14, 0EH)XOR
0065 1484            588            DW      AANL            ;(15, 0FH)AND
0067 148D            589            DW      AORL            ;(16, 10H)OR
0069 13A1            590            DW      ANEG            ;(17, 11H)NEGATE
006B 13DB            591            DW      AEQ             ;(18, 12H)EQUAL
006D 13E7            592            DW      AGE             ;(19, 13H)GREATER THAN OR EQUAL
006F 13EB            593            DW      ALE             ;(20, 14H)LESS THAN OR EQUAL
0071 13E1            594            DW      ANE             ;(21, 15H)NOT EQUAL
0073 13D6            595            DW      ALT             ;(22, 16H)LESS THAN
0075 13C5            596            DW      AGT             ;(23, 17H)GREATER THAN
                     597            ;
                     598            ;***************************************************************
                     599            ;
                     600            ; This is the jump table for unary operators
                     601            ;
                     602            ;***************************************************************
                     603            ;
0077 138F            604            DW      AABS            ;(24, 18H)ABSOLUTE VALUE
0079 136D            605            DW      AINT            ;(25, 19H)INTEGER OPERATOR
007B 1395            606            DW      ASGN            ;(26, 1AH)SIGN OPERATOR
007D 1496            607            DW      ANOT            ;(27, 1BH)ONE'S COMPLEMENT
007F 116D            608            DW      ACOS            ;(28, 1CH)COSINE
0081 11D0            609            DW      ATAN            ;(29, 1DH)TANGENT
0083 1171            610            DW      ASIN            ;(30, 1EH)SINE
0085 128D            611            DW      ASQR            ;(31, 1FH)SQUARE ROOT
0087 13AD            612            DW      ACBYTE          ;(32, 20H)READ CODE
0089 1327            613            DW      AETOX           ;(33, 21H)E TO THE X
008B 11E0            614            DW      AATAN           ;(34, 22H)ARC TANGENT
008D 12C0            615            DW      ALN             ;(35, 23H)NATURAL LOG
008F 13B6            616            DW      ADBYTE          ;(36, 24H)READ DATA MEMORY
0091 13BE            617            DW      AXBYTE          ;(37, 25H)READ EXTERNAL MEMORY
0093 147F            618            DW      PIPI            ;(38, 26H)PI
0095 13F1            619            DW      ARND            ;(39, 27H)RANDOM NUMBER
0097 14A9            620            DW      AGET            ;(40, 28H)GET INPUT CHARACTER
0099 1711            621            DW      AFREE           ;(41, 29H)COMPUTE #BYTES FREE
009B 1721            622            DW      ALEN            ;(42, 2AH) COMPUTE LEN OF PORGRAM
009D 0FD9            623            DW      AXTAL           ;(43, 2BH) CRYSTAL
009F 164F            624            DW      PMTOP           ;(44, 2CH)TOP OF MEMORY
00A1 1729            625            DW      ATIME           ;(45, 2DH) TIME
00A3 14B9            626            DW      A_IE            ;(46, 2EH) IE
00A5 14BD            627            DW      A_IP            ;(47, 2FH) IP
00A7 14C1            628            DW      ATIM0           ;(48, 30H) TIMER 0
00A9 14C7            629            DW      ATIM1           ;(49, 31H) TIMER 1
00AB 14CD            630            DW      ATIM2           ;(50, 32H) TIMER 2
00AD 14D3            631            DW      AT2CON          ;(51, 33H) T2CON
00AF 14D7            632            DW      ATCON           ;(52, 34H) TCON
00B1 14DB            633            DW      ATMOD           ;(53, 35H) ATMOD
00B3 14DF            634            DW      ARCAP2          ;(54, 36H) RCAP2
00B5 14E5            635            DW      AP1             ;(55, 37H) P1
00B7 14E9            636            DW      APCON           ;(56, 38H) PCON
00B9 0F43            637            DW      EXPRB           ;(57, 39H) EVALUATE AN EXPRESSION
00BB 165C            638            DW      AXTAL1          ;(58, 3AH) CALCULATE CRYSTAL
BASIC52S                                                                                                      PAGE 12

00BD 14F0            639            DW      LINE            ;(59, 3BH) EDIT A LINE
00BF 15BA            640            DW      PP              ;(60, 3CH) PROCESS A LINE
00C1 10A0            641            DW      UPPL0           ;(61, 3DH) UNPROCESS A LINE
00C3 0D65            642            DW      VAR             ;(62, 3EH) FIND A VARIABLE
00C5 0ECD            643            DW      GC              ;(63, 3FH) GET A CHARACTER
00C7 0ED5            644            DW      GCI             ;(64, 40H) GET CHARACTER AND INCREMENT
00C9 0791            645            DW      INCHAR          ;(65, 41H) INPUT A CHARACTER
00CB 0802            646            DW      CRUN            ;(66, 42H) RUN A PROGRAM
                     647    ;
                     648    ;*****************************************************************************
                     649    ;****** OPBYTE 43H for POP ***************************************************
                     650    ;****** Boehling 1 ***********************************************************
                     651    ;
00CD 0A7D            652            dw      SPOP            ;(67, 43H) POP a value to a variable
                     653    ;
                     654    ;*****************************************************************************
                     655    ;
                     656    
00CF 01              657    OPBOL:  DB      1               ;
                     658            ;
00D0 0F              659            DB      15              ;LEFT PAREN
00D1 0E              660            DB      14              ;EXPONENTIAN **
00D2 0A              661            DB      10              ;MUL
00D3 08              662            DB      8               ;ADD
00D4 0A              663            DB      10              ;DIVIDE
00D5 08              664            DB      8               ;SUB
00D6 03              665            DB      3               ;XOR
00D7 05              666            DB      5               ;AND
00D8 04              667            DB      4               ;OR
00D9 0C              668            DB      12              ;NEGATE
00DA 06              669            DB      6               ;EQ
00DB 06              670            DB      6               ;GT
00DC 06              671            DB      6               ;LT
00DD 06              672            DB      6               ;NE
00DE 06              673            DB      6               ;LE
00DF 06              674            DB      6               ;GE
                     675            ;
00E0 0F              676    UOPBOL: DB      15              ;AABS
00E1 0F              677            DB      15              ;AAINT
00E2 0F              678            DB      15              ;ASGN
00E3 0F              679            DB      15              ;ANOT
00E4 0F              680            DB      15              ;ACOS
00E5 0F              681            DB      15              ;ATAN
00E6 0F              682            DB      15              ;ASIN
00E7 0F              683            DB      15              ;ASQR
00E8 0F              684            DB      15              ;ACBYTE
00E9 0F              685            DB      15              ;E TO THE X
00EA 0F              686            DB      15              ;AATAN
00EB 0F              687            DB      15              ;NATURAL LOG
00EC 0F              688            DB      15              ;DBYTE
00ED 0F              689            DB      15              ;XBYTE
                     690            ;
                     691            ;***************************************************************
                     692            ;
                     693            ; The ASCII printed messages.
                     694            ;
                     695            ;***************************************************************
                     696            ;
BASIC52S                                                                                                      PAGE 13

00EE 53544F50        697    STP:    DB      'STOP"'
00F2 22         
                     698            ;
00F3 54525920        699    IAN:    DB      'TRY AGAIN"'
00F7 41474149   
00FB 4E22       
                     700            ;
00FD 52454144        701    RDYS:   DB      'READY"'
0101 5922       
                     702            ;
0103 202D2049        703    INS:    DB      ' - IN LINE "'
0107 4E204C49   
010B 4E452022   
                     704            ;
                     705            ;**************************************************************
                     706            ;
                     707            ; This is the command jump table
                     708            ;
                     709            ;**************************************************************
                     710            ;
010F 0802            711    CMNDD:  DW      CRUN            ;RUN
0111 104E            712            DW      CLIST           ;LIST
0113 0B08            713            DW      CNULL           ;NULL
0115 065C            714            DW      CNEW            ;NEW
0117 183E            715            DW      CCONT           ;CONTINUE
0119 048A            716            DW      CPROG           ;PROGRAM A PROM
011B 1773            717            DW      CXFER           ;TRANSFER FROM ROM TO RAM
011D 177F            718            DW      CRAM            ;RAM MODE
011F 053C            719            DW      CROM            ;ROM MODE
                     720    ;
                     721    ;*****************************************************************************
                     722    ;****** Disable Intel programming for to get room ****************************
                     723    ;
                     724    ;       DW      CIPROG          ;INTELLIGENT PROM PROGRAMMING
                     725    ;
                     726    ;*****************************************************************************
                     727    ;
0121 0500            728            dw      CERASE          ;Erase an EEPROM
                     729    ;
                     730            ;***************************************************************
                     731            ;
                     732            ; This is the statement jump table.
                     733            ;
                     734            ;**************************************************************
                     735            ;
0123                 736    STATD:  ;
0123 096E            737            DW      SLET            ;LET            80H
0125 068F            738            DW      SCLR            ;CLEAR          81H
0127 0A76            739            DW      SPUSH           ;PUSH VAR       82H
0129 0AAA            740            DW      SGOTO           ;GO TO          83H
012B 1686            741            DW      STONE           ;TONE           84H
012D 0C29            742            DW      SPH0            ;PRINT MODE 0   85H
012F 192E            743            DW      SUI             ;USER INPUT     86H
0131 1933            744            DW      SUO             ;USER OUTPUT    87H
0133 0A7D            745            DW      SPOP            ;POP VAR        88H
0135 0C2D            746            DW      SPRINT          ;PRINT          89H
0137 0E63            747            DW      SCALL           ;CALL           8AH
0139 0D61            748            DW      SDIMX           ;DIMENSION      8BH
BASIC52S                                                                                                      PAGE 14

013B 060C            749            DW      STRING          ;STRING ALLO    8CH
013D 16F9            750            DW      SBAUD           ;SET BAUD       8DH
013F 1918            751            DW      SCLOCK          ;CLOCK          8EH
0141 0C2B            752            DW      SPH1            ;PRINT MODE 1   8FH
                     753            ;
                     754            ; No direct mode from here on
                     755            ;
0143 0858            756            DW      SSTOP           ;STOP           90H
0145 0E56            757            DW      SOT             ;ON TIME        91H
0147 1419            758            DW      SONEXT          ;ON EXT INT     92H
0149 0B0E            759            DW      SRETI           ;RET FROM INT   93H
014B 0F05            760            DW      S_DO            ;DO             94H
014D 0BCE            761            DW      SRESTR          ;RESTOR         95H
014F 0EFC            762            DW      WCR             ;REM            96H
0151 0B5F            763            DW      SNEXT           ;NEXT           97H
0153 140F            764            DW      SONERR          ;ON ERROR       98H
0155 0CEB            765            DW      S_ON            ;ON             99H
0157 0DF5            766            DW      SINPUT          ;INPUT          9AH
0159 0BE3            767            DW      SREAD           ;READ           9BH
015B 0EEC            768            DW      FINDCR          ;DATA           9CH
015D 0B10            769            DW      SRETRN          ;RETURN         9DH
015F 0A86            770            DW      SIF             ;IF             9EH
0161 0B2D            771            DW      SGOSUB          ;GOSUB          9FH
0163 0A3C            772            DW      SFOR            ;FOR            A0H
0165 0AFC            773            DW      SWHILE          ;WHILE          A1H
0167 0B01            774            DW      SUNTIL          ;UNTIL          A2H
0169 1787            775            DW      CMND1           ;END            A3H
016B 185B            776            DW      I_DL            ;IDLE           A4H
016D 0FE5            777            DW      ST_A            ;STORE AT       A5H
016F 0FE9            778            DW      LD_A            ;LOAD AT        A6H
0171 04F8            779            DW      PGU             ;PGM            A7H
0173 07C0            780            DW      RROM            ;RUN A ROM      A9H
                     781            ;
                     782            ;**************************************************************
                     783            ;
0175                 784    TOKTAB: ; This is the basic token table
                     785            ;
                     786            ;**************************************************************
                     787            ;
                     788            ; First the tokens for statements
                     789            ;
0175 80              790            DB      80H             ;LET TOKEN
0176 4C4554          791            DB      'LET'
                     792            ;
0179 81              793            DB      81H             ;CLEAR TOKEN
017A 434C4541        794            DB      'CLEAR'
017E 52         
                     795            ;
017F 82              796            DB      82H             ;PUSH TOKEN
0180 50555348        797            DB      'PUSH'
                     798            ;
  0083               799    T_GOTO  EQU     83H
                     800            ;
0184 83              801            DB      83H             ;GO TO TOKEN
0185 474F544F        802            DB      'GOTO'
                     803            ;
0189 84              804            DB      84H             ;TOGGLE TOKEN
018A 50574D          805            DB      'PWM'
BASIC52S                                                                                                      PAGE 15

                     806            ;
018D 85              807            DB      85H             ;PRINT HEX MODE 0
018E 5048302E        808            DB      'PH0.'
                     809            ;
0192 86              810            DB      86H             ;USER IN TOKEN
0193 5549            811            DB      'UI'
                     812            ;
0195 87              813            DB      87H             ;USER OUT TOKEN
0196 554F            814            DB      'UO'
                     815            ;
0198 88              816            DB      88H             ;POP TOKEN
0199 504F50          817            DB      'POP'
                     818            ;
019C 89              819            DB      89H             ;PRINT TOKEN
019D 5052494E        820            DB      'PRINT'
01A1 54         
01A2 89              821            DB      89H
01A3 502E            822            DB      'P.'            ;P. ALSO MEANS PRINT
01A5 89              823            DB      89H             ;? ALSO
01A6 3F              824            DB      '?'
                     825            ;
01A7 8A              826            DB      8AH             ;CALL TOKEN
01A8 43414C4C        827            DB      'CALL'
                     828            ;
01AC 8B              829            DB      8BH             ;DIMENSION TOKEN
01AD 44494D          830            DB      'DIM'
                     831            ;
01B0 8C              832            DB      8CH             ;STRING TOKEN
01B1 53545249        833            DB      'STRING'
01B5 4E47       
                     834            ;
01B7 8D              835            DB      8DH             ;SET BAUD RATE
01B8 42415544        836            DB      'BAUD'
                     837            ;
01BC 8E              838            DB      8EH             ;CLOCK
01BD 434C4F43        839            DB      'CLOCK'
01C1 4B         
                     840            ;
01C2 8F              841            DB      8FH             ;PRINT HEX MODE 1
01C3 5048312E        842            DB      'PH1.'
                     843            ;
  0090               844    T_STOP  EQU     90H             ;STOP TOKEN
01C7 90              845            DB      T_STOP
01C8 53544F50        846            DB      'STOP'
                     847            ;
  0090               848    T_DIR   EQU     T_STOP          ;NO DIRECT FROM HERE ON
                     849            ;
01CC 91              850            DB      T_STOP+1        ;ON TIMER INTERRUPT
01CD 4F4E5449        851            DB      'ONTIME'
01D1 4D45       
                     852            ;
01D3 92              853            DB      T_STOP+2        ;ON EXTERNAL INTERRUPT
01D4 4F4E4558        854            DB      'ONEX1'
01D8 31         
                     855            ;
01D9 93              856            DB      T_STOP+3        ;RETURN FROM INTERRUPT
01DA 52455449        857            DB      'RETI'
                     858            ;
BASIC52S                                                                                                      PAGE 16

01DE 94              859            DB      T_STOP+4        ;DO TOKEN
01DF 444F            860            DB      'DO'
                     861            ;
01E1 95              862            DB      T_STOP+5        ;RESTORE TOKEN
01E2 52455354        863            DB      'RESTORE'
01E6 4F5245     
                     864            ;
  0096               865    T_REM   EQU     T_STOP+6        ;REMARK TOKEN
01E9 96              866            DB      T_REM
01EA 52454D          867            DB      'REM'
                     868            ;
01ED 97              869            DB      T_REM+1         ;NEXT TOKEN
01EE 4E455854        870            DB      'NEXT'
                     871            ;
01F2 98              872            DB      T_REM+2         ;ON ERROR TOKEN
01F3 4F4E4552        873            DB      'ONERR'
01F7 52         
                     874            ;
01F8 99              875            DB      T_REM+3         ;ON TOKEN
01F9 4F4E            876            DB      'ON'
                     877            ;
01FB 9A              878            DB      T_REM+4         ;INPUT
01FC 494E5055        879            DB      'INPUT'
0200 54         
                     880            ;
0201 9B              881            DB      T_REM+5         ;READ
0202 52454144        882            DB      'READ'
                     883            ;
  009C               884    T_DATA  EQU     T_REM+6         ;DATA
0206 9C              885            DB      T_DATA
0207 44415441        886            DB      'DATA'
                     887            ;
020B 9D              888            DB      T_DATA+1        ;RETURN
020C 52455455        889            DB      'RETURN'
0210 524E       
                     890            ;
0212 9E              891            DB      T_DATA+2        ;IF
0213 4946            892            DB      'IF'
                     893            ;
  009F               894    T_GOSB  EQU     T_DATA+3        ;GOSUB
0215 9F              895            DB      T_GOSB
0216 474F5355        896            DB      'GOSUB'
021A 42         
                     897            ;
021B A0              898            DB      T_GOSB+1        ;FOR
021C 464F52          899            DB      'FOR'
                     900            ;
021F A1              901            DB      T_GOSB+2        ;WHILE
0220 5748494C        902            DB      'WHILE'
0224 45         
                     903            ;
0225 A2              904            DB      T_GOSB+3        ;UNTIL
0226 554E5449        905            DB      'UNTIL'
022A 4C         
                     906            ;
022B A3              907            DB      T_GOSB+4        ;END
022C 454E44          908            DB      'END'
                     909            ;
BASIC52S                                                                                                      PAGE 17

  00A4               910    T_LAST  EQU     T_GOSB+5        ;LAST INITIAL TOKEN
                     911            ;
  00A4               912    T_TAB   EQU     T_LAST          ;TAB TOKEN
022F A4              913            DB      T_TAB
0230 544142          914            DB      'TAB'
                     915            ;
  00A5               916    T_THEN  EQU     T_LAST+1        ;THEN TOKEN
0233 A5              917            DB      T_THEN
0234 5448454E        918            DB      'THEN'
                     919            ;
  00A6               920    T_TO    EQU     T_LAST+2        ;TO TOKEN
0238 A6              921            DB      T_TO
0239 544F            922            DB      'TO'
                     923            ;
  00A7               924    T_STEP  EQU     T_LAST+3        ;STEP TOKEN
023B A7              925            DB      T_STEP
023C 53544550        926            DB      'STEP'
                     927            ;
  00A8               928    T_ELSE  EQU     T_LAST+4        ;ELSE TOKEN
0240 A8              929            DB      T_ELSE
0241 454C5345        930            DB      'ELSE'
                     931            ;
  00A9               932    T_SPC   EQU     T_LAST+5        ;SPACE TOKEN
0245 A9              933            DB      T_SPC
0246 535043          934            DB      'SPC'
                     935            ;
  00AA               936    T_CR    EQU     T_LAST+6
0249 AA              937            DB      T_CR
024A 4352            938            DB      'CR'
                     939            ;
024C AB              940            DB      T_CR+1
024D 49444C45        941            DB      'IDLE'
                     942            ;
0251 AC              943            DB      T_CR+2
0252 535440          944            DB      'ST@'
                     945            ;
0255 AD              946            DB      T_CR+3
0256 4C4440          947            DB      'LD@'
                     948            ;
0259 AE              949            DB      T_CR+4
025A 50474D          950            DB      'PGM'
                     951            ;
025D AF              952            DB      T_CR+5
025E 52524F4D        953            DB      'RROM'
                     954            ;
                     955            ; Operator tokens
                     956            ;
  00E0               957    T_LPAR  EQU     0E0H            ;LEFT PAREN
0262 E0              958            DB      T_LPAR
0263 28              959            DB      '('
                     960            ;
0264 E1              961            DB      T_LPAR+1        ;EXPONENTIAN
0265 2A2A            962            DB      '**'
                     963            ;
0267 E2              964            DB      T_LPAR+2        ;FP MULTIPLY
0268 2A              965            DB      '*'
                     966            ;
  00E3               967    T_ADD   EQU     T_LPAR+3
BASIC52S                                                                                                      PAGE 18

0269 E3              968            DB      T_LPAR+3        ;ADD TOKEN
026A 2B              969            DB      '+'
                     970            ;
026B E4              971            DB      T_LPAR+4        ;DIVIDE TOKEN
026C 2F              972            DB      '/'
                     973            ;
  00E5               974    T_SUB   EQU     T_LPAR+5        ;SUBTRACT TOKEN
026D E5              975            DB      T_SUB
026E 2D              976            DB      '-'
                     977            ;
026F E6              978            DB      T_LPAR+6        ;LOGICAL EXCLUSIVE OR
0270 2E584F52        979            DB      '.XOR.'
0274 2E         
                     980            ;
0275 E7              981            DB      T_LPAR+7        ;LOGICAL AND
0276 2E414E44        982            DB      '.AND.'
027A 2E         
                     983            ;
027B E8              984            DB      T_LPAR+8        ;LOGICAL OR
027C 2E4F522E        985            DB      '.OR.'
                     986            ;
  00E9               987    T_NEG   EQU     T_LPAR+9
                     988            ;
  00EA               989    T_EQU   EQU     T_LPAR+10       ;EQUAL
0280 EA              990            DB      T_EQU
0281 3D              991            DB      '='
                     992            ;
0282 EB              993            DB      T_LPAR+11       ;GREATER THAN OR EQUAL
0283 3E3D            994            DB      '>='
                     995            ;
0285 EC              996            DB      T_LPAR+12       ;LESS THAN OR EQUAL
0286 3C3D            997            DB      '<='
                     998            ;
0288 ED              999            DB      T_LPAR+13       ;NOT EQUAL
0289 3C3E           1000            DB      '<>'
                    1001            ;
028B EE             1002            DB      T_LPAR+14       ;LESS THAN
028C 3C             1003            DB      '<'
                    1004            ;
028D EF             1005            DB      T_LPAR+15       ;GREATER THAN
028E 3E             1006            DB      '>'
                    1007            ;
                    1008            ;
  00B0              1009    T_UOP   EQU     0B0H            ;UNARY OP BASE TOKEN
                    1010            ;
028F B0             1011            DB      T_UOP           ;ABS TOKEN
0290 414253         1012            DB      'ABS'
                    1013            ;
0293 B1             1014            DB      T_UOP+1         ;INTEGER TOKEN
0294 494E54         1015            DB      'INT'
                    1016            ;
0297 B2             1017            DB      T_UOP+2         ;SIGN TOKEN
0298 53474E         1018            DB      'SGN'
                    1019            ;
029B B3             1020            DB      T_UOP+3         ;GET TOKEN
029C 4E4F54         1021            DB      'NOT'
                    1022            ;
029F B4             1023            DB      T_UOP+4         ;COSINE TOKEN
BASIC52S                                                                                                      PAGE 19

02A0 434F53         1024            DB      'COS'
                    1025            ;
02A3 B5             1026            DB      T_UOP+5         ;TANGENT TOKEN
02A4 54414E         1027            DB      'TAN'
                    1028            ;
02A7 B6             1029            DB      T_UOP+6         ;SINE TOKEN
02A8 53494E         1030            DB      'SIN'
                    1031            ;
02AB B7             1032            DB      T_UOP+7         ;SQUARE ROOT TOKEN
02AC 535152         1033            DB      'SQR'
                    1034            ;
02AF B8             1035            DB      T_UOP+8         ;CBYTE TOKEN
02B0 434259         1036            DB      'CBY'
                    1037            ;
02B3 B9             1038            DB      T_UOP+9         ;EXP (E TO THE X) TOKEN
02B4 455850         1039            DB      'EXP'
                    1040            ;
02B7 BA             1041            DB      T_UOP+10
02B8 41544E         1042            DB      'ATN'
                    1043            ;
02BB BB             1044            DB      T_UOP+11
02BC 4C4F47         1045            DB      'LOG'
                    1046            ;
02BF BC             1047            DB      T_UOP+12        ;DBYTE TOKEN
02C0 444259         1048            DB      'DBY'
                    1049            ;
02C3 BD             1050            DB      T_UOP+13        ;XBYTE TOKEN
02C4 584259         1051            DB      'XBY'
                    1052            ;
  00BE              1053    T_ULAST EQU     T_UOP+14        ;LAST OPERATOR NEEDING PARENS
                    1054            ;
02C7 BE             1055            DB      T_ULAST
02C8 5049           1056            DB      'PI'
                    1057            ;
02CA BF             1058            DB      T_ULAST+1       ;RND TOKEN
02CB 524E44         1059            DB      'RND'
                    1060            ;
02CE C0             1061            DB      T_ULAST+2       ;GET TOKEN
02CF 474554         1062            DB      'GET'
                    1063            ;
02D2 C1             1064            DB      T_ULAST+3       ;FREE TOKEN
02D3 46524545       1065            DB      'FREE'
                    1066            ;
02D7 C2             1067            DB      T_ULAST+4       ;LEN TOKEN
02D8 4C454E         1068            DB      'LEN'
                    1069            ;
  00C3              1070    T_XTAL  EQU     T_ULAST+5       ;CRYSTAL TOKEN
02DB C3             1071            DB      T_XTAL
02DC 5854414C       1072            DB      'XTAL'
                    1073            ;
  00C4              1074    T_MTOP  EQU     T_ULAST+6       ;MTOP
02E0 C4             1075            DB      T_MTOP
02E1 4D544F50       1076            DB      'MTOP'
                    1077            ;
  00C6              1078    T_IE    EQU     T_ULAST+8       ;IE REGISTER
02E5 C6             1079            DB      T_IE
02E6 4945           1080            DB      'IE'
                    1081            ;
BASIC52S                                                                                                      PAGE 20

  00C7              1082    T_IP    EQU     T_ULAST+9       ;IP REGISTER
02E8 C7             1083            DB      T_IP
02E9 4950           1084            DB      'IP'
                    1085            ;
  00C8              1086    TMR0    EQU     T_ULAST+10      ;TIMER 0
02EB C8             1087            DB      TMR0
02EC 54494D45       1088            DB      'TIMER0'
02F0 5230       
                    1089            ;
  00C9              1090    TMR1    EQU     T_ULAST+11      ;TIMER 1
02F2 C9             1091            DB      TMR1
02F3 54494D45       1092            DB      'TIMER1'
02F7 5231       
                    1093            ;
  00CA              1094    TMR2    EQU     T_ULAST+12      ;TIMER 2
02F9 CA             1095            DB      TMR2
02FA 54494D45       1096            DB      'TIMER2'
02FE 5232       
                    1097            ;
  00C5              1098    T_TIME  EQU     T_ULAST+7       ;TIME
0300 C5             1099            DB      T_TIME
0301 54494D45       1100            DB      'TIME'
                    1101            ;
  00CB              1102    TT2C    EQU     T_ULAST+13      ;T2CON
0305 CB             1103            DB      TT2C
0306 5432434F       1104            DB      'T2CON'
030A 4E         
                    1105            ;
  00CC              1106    TTC     EQU     T_ULAST+14      ;TCON
030B CC             1107            DB      TTC
030C 54434F4E       1108            DB      'TCON'
                    1109            ;
  00CD              1110    TTM     EQU     T_ULAST+15      ;TMOD
0310 CD             1111            DB      TTM
0311 544D4F44       1112            DB      'TMOD'
                    1113            ;
  00CE              1114    TRC2    EQU     T_ULAST+16      ;RCAP2
0315 CE             1115            DB      TRC2
0316 52434150       1116            DB      'RCAP2'
031A 32         
                    1117            ;
  00CF              1118    T_P1    EQU     T_ULAST+17      ;P1
031B CF             1119            DB      T_P1
031C 504F5254       1120            DB      'PORT1'
0320 31         
                    1121            ;
  00D0              1122    T_PC    EQU     T_ULAST+18      ;PCON
0321 D0             1123            DB      T_PC
0322 50434F4E       1124            DB      'PCON'
                    1125            ;
  00D1              1126    T_ASC   EQU     T_ULAST+19      ;ASC TOKEN
0326 D1             1127            DB      T_ASC
0327 41534328       1128            DB      'ASC('
                    1129            ;
  00D2              1130    T_USE   EQU     T_ULAST+20      ;USING TOKEN
032B D2             1131            DB      T_USE
032C 5553494E       1132            DB      'USING('
0330 4728       
BASIC52S                                                                                                      PAGE 21

0332 D2             1133            DB      T_USE
0333 552E28         1134            DB      'U.('
                    1135            ;
  00D3              1136    T_CHR   EQU     T_ULAST+21      ;CHR TOKEN
0336 D3             1137            DB      T_CHR
0337 43485228       1138            DB      'CHR('
                    1139            ;
  00F0              1140    T_CMND  EQU     0F0H            ;COMMAND BASE
                    1141            ;
033B F0             1142            DB      0F0H            ;RUN TOKEN
033C 52554E         1143            DB      'RUN'
                    1144            ;
033F F1             1145            DB      0F1H            ;LIST TOKEN
0340 4C495354       1146            DB      'LIST'
                    1147            ;
0344 F2             1148            DB      0F2H            ;NULL TOKEN
0345 4E554C4C       1149            DB      'NULL'
                    1150            ;
0349 F3             1151            DB      0F3H            ;NEW TOKEN
034A 4E4557         1152            DB      'NEW'
                    1153            ;
034D F4             1154            DB      0F4H            ;CONTINUE TOKEN
034E 434F4E54       1155            DB      'CONT'
                    1156            ;
0352 F5             1157            DB      0F5H            ;PROGRAM TOKEN
0353 50524F47       1158            DB      'PROG'
                    1159            ;
0357 F6             1160            DB      0F6H            ;TRANSFER TOKEN
0358 58464552       1161            DB      'XFER'
                    1162            ;
035C F7             1163            DB      0F7H            ;RAM MODE
035D 52414D         1164            DB      'RAM'
                    1165            ;
0360 F8             1166            DB      0F8H            ;ROM MODE
0361 524F4D         1167            DB      'ROM'
                    1168    ;
                    1169    ;
                    1170    ;*****************************************************************************
                    1171    ;****** Disable Intel programming for to get room ****************************
                    1172    ;
                    1173    ;       DB      0F9H            ;INTELLIGENT PROM PROGRAMMING
                    1174    ;       DB      'FPROG'
                    1175    ;
                    1176    ;*****************************************************************************
                    1177    ;****** New command "ERASE" to fill an EEPROM with 0FFH  *********************
                    1178    ;****** Boehling 3 ***********************************************************
                    1179    ;
0364 F9             1180            db      0F9H            ;Erase an EEPROM
0365 45524153       1181            db      'ERASE'
0369 45         
                    1182    ;
                    1183    ;*****************************************************************************
                    1184    ;****** Karmann 2 Bugfix *****************************************************
                    1185    ;
036A FE             1186            db      0feh            ;dummy token and
036B 7F             1187            db      07fh            ;unused dummy char
                    1188    ;
                    1189    ;****** continue with original code: *****************************************
BASIC52S                                                                                                      PAGE 22

                    1190    ;
036C FF             1191            DB      0FFH            ;END OF TABLE
                    1192            ;
036D 45585452       1193    EIG:    DB      'EXTRA IGNORED"'
0371 41204947   
0375 4E4F5245   
0379 4422       
                    1194            ;
037B 412D5354       1195    EXA:    DB      'A-STACK"'
037F 41434B22   
                    1196            ;
0383 432D5354       1197    EXC:    DB      'C-STACK"'
0387 41434B22   
                    1198            ;
                    1199            ;**************************************************************
                    1200            ;
038B                1201    CRST:   ; This performs system initialzation, it was moved here so the
                    1202            ; new power on reset functions could be tested in an 8751.
                    1203            ;
                    1204            ;**************************************************************
                    1205            ;
                    1206            ; First, initialize SFR's
                    1207            ;
038B 75985A         1208            MOV     SCON,#5AH       ;INITIALIZE SFR'S
                    1209    ;
                    1210    ;*****************************************************************************
                    1211    ;****** Use XTAL up to 47 MHz ************************************************
                    1212    ;****** Wulf 2 ***************************************************************
                    1213    ;
                    1214    ;       MOV     TMOD,#10H
                    1215    ;
038E 758911         1216            mov     TMOD,#11H       ;Use 16 bit mode of timer 0
                    1217    ;
                    1218    ;*****************************************************************************
                    1219    ;
0391 758854         1220            MOV     TCON,#54H
0394 75C834         1221            MOV     T2CON,#34H
                    1222    ;       DB      75H             ;MOV DIRECT, # OP CODE
                    1223    ;       DB      0C8H            ;T2CON LOCATION
                    1224    ;       DB      34H             ;CONFIGURATION BYTE
                    1225    ;
                    1226    ;=== CH552 Added =====
0397 9137           1227            acall   setfsys ; Set CPU Clock 24MHz(Max Speed)
                    1228    ;=====================
                    1229            ;
0399 902001         1230            MOV     DPTR,#2001H     ;READ CODE AT 2001H
039C E4             1231            CLR     A
039D 93             1232            MOVC    A,@A+DPTR
039E B4AA03         1233            CJNE    A,#0AAH,CRST1   ;IF IT IS AN AAH, DO USER RESET
03A1 122090         1234            LCALL   2090H
                    1235            ;
03A4 78FF           1236    CRST1:  MOV     R0,#IRAMTOP     ;PUT THE TOP OF RAM IN R0
03A6 E4             1237            CLR     A               ;ZERO THE ACC
                    1238            ;
03A7 F6             1239    CRST2:  MOV     @R0,A           ;CLEAR INTERNAL MEMORY
03A8 D8FD           1240            DJNZ    R0,CRST2        ;LOOP TIL DONE
                    1241            ;
                    1242            ; Now, test the external memory
BASIC52S                                                                                                      PAGE 23

                    1243            ;
03AA 753E4D         1244            MOV     SPSAV,#CMNDSP   ;SET UP THE STACK
03AD 853E81         1245            MOV     SP,SPSAV
                    1246    ;
                    1247    ;*****************************************************************************
                    1248    ;****** Karmann 1 Bugfix *****************************************************
                    1249    ;
03B0 1217E0         1250            lcall   TEST_USER       ;chek for user command extensions
                    1251    ;
                    1252    ;****** continue with original code: *****************************************
                    1253    ;
03B3 751380         1254            MOV     BOFAH,#HIGH ROMADR
03B6 751411         1255            MOV     BOFAL,#LOW ROMADR+17
03B9 908000         1256            MOV     DPTR,#ROMADR    ;GET THE BYTE AT 8000H
03BC E0             1257            MOVX    A,@DPTR
03BD C3             1258            CLR     C
03BE 9431           1259            SUBB    A,#31H          ;FOR BIAS
03C0 F545           1260            MOV     MT1,A           ;SAVE IN DIRECT MATH LOC
03C2 C2E2           1261            CLR     ACC.2           ;SAVE FOR RESET
03C4 FF             1262            MOV     R7,A            ;SAVE IT IN R7
03C5 A3             1263            INC     DPTR
03C6 B1BA           1264            ACALL   L31DPI          ;SAVE BAUD RATE
03C8 120885         1265            LCALL   RCL
03CB A3             1266            INC     DPTR            ;GET MEMTOP
03CC B1BA           1267            ACALL   L31DPI
03CE 90005F         1268            MOV     DPTR,#5FH       ;READ THE EXTERNAL BYTE
03D1 E0             1269            MOVX    A,@DPTR
03D2 900000         1270            MOV     DPTR,#0         ;ESTABLISH BASE FOR CLEAR
03D5 B4A508         1271            CJNE    A,#0A5H,CRS     ;Erase the memory
03D8 E545           1272            MOV     A,MT1
03DA C2E0           1273            CLR     ACC.0           ;CLEAR BIT ONE
03DC 6404           1274            XRL     A,#4H
03DE 602C           1275            JZ      CR2
                    1276            ;
03E0 BF0202         1277    CRS:    CJNE    R7,#2,CRS1
03E3 8003           1278            SJMP    CRS2
03E5 BF0304         1279    CRS1:   CJNE    R7,#3,CR0
03E8 D17D           1280    CRS2:   ACALL   CL_1
03EA 8014           1281            SJMP    CR1
                    1282            ;
03EC AB83           1283    CR0:    MOV     R3,DPH          ;SAVE THE DPTR
03EE A982           1284            MOV     R1,DPL
03F0 A3             1285            INC     DPTR
03F1 745A           1286            MOV     A,#5AH
03F3 F0             1287            MOVX    @DPTR,A         ;Test external memory
03F4 E0             1288            MOVX    A,@DPTR
03F5 B45A08         1289            CJNE    A,#5AH,CR1
03F8 E4             1290            CLR     A
03F9 F0             1291            MOVX    @DPTR,A
                    1292    ;
                    1293    ;*****************************************************************************
                    1294    ;******* Skowronek alterations to programm EEPROM's in state of UV-EPROM's ***
                    1295    ;
                    1296    ;       CJNE    R3,#0E0H,CR0
                    1297    ;
                    1298    ;=== CH552 Replaced =====
                    1299    ;       CJNE    R3,#HIGH ROMADR-1,CR0   ;Stop the test at 8000H because
                    1300    ;       CJNE    R1,#LOW ROMADR-2,CR0    ;EEPROM starts here
BASIC52S                                                                                                      PAGE 24

                    1301    ;
03FA BB03EF         1302            CJNE    R3,#HIGH ERAMEND,CR0    ; Stop the test at 03FFH because
03FD B9FEEC         1303            CJNE    R1,#LOW ERAMEND-1,CR0   ; EXT-RAM end
                    1304    ;========================
                    1305    ;
                    1306    ;*****************************************************************************
                    1307    ;
0400 BB0300         1308    CR1:    CJNE    R3,#03H,CR11    ;NEED THIS MUCH RAM
0403 4086           1309    CR11:   JC      CRST
0405 90010A         1310            MOV     DPTR,#MEMTOP    ;SAVE MEMTOP
0408 D103           1311            ACALL   S31DP2          ;SAVE MEMTOP AND SEED RCELL
040A D15C           1312            ACALL   CNEW            ;CLEAR THE MEMORY AND SET UP POINTERS
                    1313            ;
040C D16F           1314    CR2:    ACALL   RC1             ;SET UP STACKS IF NOT DONE
                    1315            ;
040E 121657         1316            LCALL   AXTAL0          ;DO THE CRYSTAL
0411 E545           1317            MOV     A,MT1           ;GET THE RESET BYTE
0413 B40503         1318            CJNE    A,#5,CR20
0416 124039         1319            LCALL   4039H
0419 500D           1320    CR20:   JNC     BG1             ;CHECK FOR 0,1,2,3, OR 4
041B 30E049         1321            JNB     ACC.0,BG3       ;NO RUN IF WRONG TYPE
041E 908010         1322            MOV     DPTR,#ROMADR+16
0421 E0             1323            MOVX    A,@DPTR         ;READ THE BYTE
0422 B45542         1324            CJNE    A,#55H,BG3
0425 020802         1325            LJMP    CRUN
                    1326    ;
                    1327    ;*****************************************************************************
                    1328    ;******* New baudrate detection **********************************************
                    1329    ;******* Wulf 3 alteration 1 *************************************************
                    1330    ;
                    1331    ;BG1:    CLR     A               ;DO BAUD RATE
                    1332    ;        MOV     R3,A
                    1333    ;        MOV     R1,A
                    1334    ;        MOV     R0,#4
                    1335    ;        JB      RXD,$           ;LOOP UNTIL A CHARACTER IS RECEIVED
                    1336    ;       ;
                    1337    ;BG2:    DJNZ    R0,$            ;FOUR CLOCKS, IN LOOP
                    1338    ;        CALL    DEC3211         ;NINE CLOCKS
                    1339    ;        MOV     R0,#2           ;ONE CLOCK
                    1340    ;        JNB     RXD,BG2         ;TWO CLOCKS, LOOP UNTIL DONE
                    1341    ;        JB      RXD,$           ;WAIT FOR STOP CHARACTER TO END
                    1342    ;        JNB     RXD,$
                    1343    ;
                    1344    ;*****************************************************************************
                    1345    ;******* New processor type detection ****************************************
                    1346    ;******* Wulf 4 **************************************************************
                    1347    ;
                    1348    ;-- comment out for AT98LP52 ---------------------------------------------
                    1349    ;
                    1350    ;BG1:   clr     a
                    1351    ;       mov     t2con,a
                    1352    ;       mov     TH2,#0FFh
                    1353    ;       mov     TL2,#0F8h
                    1354    ;       jb      rxd,$
                    1355    ;       mov     t2con,#5        ;Timer2 start
                    1356    ;       jnb     rxd,$
                    1357    ;       mov     t2con,a         ;Timer2 stop
                    1358    ;       jb      rxd,$
BASIC52S                                                                                                      PAGE 25

                    1359    ;       jnb     rxd,$
                    1360    ;       call    sercalc         ;r3=timer2 MSB default
                    1361    ;       ;
                    1362    ;       cjne    a,ADCON,BG10    ;jump if A/D processor like 805x5
                    1363    ;BG14:  mov     a,S0RELL
                    1364    ;       cjne    a,#B9600,BG2    ;jump if not 805x7A
                    1365    ;       mov     a,r3
                    1366    ;       anl     S0RELH,a
                    1367    ;       mov     S0RELL,r1       ;start Baudratetimer 805X7A
                    1368    ;       sjmp    BG11
                    1369    ;       ;
                    1370    ;BG10:  cjne    r1,#B9600,BG12  ;jump if wrong fast baud rate
                    1371    ;BG11:  orl     PCON0,#080h     ;setb smod for fast mode
                    1372    ;       sjmp    BG13
                    1373    ;       ;
                    1374    ;BG12:  cjne    r1,#B4800,BG14  ;jump if wrong slow baudrate
                    1375    ;BG13:  setb    BD              ;enable baudrategenerator
                    1376    ;       sjmp    BG15
                    1377    ;       ;
                    1378    ;BG2:   mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1379    ;BG15:  CALL    RCL             ;LOAD THE TIMER
                    1380    
                    1381    ;
                    1382    ;-- insert for AT98LP52 --------------------------------------------------
                    1383    ;
                    1384    ;BG1:   mov     r6,#0           ; Speed Table Index
                    1385    ;       mov     r3,#0FFH        ; Set R3 = RCAP2H
                    1386    ;
                    1387    ;BG11:  mov     dptr,#SPEED_TBL ; Speed Table
                    1388    ;       mov     a,r6            ; Speed Table Index
                    1389    ;       movc    a,@a+dptr       ; Fetch Speed Table
                    1390    ;       inc     r6
                    1391    ;       jz      bg3             ; Table End, Use Last Speed
                    1392    ;
                    1393    ;       mov     r1,a            ; Set R1 = RCAP2L
                    1394    ;       mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1395    ;       call    RCL             ;LOAD THE TIMER
                    1396    ;
                    1397    ;       mov     dptr,#TEST_MSG  ; Put Test Message
                    1398    ;       mov     r7,#0           ; Message Text Index
                    1399    ;
                    1400    ;BG13:  mov     a,r7            ; Text Index
                    1401    ;       movc    a,@a+dptr       ; Fetch Message String
                    1402    ;       jz      BG14            ; String End ?
                    1403    ;       jnb     TI,$            ; Wait Until Transmmit End
                    1404    ;       clr     TI              ; Clear TX Flag
                    1405    ;       mov     SBUF,a          ; Output Character
                    1406    ;       inc     r7              ; Next Character
                    1407    ;       sjmp    BG13
                    1408    ;
                    1409    ;BG14:  jnb     RI,$            ; Wait Until Receive End
                    1410    ;       mov     a,SBUF          ; Get Receive Character
                    1411    ;       clr     RI              ; Reset Flag
                    1412    ;       anl     a,#07FH         ; Clear Bit-7
                    1413    ;       cjne    a,#'y',BG11     ; Ok?, Test Next Speed
                    1414    ;       sjmp    BG3
                    1415    ;
                    1416    ;SPEED_TBL:     db      0A0H    ; RCAP2H,L = FFA0H (19.2Kbps, X'TAL 29.4912MHz, Fast-Mode)
BASIC52S                                                                                                      PAGE 26

                    1417    ;               db      0B8H    ; RCAP2H,L = FFB8H (19.2Kbps, X'TAL 22.1184MHz, Fast-Mode)
                    1418    ;               db      0D0H    ; RCAP2H,L = FFD0H (19.2Kbbs, X'TAL 29.4912MHz, 8051-Mode)
                    1419    ;               db      0DCH    ; RCAP2H,L = FFDCH (19.2Kbps, X'TAL 22.1184MHz, 8051-Mode or
                                                                                11.0592MHz, Fast-Mode)
                    1420    ;               db      00h     ; Table End
                    1421    
                    1422    ;-- CH552 Insert Start ---------------------------------------------------------
                    1423    ;===============================================================================
                    1424    ;  CH552 Set Fixed baudrate 19.23Kbps
                    1425    ;  RCAP2H,L = 65536 - (Fsys/16/Baud Rate) : When Fsys = 24MHz, bTMR_CLK=1,bT2_CLK=1
                    1426    ;===============================================================================
  FFB2              1427    baud19K equ     0ffb2h          ; RCAP2H,L Value of 19.23Kbps (FFB2H = 65458)
                    1428    ;
0428                1429    BG1:
0428 43C9C0         1430            orl             t2mod,#0C0H             ; Set bTMR_CLK, bT2_CLK ( Set Timer2 Clock, 
                                                                               MAX Speed = Fsys = 24MHz )
042B 7BFF           1431            mov             r3,#high baud19k        ; Set R3 = RCAP2H = FFH
042D 79B2           1432            mov             r1,#low baud19k         ; Set R1 = RCAP2L = B2H
042F 75C834         1433            mov             t2con,#34h              ; configure Timer2 as baudrate generator
0432 120885         1434            call    RCL                             ; LOAD THE TIMER
                    1435    
0435 8030           1436            sjmp    BG3
                    1437    
                    1438    ;===============================================================================
                    1439    ;  CH552 System Clock (Fsys) Up 6MHz -> 24MHz
                    1440    ;===============================================================================
0437                1441    setfsys:
0437 E5B9           1442            mov     a,CLOCK_CFG             ; Get CLOCK_CFG
0439 54F8           1443            anl     a,#0F8H                 ;  Clear MASK_SYS_CK_SEL
043B 4406           1444            orl     a,#006H                 ;  Set MASK_SYS_CK_SEL = 110B(24MHz)
                    1445    
043D 75A155         1446            mov     SAFE_MOD,#055H  ; Enter Safe_Mode Key-1
0440 75A1AA         1447            mov     SAFE_MOD,#0AAH  ; Enter Safe_Mode Key-2
                    1448    
0443 F5B9           1449            mov     CLOCK_CFG,a             ; Rewrite CLOCK_CFG
                    1450    
0445 75A100         1451            mov     SAFE_MOD,#00    ; Exit Safe_Mode
                    1452    
0448 22             1453            ret
                    1454    
0467                1455            org     0467h           ; Insert Dummy Space, 0467H = Original BG3 Address
                    1456    ;
                    1457    ;-- insert end --------------------------------------------------------------
                    1458    ;
                    1459    ;****** Original code from here **********************************************
                    1460    ;
0467 901FD3         1461    BG3:    MOV     DPTR,#S_N       ;GET THE MESSAGE
046A D1AD           1462            ACALL   CRP             ;PRINT IT
046C 02177F         1463            LJMP    CRAM
                    1464            ;
                    1465            ;***************************************************************
                    1466            ;
                    1467            ; CIPROG AND CPROG - Program a prom
                    1468            ;
                    1469            ;***************************************************************
                    1470            ;
046F 7F00           1471    PG8:    MOV     R7,#00H         ;PROGRAM ONE BYTE AT A TIME
0471 7E01           1472            MOV     R6,#01H
BASIC52S                                                                                                      PAGE 27

0473 7A7F           1473            MOV     R2,#HIGH ROMADR-1
0475 78FF           1474            MOV     R0,#LOW ROMADR-1;LOAD PROM ADDRESS
0477 91B5           1475            ACALL   PG101
0479 0E             1476            INC     R6
047A E5CB           1477            MOV     A,RCAPH2
                    1478    ;       DB      0E5H            ;MOV A DIRECT OP CODE
                    1479    ;       DB      0CBH            ;ADDRESS OF R2CAP HIGH
047C 91B5           1480            ACALL   PG101
047E E5CA           1481            MOV     A,RCAPL2
                    1482    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    1483    ;       DB      0CAH            ;R2CAP LOW
0480 7E03           1484            MOV     R6,#3
0482 7909           1485            MOV     R1,#LOW MEMTOP-1
0484 7B01           1486            MOV     R3,#HIGH MEMTOP
0486 91B5           1487            ACALL   PG101           ;SAVE MEMTOP
0488 8029           1488            SJMP    PGR
                    1489    ;
                    1490    ;
                    1491    ;*****************************************************************************
                    1492    ;****** Skowronek alterations to programm EEPROM's in state of UV-EPROM's ****
                    1493    ;****** Support the "PGM" statement was added by D. Wulf *********************
                    1494    ;****** Disable Intel programming and code optimize by H.-J. Boehling ********
                    1495    ;
                    1496    ;CIPROG: MOV    DPTR,#IPROGS    ;LOAD IPROG LOCATION
                    1497    ;       SETB    INTELB
                    1498    ;       SJMP    CPROG1          ;GO DO PROG
                    1499    ;       ;
                    1500    ;CPROG: MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1501    ;       CLR     INTELB
                    1502    ;       ;
                    1503    ;CPROG1: ACALL  LD_T            ;LOAD THE TIMER
                    1504    ;       CLR     PROMV           ;TURN ON THE PROM VOLTAGE
                    1505    ;       CALL    DELTST          ;SEE IF A CR
                    1506    ;       JNZ     PG8             ;SAVE TIMER IF SO
                    1507    ;       MOV     R4,#0FEH
                    1508    ;       SETB    INBIT
                    1509    ;       ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
                    1510    ;       CALL    TEMPD           ;SAVE THE ADDRESS
                    1511    ;       MOV     A,R4            ;GET COUNT
                    1512    ;       CPL     A
                    1513    ;       CALL    TWO_R2          ;PUT IT ON THE STACK
                    1514    ;       CALL    FP_BASE7        ;OUTPUT IT
                    1515    ;       ACALL   CCAL            ;GET THE PROGRAM
                    1516    ;       ACALL   CRLF            ;DO CRLF
                    1517    ;       MOV     R0,TEMP4        ;GET ADDRESS
                    1518    ;       MOV     R2,TEMP5
                    1519    ;       MOV     A,#55H          ;LOAD SIGNIFIER
                    1520    ;       INC     R6              ;LOAD LEN + 1
                    1521    ;       CJNE    R6,#00,CPROG2
                    1522    ;       INC     R7
                    1523    ;CPROG2: ACALL   PG102
                    1524    ;
                    1525    ;PGR:   SETB    PROMV
                    1526    ;       AJMP    C_K
                    1527    ;
                    1528    ;PG1:   MOV     P2,R3           ;GET THE BYTE TO PROGRAM
                    1529    ;       MOVX    A,@R1
                    1530    ;PG101:  LCALL   INC3210         ;BUMP POINTERS
BASIC52S                                                                                                      PAGE 28

                    1531    ;PG102:  MOV     R5,#1           ;SET UP INTELLIGENT COUMTER
                    1532    ;
                    1533    ;PG2:   MOV     R4,A            ;SAVE THE BYTE IN R4
                    1534    ;       ACALL   PG7             ;PROGRAM THE BYTE
                    1535    ;       ACALL   PG9
                    1536    ;       JB      INTELB,PG4      ;SEE IF INTELLIGENT PROGRAMMING
                    1537    ;
                    1538    ;PG3:   XRL     A,R4
                    1539    ;       JNZ     PG6             ;ERROR IF NOT THE SAME
                    1540    ;       CALL    DEC76           ;BUMP THE COUNTERS
                    1541    ;       JNZ     PG1             ;LOOP IF NOT DONE
                    1542    ;       ANL     PSW,#11100111B  ;INSURE RB0
                    1543    ;PG31:   RET
                    1544    ;
                    1545    ;PG4:   XRL     A,R4            ;SEE IF PROGRAMMED
                    1546    ;       JNZ     PG5             ;JUMP IF NOT
                    1547    ;       MOV     A,R4            ;GET THE DATA BACK
                    1548    ;       ACALL   PG7             ;PROGRAM THE LOCATION
                    1549    ;PG41:   ACALL   ZRO             ;AGAIN
                    1550    ;       ACALL   ZRO             ;AND AGAIN
                    1551    ;       ACALL   ZRO             ;AND AGAIN
                    1552    ;       DJNZ    R5,PG41         ;KEEP DOING IT
                    1553    ;       ACALL   PG9             ;RESET PROG
                    1554    ;       SJMP    PG3             ;FINISH THE LOOP
                    1555    ;
                    1556    ;PG5:   INC     R5              ;BUMP THE COUNTER
                    1557    ;       MOV     A,R4            ;GET THE BYTE
                    1558    ;       CJNE    R5,#25,PG2      ;SEE IF TRIED 25 TIMES
                    1559    ;
                    1560    ;PG6:   SETB    PROMV           ;TURN OFF PROM VOLTAGE
                    1561    ;       MOV     PSW,#0          ;INSURE RB0
                    1562    ;       JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
                    1563    ;       MOV     DPTR,#E16X      ;PROGRAMMING ERROR
                    1564    ;
                    1565    ;ERRLK: LJMP    ERROR           ;PROCESS THE ERROR
                    1566    ;
                    1567    ;PG7:   MOV     P0,R0           ;SET UP THE PORTS
                    1568    ;       MOV     P2,R2           ;LATCH LOW ORDER ADDRESS
                    1569    ;       ACALL   PG11            ;DELAY FOR 8748/9
                    1570    ;       CLR     ALED
                    1571    ;       MOV     P0,A            ;PUT DATA ON THE PORT
                    1572    ;       ;
                    1573    ;ZRO:   NOP                     ;SETTLEING TIME + FP ZERO
                    1574    ;       NOP
                    1575    ;       NOP
                    1576    ;       NOP
                    1577    ;       NOP
                    1578    ;       NOP
                    1579    ;       ACALL   PG11            ;DELAY A WHILE
                    1580    ;       CLR     PROMP           ;START PROGRAMMING
                    1581    ;       ACALL   TIMER_LOAD      ;START THE TIMER
                    1582    ;       JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
                    1583    ;       RET                     ;EXIT
                    1584    ;
                    1585    ;PG9:   SETB    PROMP
                    1586    ;       ACALL   PG11            ;DELAY FOR A WHILE
                    1587    ;       JNB     P3.2,$          ;LOOP FOR EEPROMS
                    1588    ;       MOV     P0,#0FFH
BASIC52S                                                                                                      PAGE 29

                    1589    ;       CLR     P3.7            ;LOWER READ
                    1590    ;       ACALL   PG11
                    1591    ;       MOV     A,P0            ;READ THE PORT
                    1592    ;       SETB    P3.7
                    1593    ;       SETB    ALED
                    1594    ;       RET
                    1595    ;
                    1596    ;PG11:  MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
                    1597    ;       DJNZ    TEMP5,$
                    1598    ;       RET
                    1599    ;
                    1600    ;       ;**************************************************************
                    1601    ;       ;
                    1602    ;PGU:   ;PROGRAM A PROM FOR THE USER
                    1603    ;       ;
                    1604    ;       ;**************************************************************
                    1605    ;
                    1606    ;       CLR     PROMV           ;TURN ON THE VOLTAGE
                    1607    ;       MOV     PSW,#00011000B  ;SELECT RB3
                    1608    ;       ACALL   PG1             ;DO IT
                    1609    ;       SETB    PROMV           ;TURN IT OFF
                    1610    ;       RET
                    1611    ;
                    1612    ;****** alteredet code starts here: ******************************************
                    1613    ;
048A 900128         1614    CPROG:  MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1615            ;
048D B182           1616    CPROG1: ACALL   LD_T            ;LOAD THE TIMER
048F 120EE1         1617            CALL    DELTST          ;SEE IF A CR
0492 70DB           1618            JNZ     PG8             ;SAVE TIMER IF SO
0494 7CFE           1619            MOV     R4,#0FEH
0496 D21D           1620            SETB    INBIT
0498 B15B           1621            ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
049A 121854         1622            CALL    TEMPD           ;SAVE THE ADDRESS
049D EC             1623            MOV     A,R4            ;GET COUNT
049E F4             1624            CPL     A
049F 1214B1         1625            CALL    TWO_R2          ;PUT IT ON THE STACK
04A2 12197D         1626            CALL    FP_BASE7        ;OUTPUT IT
04A5 B11C           1627            ACALL   CCAL            ;GET THE PROGRAM
04A7 D1A5           1628            ACALL   CRLF            ;DO CRLF
04A9 A80E           1629            MOV     R0,TEMP4        ;GET ADDRESS
04AB AA0F           1630            MOV     R2,TEMP5
04AD 7455           1631            MOV     A,#55H          ;LOAD SIGNIFIER
04AF 0E             1632            INC     R6              ;LOAD LEN + 1
04B0 0F             1633            INC     R7
04B1 91C3           1634    CPROG2: ACALL   PG2
                    1635            ;
04B3 A140           1636    PGR:    AJMP    C_K             ;Exit to command mode
                    1637            ;
04B5 0F             1638    PG101:  INC     R7
04B6 BE0007         1639            CJNE    R6,#0,PG4
04B9 1F             1640            DEC     R7
04BA 8004           1641            SJMP    PG4
                    1642            ;
04BC 0F             1643    PG10:   INC     R7
                    1644            ;
04BD 8BA0           1645    PG1:    MOV     P2,R3           ;GET THE BYTE TO PROGRAM
04BF E3             1646            MOVX    A,@R1
BASIC52S                                                                                                      PAGE 30

04C0 121576         1647    PG4:    LCALL   INC3210         ;BUMP POINTERS
                    1648            ;
04C3 91D9           1649    PG2:    ACALL   PG7             ;Write the byte
04C5 7004           1650            JNZ     PG5             ;exit if error
04C7 DEF4           1651            DJNZ    R6,PG1
04C9 DFF2           1652            DJNZ    R7,PG1          ;LOOP IF NOT DONE
                    1653            ;
04CB 53D0E7         1654    PG5:    ANL     PSW,#11100111B  ;INSURE RB0
04CE 6027           1655            JZ      PG31            ;Jump if none error
                    1656            ;
04D0 302F24         1657    PG6:    JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
04D3 901F9A         1658            MOV     DPTR,#E16X      ;PROGRAMMING ERROR
04D6 02188F         1659    ERRLK:  LJMP    ERROR           ;PROCESS THE ERROR
                    1660            ;
                    1661            ;
04D9 FC             1662    PG7:    MOV     R4,A            ;SAVE THE BYTE IN R4 for error detect
04DA 8A83           1663            mov     dph,r2          ;load data pointer with eeprom address
04DC 8882           1664            mov     dpl,r0
04DE F0             1665            movx    @dptr,a         ;write the byte
04DF 7D             1666            DB      07DH            ;mov     r5,#0
                    1667            ;
04E0 00             1668    ZRO:    NOP
04E1 00             1669            NOP                     ;SETTLEING TIME + FP ZERO
04E2 00             1670            NOP                     ;Atenttion. This 6 NOP's a not only
04E3 00             1671            NOP                     ;for settleing time, it is also the
04E4 00             1672            NOP                     ;floating point zero!
04E5 00             1673            NOP
04E6 750F0C         1674            MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
04E9 D50FFD         1675            DJNZ    TEMP5,$
04EC B12D           1676            ACALL   TIMER_LOAD      ;START THE TIMER
04EE 308FFD         1677            JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
04F1 E0             1678            movx    A,@DPTR         ;Read back for error detect
04F2 6C             1679            xrl     A,R4            ;Test for error
04F3 6002           1680            jz      PG31
04F5 DDE9           1681            djnz    r5,ZRO
04F7 22             1682    PG31:   RET
                    1683            ;
                    1684            ;**************************************************************
                    1685            ;
04F8                1686    PGU:    ;PROGRAM A PROM FOR THE USER (statement 'PGM')
                    1687            ;
                    1688            ;**************************************************************
                    1689            ;
04F8 75D018         1690            MOV     PSW,#00011000B  ;SELECT RB3
04FB BE00BE         1691            CJNE    R6,#0,PG10
04FE 80BD           1692            SJMP    PG1
                    1693    ;
                    1694    ;*****************************************************************************
                    1695    ;****** The new command "ERASE" to fill a EEPROM with 0FFH *******************
                    1696    ;****** Boehling 3 ***********************************************************
                    1697    ;
0500 7F40           1698    CERASE: mov     R7,#40H                 ;Erase 16K byte
0502 7E00           1699            mov     R6,#00H
0504 7A7F           1700            mov     R2,#HIGH ROMADR-1       ;Startaddress EEPROM
0506 78FF           1701            mov     R0,#LOW ROMADR-1
0508 900128         1702            mov     DPTR,#PROGS             ;Point to EEPROM timeing
050B B182           1703            acall   LD_T                    ;Load the timer
                    1704            ;
BASIC52S                                                                                                      PAGE 31

050D 121576         1705    ERA1:   lcall   INC3210                 ;Bump pointers
0510 74FF           1706            mov     A,#0FFH                 ;Fill the EEPROM with 0FFH
0512 91D9           1707            acall   PG7                     ;Write the byte
0514 70BA           1708            jnz     PG6                     ;Exit if error
0516 DEF5           1709            DJNZ    R6,ERA1
0518 DFF3           1710            DJNZ    R7,ERA1                 ;Do the loop
051A A140           1711            ajmp    C_K                     ;Exit to command mode
                    1712    ;
                    1713    ;*****************************************************************************
                    1714    ;
                    1715    ;****** continue with original code: *****************************************
                    1716            ;
                    1717            ;*************************************************************
                    1718            ;
051C                1719    CCAL:   ; Set up for prom moves
                    1720            ; R3:R1 gets source
                    1721            ; R7:R6 gets # of bytes
                    1722            ;
                    1723            ;*************************************************************
                    1724            ;
051C B18A           1725            ACALL   GETEND          ;GET THE LAST LOCATION
051E A3             1726            INC     DPTR            ;BUMP TO LOAD EOF
051F AB13           1727            MOV     R3,BOFAH
0521 A914           1728            MOV     R1,BOFAL        ;RESTORE START
0523 C3             1729            CLR     C               ;PREPARE FOR SUBB
0524 E582           1730            MOV     A,DPL           ;SUB DPTR - BOFA > R7:R6
0526 99             1731            SUBB    A,R1
0527 FE             1732            MOV     R6,A
0528 E583           1733            MOV     A,DPH
052A 9B             1734            SUBB    A,R3
052B FF             1735            MOV     R7,A
052C 22             1736    CCAL1:  RET
                    1737            ;
                    1738            ;**************************************************************
                    1739            ;
052D                1740    TIMER_LOAD:; Load the timer
                    1741            ;
                    1742            ;*************************************************************
                    1743            ;
052D B12C           1744            ACALL   CCAL1           ;DELAY FOUR CLOCKS
052F                1745    TIMER_LOAD1:
052F C28E           1746            CLR     TR1             ;STOP IT WHILE IT'S LOADED
0531 85408D         1747            MOV     TH1,T_HH
0534 85418B         1748            MOV     TL1,T_LL
0537 C28F           1749            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
0539 D28E           1750            SETB    TR1             ;START IT NOW
053B 22             1751            RET
                    1752            ;
                    1753            ;***************************************************************
                    1754            ;
053C                1755    CROM:   ; The command action routine - ROM - Run out of rom
                    1756            ;
                    1757            ;***************************************************************
                    1758            ;
053C C217           1759            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
053E B143           1760            ACALL   RO1             ;DO IT
                    1761            ;
0540 021092         1762    C_K:    LJMP    CL3             ;EXIT
BASIC52S                                                                                                      PAGE 32

                    1763            ;
                    1764    ;RO1:    CALL    INTGER         ;SEE IF INTGER PRESENT
                    1765    ;        MOV     R4,R0B0        ;SAVE THE NUMBER
                    1766    ;        JNC     $+4
                    1767    ;        MOV     R4,#01H        ;ONE IF NO INTEGER PRESENT
                    1768    ;       ACALL   ROMFD           ;FIND THE PROGRAM
                    1769    ;
0543 120EE1         1770    RO1:    CALL    DELTST
0546 7C01           1771            MOV     R4,#1
0548 5004           1772            JNC     RO11
054A 120E8E         1773            CALL    ONE
054D FC             1774            MOV     R4,A
                    1775    ;
054E B15B           1776    RO11:   ACALL   ROMFD
0550 BC0011         1777            CJNE    R4,#0,RFX       ;EXIT IF R4 <> 0
0553 A3             1778            INC     DPTR            ;BUMP PAST TAG
0554 858313         1779            MOV     BOFAH,DPH       ;SAVE THE ADDRESS
0557 858214         1780            MOV     BOFAL,DPL
055A 22             1781            RET
                    1782            ;
055B 908010         1783    ROMFD:  MOV     DPTR,#ROMADR+16 ;START OF USER PROGRAM
                    1784            ;
055E E0             1785    RF1:    MOVX    A,@DPTR         ;GET THE BYTE
055F B45509         1786            CJNE    A,#55H,RF3      ;SEE IF PROPER TAG
0562 DC01           1787            DJNZ    R4,RF2          ;BUMP COUNTER
                    1788            ;
0564 22             1789    RFX:    RET                     ;DPTR HAS THE START ADDRESS
                    1790            ;
0565 A3             1791    RF2:    INC     DPTR            ;BUMP PAST TAG
0566 B1AC           1792            ACALL   G5
0568 A3             1793            INC     DPTR            ;BUMP TO NEXT PROGRAM
0569 80F3           1794            SJMP    RF1             ;DO IT AGAIN
                    1795            ;
056B 101DF6         1796    RF3:    JBC     INBIT,RFX       ;EXIT IF SET
                    1797            ;
056E 901FC9         1798    NOGO:   MOV     DPTR,#NOROM
0571 81D6           1799            AJMP    ERRLK
                    1800            ;
                    1801            ;***************************************************************
                    1802            ;
0573                1803    L20DPI: ; load R2:R0 with the location the DPTR is pointing to
                    1804            ;
                    1805            ;***************************************************************
                    1806            ;
0573 E0             1807            MOVX    A,@DPTR
0574 FA             1808            MOV     R2,A
0575 A3             1809            INC     DPTR
0576 E0             1810            MOVX    A,@DPTR
0577 F8             1811            MOV     R0,A
0578 22             1812            RET                     ;DON'T BUMP DPTR
                    1813            ;
                    1814            ;***************************************************************
                    1815            ;
0579                1816    X31DP:  ; swap R3:R1 with DPTR
                    1817            ;
                    1818            ;***************************************************************
                    1819            ;
0579 CB             1820            XCH     A,R3
BASIC52S                                                                                                      PAGE 33

057A C583           1821            XCH     A,DPH
057C CB             1822            XCH     A,R3
057D C9             1823            XCH     A,R1
057E C582           1824            XCH     A,DPL
0580 C9             1825            XCH     A,R1
0581 22             1826            RET
                    1827            ;
                    1828            ;***************************************************************
                    1829            ;
0582                1830    LD_T:   ; Load the timer save location with the value the DPTR is
                    1831            ; pointing to.
                    1832            ;
                    1833            ;****************************************************************
                    1834            ;
0582 E0             1835            MOVX    A,@DPTR
0583 F540           1836            MOV     T_HH,A
0585 A3             1837            INC     DPTR
0586 E0             1838            MOVX    A,@DPTR
0587 F541           1839            MOV     T_LL,A
0589 22             1840            RET
                    1841            ;
                    1842            ;
                    1843            ;***************************************************************
                    1844            ;
                    1845            ;GETLIN - FIND THE LOCATION OF THE LINE NUMBER IN R3:R1
                    1846            ;         IF ACC = 0 THE LINE WAS NOT FOUND I.E. R3:R1
                    1847            ;         WAS TOO BIG, ELSE ACC <> 0 AND THE DPTR POINTS
                    1848            ;         AT THE LINE THAT IS GREATER THAN OR EQUAL TO THE
                    1849            ;         VALUE IN R3:R1.
                    1850            ;
                    1851            ;***************************************************************
                    1852            ;
058A D229           1853    GETEND: SETB    ENDBIT          ;GET THE END OF THE PROGRAM
                    1854            ;
058C 120E9B         1855    GETLIN: CALL    DP_B            ;GET BEGINNING ADDRESS
                    1856            ;
058F 120AA4         1857    G1:     CALL    B_C
0592 6012           1858            JZ      G3              ;EXIT WITH A ZERO IN A IF AT END
0594 A3             1859            INC     DPTR            ;POINT AT THE LINE NUMBER
0595 20290A         1860            JB      ENDBIT,G2       ;SEE IF WE WANT TO FIND THE END
0598 B1CC           1861            ACALL   DCMPX           ;SEE IF (DPTR) = R3:R1
059A B1C2           1862            ACALL   DECDP           ;POINT AT LINE COUNT
059C E0             1863            MOVX    A,@DPTR         ;PUT LINE LENGTH INTO ACC
059D 202A06         1864            JB      UBIT,G3         ;EXIT IF EQUAL
05A0 4004           1865            JC      G3              ;SEE IF LESS THAN OR ZERO
                    1866            ;
05A2 B1DE           1867    G2:     ACALL   ADDPTR          ;ADD IT TO DPTR
05A4 80E9           1868            SJMP    G1              ;LOOP
                    1869            ;
05A6 C229           1870    G3:     CLR     ENDBIT          ;RESET ENDBIT
05A8 22             1871            RET                     ;EXIT
                    1872            ;
05A9 900200         1873    G4:     MOV     DPTR,#PSTART    ;DO RAM
                    1874            ;
05AC D229           1875    G5:     SETB    ENDBIT
05AE 80DF           1876            SJMP    G1              ;NOW DO TEST
                    1877            ;
                    1878            ;***************************************************************
BASIC52S                                                                                                      PAGE 34

                    1879            ;
                    1880            ; LDPTRI - Load the DATA POINTER with the value it is pointing
                    1881            ;          to - DPH = (DPTR) , DPL = (DPTR+1)
                    1882            ;
                    1883            ; acc gets wasted
                    1884            ;
                    1885            ;***************************************************************
                    1886            ;
05B0 E0             1887    LDPTRI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05B1 C0E0           1888            PUSH    ACC             ;SAVE IT
05B3 A3             1889            INC     DPTR            ;BUMP THE POINTER
05B4 E0             1890            MOVX    A,@DPTR         ;GET THE LOW BYTE
05B5 F582           1891            MOV     DPL,A           ;PUT IT IN DPL
05B7 D083           1892            POP     DPH             ;GET THE HIGH BYTE
05B9 22             1893            RET                     ;GO BACK
                    1894            ;
                    1895            ;***************************************************************
                    1896            ;
                    1897            ;L31DPI - LOAD R3 WITH (DPTR) AND R1 WITH (DPTR+1)
                    1898            ;
                    1899            ;ACC GETS CLOBBERED
                    1900            ;
                    1901            ;***************************************************************
                    1902            ;
05BA E0             1903    L31DPI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05BB FB             1904            MOV     R3,A            ;PUT IT IN THE REG
05BC A3             1905            INC     DPTR            ;BUMP THE POINTER
05BD E0             1906            MOVX    A,@DPTR         ;GET THE NEXT BYTE
05BE F9             1907            MOV     R1,A            ;SAVE IT
05BF 22             1908            RET
                    1909            ;
                    1910            ;***************************************************************
                    1911            ;
                    1912            ;DECDP - DECREMENT THE DATA POINTER - USED TO SAVE SPACE
                    1913            ;
                    1914            ;***************************************************************
                    1915            ;
05C0 B1C2           1916    DECDP2: ACALL   DECDP
                    1917            ;
05C2 C582           1918    DECDP:  XCH     A,DPL           ;GET DPL
05C4 7002           1919            JNZ     DECDP1          ;BUMP IF ZERO
05C6 1583           1920            DEC     DPH
05C8 14             1921    DECDP1: DEC     A               ;DECREMENT IT
05C9 C582           1922            XCH     A,DPL           ;GET A BACK
05CB 22             1923            RET                     ;EXIT
                    1924            ;
                    1925            ;***************************************************************
                    1926            ;
                    1927            ;DCMPX - DOUBLE COMPARE - COMPARE (DPTR) TO R3:R1
                    1928            ;R3:R1 - (DPTR) = SET CARRY FLAG
                    1929            ;
                    1930            ;IF R3:R1 > (DPTR) THEN C = 0
                    1931            ;IF R3:R1 < (DPTR) THEN C = 1
                    1932            ;IF R3:R1 = (DPTR) THEN C = 0
                    1933            ;
                    1934            ;***************************************************************
                    1935            ;
05CC C22A           1936    DCMPX:  CLR     UBIT            ;ASSUME NOT EQUAL
BASIC52S                                                                                                      PAGE 35

05CE E0             1937            MOVX    A,@DPTR         ;GET THE BYTE
05CF B5030A         1938            CJNE    A,R3B0,D1       ;IF A IS GREATER THAN R3 THEN NO CARRY
                    1939                                    ;WHICH IS R3<@DPTR = NO CARRY AND
                    1940                                    ;R3>@DPTR CARRY IS SET
05D2 A3             1941            INC     DPTR            ;BUMP THE DATA POINTER
05D3 E0             1942            MOVX    A,@DPTR         ;GET THE BYTE
05D4 B1C2           1943            ACALL   DECDP           ;PUT DPTR BACK
05D6 B50103         1944            CJNE    A,R1B0,D1       ;DO THE COMPARE
05D9 B3             1945            CPL     C               ;FLIP CARRY
                    1946            ;
05DA B22A           1947            CPL     UBIT            ;SET IT
05DC B3             1948    D1:     CPL     C               ;GET THE CARRY RIGHT
05DD 22             1949            RET                     ;EXIT
                    1950            ;
                    1951            ;***************************************************************
                    1952            ;
                    1953            ; ADDPTR - Add acc to the dptr
                    1954            ;
                    1955            ; acc gets wasted
                    1956            ;
                    1957            ;***************************************************************
                    1958            ;
05DE 2582           1959    ADDPTR: ADD     A,DPL           ;ADD THE ACC TO DPL
05E0 F582           1960            MOV     DPL,A           ;PUT IT IN DPL
05E2 5002           1961            JNC     ADDPTR1         ;JUMP IF NO CARRY
05E4 0583           1962            INC     DPH             ;BUMP DPH
05E6 22             1963    ADDPTR1:RET                     ;EXIT
                    1964            ;
                    1965            ;*************************************************************
                    1966            ;
05E7                1967    LCLR:   ; Set up the storage allocation
                    1968            ;
                    1969            ;*************************************************************
                    1970            ;
05E7 D19A           1971            ACALL   ICLR            ;CLEAR THE INTERRUPTS
05E9 B1A9           1972            ACALL   G4              ;PUT END ADDRESS INTO DPTR
05EB 7406           1973            MOV     A,#6            ;ADJUST MATRIX SPACE
05ED B1DE           1974            ACALL   ADDPTR          ;ADD FOR PROPER BOUNDS
05EF B179           1975            ACALL   X31DP           ;PUT MATRIX BOUNDS IN R3:R1
05F1 900108         1976            MOV     DPTR,#MT_ALL    ;SAVE R3:R1 IN MATRIX FREE SPACE
05F4 D105           1977            ACALL   S31DP           ;DPTR POINTS TO MEMTOP
05F6 B1BA           1978            ACALL   L31DPI          ;LOAD MEMTOP INTO R3:R1
05F8 900122         1979            MOV     DPTR,#STR_AL    ;GET MEMORY ALLOCATED FOR STRINGS
05FB B1B0           1980            ACALL   LDPTRI
05FD 120A02         1981            CALL    DUBSUB          ;R3:R1 = MEMTOP - STRING ALLOCATION
0600 900104         1982            MOV     DPTR,#VARTOP    ;SAVE R3:R1 IN VARTOP
                    1983            ;
                    1984            ; FALL THRU TO S31DP2
                    1985            ;
                    1986            ;***************************************************************
                    1987            ;
                    1988            ;S31DP - STORE R3 INTO (DPTR) AND R1 INTO (DPTR+1)
                    1989            ;
                    1990            ;ACC GETS CLOBBERED
                    1991            ;
                    1992            ;***************************************************************
                    1993            ;
0603 D105           1994    S31DP2: ACALL   S31DP           ;DO IT TWICE
BASIC52S                                                                                                      PAGE 36

                    1995            ;
0605 EB             1996    S31DP:  MOV     A,R3            ;GET R3 INTO ACC
0606 F0             1997            MOVX    @DPTR,A         ;STORE IT
0607 A3             1998            INC     DPTR            ;BUMP DPTR
0608 E9             1999            MOV     A,R1            ;GET R1
0609 F0             2000            MOVX    @DPTR,A         ;STORE IT
060A A3             2001            INC     DPTR            ;BUMP IT AGAIN TO SAVE PROGRAM SPACE
060B 22             2002            RET                     ;GO BACK
                    2003            ;
                    2004            ;
                    2005            ;***************************************************************
                    2006            ;
060C                2007    STRING: ; Allocate memory for strings
                    2008            ;
                    2009            ;***************************************************************
                    2010            ;
060C 120E85         2011            LCALL   TWO             ;R3:R1 = NUMBER, R2:R0 = LEN
060F 900122         2012            MOV     DPTR,#STR_AL    ;SAVE STRING ALLOCATION
0612 D105           2013            ACALL   S31DP
0614 0E             2014            INC     R6              ;BUMP
0615 8E3F           2015            MOV     S_LEN,R6        ;SAVE STRING LENGTH
0617 C164           2016            AJMP    RCLEAR          ;CLEAR AND SET IT UP
                    2017            ;
                    2018            ;***************************************************************
                    2019            ;
                    2020            ; F_VAR - Find  the variable in symbol table
                    2021            ;         R7:R6 contain the variable name
                    2022            ;         If not found create a zero entry and set the carry
                    2023            ;         R2:R0 has the address of variable on return
                    2024            ;
                    2025            ;***************************************************************
                    2026            ;
0619 900104         2027    F_VAR:  MOV     DPTR,#VARTOP    ;PUT VARTOP IN DPTR
061C B1B0           2028            ACALL   LDPTRI
061E B1C0           2029            ACALL   DECDP2          ;ADJUST DPTR FOR LOOKUP
                    2030            ;
0620 E0             2031    F_VAR0: MOVX    A,@DPTR         ;LOAD THE VARIABLE
0621 6020           2032            JZ      F_VAR2          ;TEST IF AT THE END OF THE TABLE
0623 A3             2033            INC     DPTR            ;BUMP FOR NEXT BYTE
0624 B5070F         2034            CJNE    A,R7B0,F_VAR1   ;SEE IF MATCH
0627 E0             2035            MOVX    A,@DPTR         ;LOAD THE NAME
0628 B5060B         2036            CJNE    A,R6B0,F_VAR1
                    2037            ;
                    2038            ; Found the variable now adjust and put in R2:R0
                    2039            ;
062B E582           2040    DLD:    MOV     A,DPL           ;R2:R0 = DPTR-2
062D 9402           2041            SUBB    A,#2
062F F8             2042            MOV     R0,A
0630 E583           2043            MOV     A,DPH
0632 9400           2044            SUBB    A,#0            ;CARRY IS CLEARED
0634 FA             2045            MOV     R2,A
0635 22             2046            RET
                    2047            ;
0636 E582           2048    F_VAR1: MOV     A,DPL           ;SUBTRACT THE STACK SIZE+ADJUST
0638 C3             2049            CLR     C
0639 9409           2050            SUBB    A,#STESIZ
063B F582           2051            MOV     DPL,A           ;RESTORE DPL
063D 50E1           2052            JNC     F_VAR0
BASIC52S                                                                                                      PAGE 37

063F 1583           2053            DEC     DPH
0641 80DD           2054            SJMP    F_VAR0          ;CONTINUE COMPARE
                    2055            ;
                    2056            ;
                    2057            ; Add the entry to the symbol table
                    2058            ;
0643 120DEF         2059    F_VAR2: LCALL   R76S            ;SAVE R7 AND R6
0646 C3             2060            CLR     C
0647 D12B           2061            ACALL   DLD             ;BUMP THE POINTER TO GET ENTRY ADDRESS
                    2062            ;
                    2063            ; Adjust pointer and save storage allocation
                    2064            ; and make sure we aren't wiping anything out
                    2065            ; First calculate new storage allocation
                    2066            ;
0649 E8             2067            MOV     A,R0
064A 9406           2068            SUBB    A,#STESIZ-3     ;NEED THIS MUCH RAM
064C F9             2069            MOV     R1,A
064D EA             2070            MOV     A,R2
064E 9400           2071            SUBB    A,#0
0650 FB             2072            MOV     R3,A
                    2073            ;
                    2074            ; Now save the new storage allocation
                    2075            ;
0651 900106         2076            MOV     DPTR,#ST_ALL
0654 D105           2077            CALL    S31DP           ;SAVE STORAGE ALLOCATION
                    2078            ;
                    2079            ; Now make sure we didn't blow it, by wiping out MT_ALL
                    2080            ;
0656 B1CC           2081            ACALL   DCMPX           ;COMPARE STORAGE ALLOCATION
0658 4032           2082            JC      CCLR3           ;ERROR IF CARRY
065A D3             2083            SETB    C               ;DID NOT FIND ENTRY
065B 22             2084            RET                     ;EXIT IF TEST IS OK
                    2085            ;
                    2086            ;***************************************************************
                    2087            ;
                    2088            ; Command action routine - NEW
                    2089            ;
                    2090            ;***************************************************************
                    2091            ;
065C 900200         2092    CNEW:   MOV     DPTR,#PSTART    ;SAVE THE START OF PROGRAM
065F 7401           2093            MOV     A,#EOF          ;END OF FILE
0661 F0             2094            MOVX    @DPTR,A         ;PUT IT IN MEMORY
                    2095            ;
                    2096            ; falls thru
                    2097            ;
                    2098            ;*****************************************************************
                    2099            ;
                    2100            ; The statement action routine - CLEAR
                    2101            ;
                    2102            ;*****************************************************************
                    2103            ;
0662 C215           2104    CNEW1:  CLR     LINEB           ;SET UP FOR RUN AND GOTO
                    2105            ;
0664 B1E7           2106    RCLEAR: ACALL   LCLR            ;CLEAR THE INTERRUPTS, SET UP MATRICES
0666 90010A         2107            MOV     DPTR,#MEMTOP    ;PUT MEMTOP IN R3:R1
0669 B1BA           2108            ACALL   L31DPI
066B B1A9           2109            ACALL   G4              ;DPTR GETS END ADDRESS
066D D17D           2110            ACALL   CL_1            ;CLEAR THE MEMORY
BASIC52S                                                                                                      PAGE 38

                    2111            ;
066F 9000FE         2112    RC1:    MOV     DPTR,#STACKTP   ;POINT AT CONTROL STACK TOP
0672 E4             2113            CLR     A               ;CONTROL UNDERFLOW
                    2114            ;
0673 F0             2115    RC2:    MOVX    @DPTR,A         ;SAVE IN MEMORY
0674 7511FE         2116            MOV     CSTKA,#STACKTP
0677 7509FE         2117            MOV     ASTKA,#STACKTP
067A C217           2118            CLR     CONB            ;CAN'T CONTINUE
067C 22             2119            RET
                    2120            ;
                    2121            ;***************************************************************
                    2122            ;
                    2123            ; Loop until the memory is cleared
                    2124            ;
                    2125            ;***************************************************************
                    2126            ;
067D A3             2127    CL_1:   INC     DPTR            ;BUMP MEMORY POINTER
067E E4             2128            CLR     A               ;CLEAR THE MEMORY
067F F0             2129            MOVX    @DPTR,A         ;CLEAR THE RAM
0680 E0             2130            MOVX    A,@DPTR         ;READ IT
0681 7009           2131            JNZ     CCLR3           ;MAKE SURE IT IS CLEARED
0683 EB             2132            MOV     A,R3            ;GET POINTER FOR COMPARE
0684 B583F6         2133            CJNE    A,DPH,CL_1      ;SEE TO LOOP
0687 E9             2134            MOV     A,R1            ;NOW TEST LOW BYTE
0688 B582F2         2135            CJNE    A,DPL,CL_1
                    2136            ;
068B 22             2137    CL_2:   RET
                    2138            ;
068C 0215B5         2139    CCLR3:  JMP     TB              ;ALLOCATED MEMORY DOESN'T EXSIST
                    2140            ;
                    2141            ;**************************************************************
                    2142            ;
068F                2143    SCLR:   ;Entry point for clear return
                    2144            ;
                    2145            ;**************************************************************
                    2146            ;
068F 120EE1         2147            CALL    DELTST          ;TEST FOR A CR
0692 50D0           2148            JNC     RCLEAR
0694 120ED7         2149            CALL    GCI1            ;BUMP THE TEST POINTER
0697 B449D5         2150            CJNE    A,#'I',RC1      ;SEE IF I, ELSE RESET THE STACK
                    2151            ;
                    2152            ;**************************************************************
                    2153            ;
069A                2154    ICLR:   ; Clear interrupts and system garbage
                    2155            ;
                    2156            ;**************************************************************
                    2157            ;
069A 301202         2158            JNB     INTBIT,ICLR1    ;SEE IF BASIC HAS INTERRUPTS
069D C2AA           2159            CLR     EX1             ;IF SO, CLEAR INTERRUPTS
069F 532220         2160    ICLR1:  ANL     34,#00100000B   ;SET INTERRUPTS + CONTINUE
06A2 32             2161            RETI
                    2162            ;
                    2163            ;***************************************************************
                    2164            ;
                    2165            ;OUTPUT ROUTINES
                    2166            ;
                    2167            ;***************************************************************
                    2168            ;
BASIC52S                                                                                                      PAGE 39

06A3 D1A5           2169    CRLF2:  ACALL   CRLF            ;DO TWO CRLF'S
                    2170            ;
06A5 7D0D           2171    CRLF:   MOV     R5,#CR          ;LOAD THE CR
06A7 F111           2172            ACALL   TEROT           ;CALL TERMINAL OUT
06A9 7D0A           2173            MOV     R5,#LF          ;LOAD THE LF
06AB E111           2174            AJMP    TEROT           ;OUTPUT IT AND RETURN
                    2175            ;
                    2176            ;PRINT THE MESSAGE ADDRESSED IN ROM OR RAM BY THE DPTR
                    2177            ;ENDS WITH THE CHARACTER IN R4
                    2178            ;DPTR HAS THE ADDRESS OF THE TERMINATOR
                    2179            ;
06AD D1A5           2180    CRP:    ACALL   CRLF            ;DO A CR THEN PRINT ROM
                    2181            ;
06AF E4             2182    ROM_P:  CLR     A               ;CLEAR A FOR LOOKUP
06B0 93             2183            MOVC    A,@A+DPTR       ;GET THE CHARACTER
06B1 C2E7           2184            CLR     ACC.7           ;CLEAR MS BIT
06B3 B42201         2185            CJNE    A,#'"',ROM_P1   ;EXIT IF TERMINATOR
06B6 22             2186            RET
06B7 D234           2187    ROM_P1: SETB    C0ORX1
                    2188            ;
06B9 FD             2189    PN1:    MOV     R5,A            ;OUTPUT THE CHARACTER
06BA F111           2190            ACALL   TEROT
06BC A3             2191            INC     DPTR            ;BUMP THE POINTER
06BD 8004           2192            SJMP    PN0
                    2193            ;
06BF B179           2194    UPRNT:  ACALL   X31DP
                    2195            ;
06C1 7C0D           2196    PRNTCR: MOV     R4,#CR          ;OUTPUT UNTIL A CR
                    2197            ;
06C3 1034E9         2198    PN0:    JBC     C0ORX1,ROM_P
06C6 E0             2199            MOVX    A,@DPTR         ;GET THE RAM BYTE
06C7 6003           2200            JZ      PN01
06C9 B50401         2201            CJNE    A,R4B0,PN02     ;SEE IF THE SAME AS TERMINATOR
06CC 22             2202    PN01:   RET                     ;EXIT IF THE SAME
06CD B40DE9         2203    PN02:   CJNE    A,#CR,PN1       ;NEVER PRINT A CR IN THIS ROUTINE
06D0 021885         2204            LJMP    E1XX            ;BAD SYNTAX
                    2205            ;
                    2206            ;***************************************************************
                    2207            ;
                    2208            ; INLINE - Input a line to IBUF, exit when a CR is received
                    2209            ;
                    2210            ;***************************************************************
                    2211            ;
06D3 B40416         2212    INL2:   CJNE    A,#CNTRLD,INL2B ;SEE IF A CONTROL D
                    2213            ;
06D6 D1A5           2214    INL0:   ACALL   CRLF            ;DO A CR
                    2215            ;
06D8 75A000         2216    INLINE: MOV     P2,#HIGH IBUF   ;IBUF IS IN THE ZERO PAGE
06DB 7807           2217            MOV     R0,#LOW IBUF    ;POINT AT THE INPUT BUFFER
                    2218            ;
06DD F191           2219    INL1:   ACALL   INCHAR          ;GET A CHARACTER
06DF FD             2220            MOV     R5,A            ;SAVE IN R5 FOR OUTPUT
06E0 B47FF0         2221            CJNE    A,#7FH,INL2     ;SEE IF A DELETE CHARACTER
06E3 B80718         2222            CJNE    R0,#LOW IBUF,INL6
06E6 7D07           2223    INL11:  MOV     R5,#BELL        ;OUTPUT A BELL
                    2224            ;
06E8 F111           2225    INLX:   ACALL   TEROT           ;OUTPUT CHARACTER
06EA 80F1           2226            SJMP    INL1            ;DO IT AGAIN
BASIC52S                                                                                                      PAGE 40

                    2227            ;
06EC F2             2228    INL2B:  MOVX    @R0,A           ;SAVE THE CHARACTER
06ED B40D02         2229            CJNE    A,#CR,INL2B1    ;IS IT A CR
06F0 C1A5           2230            AJMP    CRLF            ;OUTPUT A CRLF AND EXIT
06F2 B42000         2231    INL2B1: CJNE    A,#20H,INL2B2
06F5 40F1           2232    INL2B2: JC      INLX            ;ONLY ECHO CONTROL CHARACTERS
06F7 08             2233            INC     R0              ;BUMP THE POINTER
06F8 B856ED         2234            CJNE    R0,#IBUF+79,INLX
06FB 18             2235            DEC     R0              ;FORCE 79
06FC 80E8           2236            SJMP    INL11           ;OUTPUT A BELL
                    2237            ;
06FE 18             2238    INL6:   DEC     R0              ;DEC THE RAM POINTER
06FF 7D08           2239            MOV     R5,#BS          ;OUTPUT A BACK SPACE
0701 F111           2240            ACALL   TEROT
0703 F10F           2241            ACALL   STEROT          ;OUTPUT A SPACE
0705 7D08           2242            MOV     R5,#BS          ;ANOTHER BACK SPACE
0707 80DF           2243            SJMP    INLX            ;OUTPUT IT
                    2244    ;
                    2245    ;*****************************************************************************
                    2246    ;****** Use XTAL up to 47 MHz ************************************************
                    2247    ;****** Wulf 2 ***************************************************************
                    2248    ;
                    2249    ;PTIME: DB      128-2           ;PROM PROGRAMMER TIMER
                    2250    ;       DB      00H
                    2251    ;       DB      00H
                    2252    ;       DB      50H
                    2253    ;       DB      67H
                    2254    ;       DB      41H
                    2255    ;
0709 7D             2256    ptime:  db      128-3           ;New programmer timer value is old value
070A 00             2257            db      00H             ;divide by 5
070B 00             2258            db      00H             ;(50ms EPROM timeing to 10ms for EEPROM)
070C 00             2259            db      00H
070D 35             2260            db      35H
070E 83             2261            db      83H
                    2262    ;
                    2263    ;*****************************************************************************
                    2264    ;
                    2265            ;***************************************************************
                    2266            ;
                    2267            ; TEROT - Output a character to the system console
                    2268            ;         update PHEAD position.
                    2269            ;
                    2270            ;***************************************************************
                    2271            ;
070F 7D20           2272    STEROT: MOV     R5,#' '         ;OUTPUT A SPACE
                    2273            ;
0711 C0E0           2274    TEROT:  PUSH    ACC             ;SAVE THE ACCUMULATOR
0713 C083           2275            PUSH    DPH             ;SAVE THE DPTR
0715 C082           2276            PUSH    DPL
0717 303504         2277    TEROT01:JNB     CNT_S,TEROT02   ;WAIT FOR A CONTROL Q
071A F18D           2278            ACALL   BCK             ;GET SERIAL STATUS
071C 80F9           2279            SJMP    TEROT01
071E ED             2280    TEROT02:MOV     A,R5            ;PUT OUTPUT BYTE IN A
071F 302C05         2281            JNB     BO,TEROT03      ;CHECK FOR MONITOR
0722 122040         2282            LCALL   2040H           ;DO THE MONITOR
0725 E166           2283            AJMP    TEROT1          ;CLEAN UP
0727 301C05         2284    TEROT03:JNB     COUB,TEROT04    ;SEE IF USER WANTS OUTPUT
BASIC52S                                                                                                      PAGE 41

072A 124030         2285            LCALL   4030H
072D E166           2286            AJMP    TEROT1
072F 302708         2287    TEROT04:JNB     UPB,T_1         ;NO AT IF NO XBIT
0732 301905         2288            JNB     LPB,T_1         ;AT PRINT
0735 12403C         2289            LCALL   403CH           ;CALL AT LOCATION
0738 E166           2290            AJMP    TEROT1          ;FINISH OFF OUTPUT
                    2291            ;
073A 301B22         2292    T_1:    JNB     COB,TXX         ;SEE IF LIST SET
073D 900124         2293            MOV     DPTR,#SPV       ;LOAD BAUD RATE
0740 B182           2294            ACALL   LD_T
0742 C297           2295            CLR     LP              ;OUTPUT START BIT
0744 B12D           2296            ACALL   TIMER_LOAD      ;LOAD AND START THE TIMER
0746 ED             2297            MOV     A,R5            ;GET THE OUTPUT BYTE
0747 D3             2298            SETB    C               ;SET CARRY FOR LAST OUTPUT
0748 7D09           2299            MOV     R5,#9           ;LOAD TIMER COUNTDOWN
                    2300            ;
074A 13             2301    LTOUT1: RRC     A               ;ROTATE A
074B 308FFD         2302            JNB     TF1,$           ;WAIT TILL TIMER READY
074E 9297           2303            MOV     LP,C            ;OUTPUT THE BIT
0750 B12D           2304            ACALL   TIMER_LOAD      ;DO THE NEXT BIT
0752 DDF6           2305            DJNZ    R5,LTOUT1       ;LOOP UNTIL DONE
0754 308FFD         2306            JNB     TF1,$           ;FIRST STOP BIT
0757 B12D           2307            ACALL   TIMER_LOAD
0759 308FFD         2308            JNB     TF1,$           ;SECOND STOP BIT
075C FD             2309            MOV     R5,A            ;RESTORE R5
075D 8007           2310            SJMP    TEROT1          ;BACK TO TEROT
                    2311            ;
075F 3099FD         2312    TXX:    JNB     TI,$            ;WAIT FOR TRANSMIT READY
0762 C299           2313            CLR     TI
0764 8D99           2314            MOV     SBUF,R5         ;SEND OUT THE CHARACTER
                    2315            ;
0766 BD0D03         2316    TEROT1: CJNE    R5,#CR,TEROT11  ;SEE IF A CR
0769 751600         2317            MOV     PHEAD,#00H      ;IF A CR, RESET PHEAD AND
                    2318            ;
076C BD0A0B         2319    TEROT11:CJNE    R5,#LF,NLC      ;SEE IF A LF
076F E515           2320            MOV     A,NULLCT        ;GET THE NULL COUNT
0771 6007           2321            JZ      NLC             ;NO NULLS IF ZERO
                    2322            ;
0773 7D00           2323    TEROT2: MOV     R5,#NULL        ;PUT THE NULL IN THE OUTPUT REGISTER
0775 F111           2324            ACALL   TEROT           ;OUTPUT THE NULL
0777 14             2325            DEC     A               ;DECREMENT NULL COUNT
0778 70F9           2326            JNZ     TEROT2          ;LOOP UNTIL DONE
                    2327            ;
077A BD0802         2328    NLC:    CJNE    R5,#BS,NLC1     ;DEC PHEAD IF A BACKSPACE
077D 1516           2329            DEC     PHEAD
077F BD2000         2330    NLC1:   CJNE    R5,#20H,NLC2    ;IS IT A PRINTABLE CHARACTER?
0782 4002           2331    NLC2:   JC      NLC3            ;DON'T INCREMENT PHEAD IF NOT PRINTABLE
0784 0516           2332            INC     PHEAD           ;BUMP PRINT HEAD
0786 D082           2333    NLC3:   POP     DPL             ;RESTORE DPTR
0788 D083           2334            POP     DPH
078A D0E0           2335            POP     ACC             ;RESTORE ACC
078C 22             2336            RET                     ;EXIT
                    2337            ;
078D F1C8           2338    BCK:    ACALL   CSTS            ;CHECK STATUS
078F 502E           2339            JNC     CI_RET1         ;EXIT IF NO CHARACTER
                    2340            ;
                    2341            ;***************************************************************
                    2342            ;
BASIC52S                                                                                                      PAGE 42

                    2343            ;INPUTS A CHARACTER FROM THE SYSTEM CONSOLE.
                    2344            ;
                    2345            ;***************************************************************
                    2346            ;
0791 303205         2347    INCHAR: JNB     BI,INCHAR1      ;CHECK FOR MONITOR (BUBBLE)
0794 122060         2348            LCALL   2060H
0797 8011           2349            SJMP    INCH1
0799 301E05         2350    INCHAR1:JNB     CIUB,INCHAR2    ;CHECK FOR USER
079C 124033         2351            LCALL   4033H
079F 8009           2352            SJMP    INCH1
07A1 3098FD         2353    INCHAR2:JNB     RI,$            ;WAIT FOR RECEIVER READY.
07A4 E599           2354            MOV     A,SBUF
07A6 C298           2355            CLR     RI              ;RESET READY
07A8 C2E7           2356            CLR     ACC.7           ;NO BIT 7
                    2357            ;
07AA B41302         2358    INCH1:  CJNE    A,#13H,INCH11
07AD D235           2359            SETB    CNT_S
07AF B41102         2360    INCH11: CJNE    A,#11H,INCH12
07B2 C235           2361            CLR     CNT_S
07B4 B40304         2362    INCH12: CJNE    A,#CNTRLC,INCH13
07B7 30301D         2363            JNB     NO_C,C_EX       ;TRAP NO CONTROL C
07BA 22             2364            RET
                    2365            ;
                    2366    ;
                    2367    ;*****************************************************************************
                    2368    ;****** Sorry - but the ego message had to be disabled ***********************
                    2369    ;
07BB                2370    INCH13:
                    2371    ;       CLR     JKBIT
07BB B41700         2372            CJNE    A,#17H,CI_RET   ;CONTROL W
                    2373    ;       SETB    JKBIT
                    2374    ;
                    2375    ;*****************************************************************************
                    2376            ;
07BE D3             2377    CI_RET: SETB    C               ;CARRY SET IF A CHARACTER
07BF 22             2378    CI_RET1:RET                     ;EXIT
                    2379            ;
                    2380            ;*************************************************************
                    2381            ;
                    2382            ;RROM - The Statement Action Routine RROM
                    2383            ;
                    2384            ;*************************************************************
                    2385            ;
07C0 D21D           2386    RROM:   SETB    INBIT           ;SO NO ERRORS
07C2 B143           2387            ACALL   RO1             ;FIND THE LINE NUMBER
07C4 101D3B         2388            JBC     INBIT,CRUN
07C7 22             2389            RET                     ;EXIT
                    2390            ;
                    2391            ;***************************************************************
                    2392            ;
07C8                2393    CSTS:   ;       RETURNS CARRY = 1 IF THERE IS A CHARACTER WAITING FROM
                    2394            ;       THE SYSTEM CONSOLE. IF NO CHARACTER THE READY CHARACTER
                    2395            ;       WILL BE CLEARED
                    2396            ;
                    2397            ;***************************************************************
                    2398            ;
07C8 303203         2399            JNB     BI,CSTS1        ;BUBBLE STATUS
07CB 022068         2400            LJMP    2068H
BASIC52S                                                                                                      PAGE 43

07CE 301E03         2401    CSTS1:  JNB     CIUB,CSTS2      ;SEE IF EXTERNAL CONSOLE
07D1 024036         2402            LJMP    4036H
07D4 A298           2403    CSTS2:  MOV     C,RI
07D6 22             2404            RET
                    2405            ;
                    2406    ;
                    2407    ;*****************************************************************************
                    2408    ;****** Sorry - but the ego message had to be disabled ***********************
                    2409    ;
                    2410    ;C_EX0:  MOV     DPTR,#WB        ;EGO MESSAGE
                    2411    ;        ACALL   ROM_P
                    2412    ;
                    2413    ;*****************************************************************************
                    2414            ;
07D7 C235           2415    C_EX:   CLR     CNT_S           ;NO OUTPUT STOP
07D9 120C31         2416            LCALL   SPRINT1         ;ASSURE CONSOLE
07DC D1A5           2417            ACALL   CRLF
                    2418    ;
                    2419    ;*****************************************************************************
                    2420    ;****** Sorry - but the ego message had to be disabled ***********************
                    2421    ;
                    2422    ;        JBC     JKBIT,C_EX0
                    2423    ;
                    2424    ;*****************************************************************************
                    2425    ;
07DE 302F7F         2426            JNB     DIRF,SSTOP0
07E1 A140           2427            AJMP    C_K             ;CLEAR COB AND EXIT
                    2428            ;
07E3 E548           2429    T_CMP:  MOV     A,TVH           ;COMPARE TIMER TO SP_H AND SP_L
07E5 A949           2430            MOV     R1,TVL
07E7 B548F9         2431            CJNE    A,TVH,T_CMP
07EA C9             2432            XCH     A,R1
07EB 954C           2433            SUBB    A,SP_L
07ED E9             2434            MOV     A,R1
07EE 954B           2435            SUBB    A,SP_H
07F0 22             2436            RET
                    2437            ;
                    2438            ;*************************************************************
                    2439            ;
07F1                2440    BR0:    ; Trap the timer interrupt
                    2441            ;
                    2442            ;*************************************************************
                    2443            ;
07F1 F1E3           2444            CALL    T_CMP           ;COMPARE TIMER
07F3 4040           2445            JC      BCHR1           ;EXIT IF TEST FAILS
07F5 D214           2446            SETB    OTI             ;DOING THE TIMER INTERRUPT
07F7 C210           2447            CLR     OTS             ;CLEAR TIMER BIT
07F9 A211           2448            MOV     C,INPROG        ;SAVE IN PROGRESS
07FB 922B           2449            MOV     ISAV,C
07FD 900126         2450            MOV     DPTR,#TIV
0800 803C           2451            SJMP    BR2
                    2452            ;
                    2453            ;***************************************************************
                    2454            ;
                    2455            ; The command action routine - RUN
                    2456            ;
                    2457            ;***************************************************************
                    2458            ;
BASIC52S                                                                                                      PAGE 44

0802 120662         2459    CRUN:   LCALL   CNEW1           ;CLEAR THE STORAGE ARRAYS
0805 71D0           2460            ACALL   SRESTR1         ;GET THE STARTING ADDRESS
0807 51A4           2461            ACALL   B_C
0809 604A           2462            JZ      CMNDLK          ;IF NULL GO TO COMMAND MODE
                    2463            ;
080B D1B8           2464            ACALL   T_DP
080D F123           2465            ACALL   B_TXA           ;BUMP TO STARTING LINE
                    2466            ;
080F 913C           2467    CILOOP: ACALL   SP0             ;DO A CR AND A LF
0811 C22F           2468    CILOOP1:CLR     DIRF            ;NOT IN DIRECT MODE
                    2469            ;
                    2470            ;INTERPERTER DRIVER
                    2471            ;
0813 853E81         2472    ILOOP:  MOV     SP,SPSAV        ;RESTORE THE STACK EACH TIME
0816 202F06         2473            JB      DIRF,ILOOP1     ;NO INTERRUPTS IF IN DIRECT MODE
0819 850A42         2474            MOV     INTXAH,TXAH     ;SAVE THE TEXT POINTER
081C 850843         2475            MOV     INTXAL,TXAL
081F 12078D         2476    ILOOP1: LCALL   BCK             ;GET CONSOLE STATUS
0822 202F24         2477            JB      DIRF,I_L        ;DIRECT MODE
0825 B018           2478            ANL     C,/GTRD         ;SEE IF CHARACTER READY
0827 5006           2479            JNC     BCHR            ;NO CHARACTER = NO CARRY
                    2480            ;
                    2481            ; DO TRAP OPERATION
                    2482            ;
0829 900100         2483            MOV     DPTR,#GTB       ;SAVE TRAP CHARACTER
082C F0             2484            MOVX    @DPTR,A
082D D218           2485            SETB    GTRD            ;SAYS READ A BYTE
                    2486            ;
082F 201417         2487    BCHR:   JB      OTI,I_L         ;EXIT IF TIMER INTERRUPT IN PROGRESS
0832 2010BC         2488            JB      OTS,BR0         ;TEST TIMER VALUE IF SET
0835 301611         2489    BCHR1:  JNB     INTPEN,I_L      ;SEE IF INTERRUPT PENDING
0838 20110E         2490            JB      INPROG,I_L      ;DON'T DO IT AGAIN IF IN PROGRESS
083B 900120         2491            MOV     DPTR,#INTLOC    ;POINT AT INTERRUPT LOCATION
                    2492            ;
083E 7C02           2493    BR2:    MOV     R4,#GTYPE       ;SETUP FOR A FORCED GOSUB
0840 7135           2494            ACALL   SGS1            ;PUT TXA ON STACK
0842 D211           2495            SETB    INPROG          ;INTERRUPT IN PROGRESS
                    2496            ;
0844 120573         2497    ERL4:   CALL    L20DPI
0847 41F8           2498            AJMP    D_L1            ;GET THE LINE NUMBER
                    2499            ;
0849 11F8           2500    I_L:    ACALL   ISTAT           ;LOOP
084B F117           2501            ACALL   CLN_UP          ;FINISH IT OFF
084D 50C4           2502            JNC     ILOOP           ;LOOP ON THE DRIVER
084F 302F03         2503            JNB     DIRF,CMNDLK     ;CMND1 IF IN RUN MODE
0852 021794         2504            LJMP    CMNDR           ;DON'T PRINT READY
                    2505            ;
0855 021787         2506    CMNDLK: JMP     CMND1           ;DONE
                    2507            ;**************************************************************
                    2508            ;
                    2509            ; The Statement Action Routine - STOP
                    2510            ;
                    2511            ;**************************************************************
                    2512            ;
0858 F117           2513    SSTOP:  ACALL   CLN_UP          ;FINISH OFF THIS LINE
085A 850A42         2514            MOV     INTXAH,TXAH     ;SAVE TEXT POINTER FOR CONT
085D 850843         2515            MOV     INTXAL,TXAL
                    2516            ;
BASIC52S                                                                                                      PAGE 45

0860 D217           2517    SSTOP0: SETB    CONB            ;CONTINUE WILL WORK
0862 9000EE         2518            MOV     DPTR,#STP       ;PRINT THE STOP MESSAGE
0865 D220           2519            SETB    STOPBIT         ;SET FOR ERROR ROUTINE
0867 0218AD         2520            JMP     ERRS            ;JUMP TO ERROR ROUTINE
                    2521            ;
                    2522            ;**************************************************************
                    2523            ;
                    2524            ; ITRAP - Trap special function register operators
                    2525            ;
                    2526            ;**************************************************************
                    2527            ;
086A B4C805         2528    ITRAP:  CJNE    A,#TMR0,ITRAP1  ;TIMER 0
086D 8B8C           2529            MOV     TH0,R3
086F 898A           2530            MOV     TL0,R1
0871 22             2531            RET
                    2532            ;
0872 B4C905         2533    ITRAP1: CJNE    A,#TMR1,ITRAP2  ;TIMER 1
0875 8B8D           2534            MOV     TH1,R3
0877 898B           2535            MOV     TL1,R1
0879 22             2536            RET
                    2537            ;
087A B4CA05         2538    ITRAP2: CJNE    A,#TMR2,ITRAP3  ;TIMER 2
087D 8BCD           2539    ITRAP21:MOV     TH2,R3
087F 89CC           2540            MOV     TL2,R1
                    2541    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2542    ;       DB      0CDH            ;T2H LOCATION
                    2543    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2544    ;       DB      0CCH            ;T2L LOCATION
0881 22             2545            RET
                    2546            ;
0882 B4CE05         2547    ITRAP3: CJNE    A,#TRC2,RCL1    ;RCAP2 TOKEN
0885 8BCB           2548    RCL:    MOV     RCAPH2,R3
0887 89CA           2549            MOV     RCAPL2,R1
                    2550    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2551    ;       DB      0CBH            ;RCAP2H LOCATION
                    2552    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2553    ;       DB      0CAH            ;RCAP2L LOCATION
0889 22             2554            RET
                    2555            ;
088A 31D5           2556    RCL1:   ACALL   R3CK            ;MAKE SURE THAT R3 IS ZERO
088C B4CB03         2557            CJNE    A,#TT2C,RCL2
088F 89C8           2558            MOV     T2CON,R1
                    2559    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2560    ;       DB      0C8H            ;T2CON LOCATION
0891 22             2561            RET
                    2562            ;
0892 B4C603         2563    RCL2:   CJNE    A,#T_IE,RCL3    ;IE TOKEN
0895 89A8           2564            MOV     IE,R1
0897 22             2565            RET
                    2566            ;
0898 B4C703         2567    RCL3:   CJNE    A,#T_IP,RCL4    ;IP TOKEN
089B 89B8           2568            MOV     IP,R1
089D 22             2569            RET
                    2570            ;
089E B4CC03         2571    RCL4:   CJNE    A,#TTC,RCL5     ;TCON TOKEN
08A1 8988           2572            MOV     TCON,R1
08A3 22             2573            RET
                    2574            ;
BASIC52S                                                                                                      PAGE 46

08A4 B4CD03         2575    RCL5:   CJNE    A,#TTM,RCL6     ;TMOD TOKEN
08A7 8989           2576            MOV     TMOD,R1
08A9 22             2577            RET
                    2578            ;
08AA B4CF32         2579    RCL6:   CJNE    A,#T_P1,T_T2    ;P1 TOKEN
08AD 8990           2580            MOV     P1,R1
08AF 22             2581            RET
                    2582            ;
                    2583            ;***************************************************************
                    2584            ;
                    2585            ; T_TRAP - Trap special operators
                    2586            ;
                    2587            ;***************************************************************
                    2588            ;
08B0 F50F           2589    T_T:    MOV     TEMP5,A         ;SAVE THE TOKEN
08B2 D1D7           2590            ACALL   GCI1            ;BUMP POINTER
08B4 31C8           2591            ACALL   SLET2           ;EVALUATE AFTER =
08B6 E50F           2592            MOV     A,TEMP5         ;GET THE TOKEN BACK
08B8 B4C303         2593            CJNE    A,#T_XTAL,T_T01
08BB 02165C         2594            LJMP    AXTAL1          ;SET UP CRYSTAL
                    2595            ;
08BE D190           2596    T_T01:  ACALL   IFIXL           ;R3:R1 HAS THE TOS
08C0 E50F           2597            MOV     A,TEMP5         ;GET THE TOKEN AGAIN
08C2 B4C409         2598            CJNE    A,#T_MTOP,T_T1  ;SEE IF MTOP TOKEN
08C5 90010A         2599            MOV     DPTR,#MEMTOP
08C8 120605         2600            CALL    S31DP
08CB 020664         2601            JMP     RCLEAR          ;CLEAR THE MEMORY
                    2602            ;
08CE B4C599         2603    T_T1:   CJNE    A,#T_TIME,ITRAP ;SEE IF A TIME TOKEN
08D1 A2AF           2604            MOV     C,EA            ;SAVE INTERRUPTS
08D3 C2AF           2605            CLR     EA              ;NO TIMER 0 INTERRUPTS DURING LOAD
08D5 8B48           2606            MOV     TVH,R3          ;SAVE THE TIME
08D7 8949           2607            MOV     TVL,R1
                    2608    ;
                    2609    ;*****************************************************************************
                    2610    ;****** Reset millisecond counter on "TIME=" *********************************
                    2611    ;****** Boehling 2 ***********************************************************
                    2612    ;
08D9 754700         2613            mov     MILLIV,#0       ;Reset millisecond counter
                    2614    ;
                    2615    ;*****************************************************************************
                    2616    ;
08DC 92AF           2617            MOV     EA,C            ;RESTORE INTERRUPTS
08DE 22             2618            RET                     ;EXIT
                    2619            ;
08DF B4D056         2620    T_T2:   CJNE    A,#T_PC,INTERX  ;PCON TOKEN
08E2 8987           2621            MOV     PCON,R1
                    2622    ;       DB      89H             ;MOV DIRECT, R1 OP CODE
                    2623    ;       DB      87H             ;ADDRESS OF PCON
08E4 22             2624            RET                     ;EXIT
                    2625            ;
08E5 B4D1C8         2626    T_TRAP: CJNE    A,#T_ASC,T_T    ;SEE IF ASC TOKEN
08E8 D1CB           2627            ACALL   IGC             ;EAT IT AND GET THE NEXT CHARACTER
08EA B4244B         2628            CJNE    A,#'$',INTERX   ;ERROR IF NOT A STRING
08ED 511E           2629            ACALL   CSY             ;CALCULATE ADDRESS
08EF B1AD           2630            ACALL   X3120
08F1 1214B4         2631            CALL    TWO_EY
08F4 31DD           2632            ACALL   SPEOP1          ;EVALUATE AFTER EQUALS
BASIC52S                                                                                                      PAGE 47

08F6 2121           2633            AJMP    ISTAX1          ;SAVE THE CHARACTER
                    2634            ;
                    2635            ;**************************************************************
                    2636            ;
                    2637            ;INTERPERT THE STATEMENT POINTED TO BY TXAL AND TXAH
                    2638            ;
                    2639            ;**************************************************************
                    2640            ;
08F8 D1CD           2641    ISTAT:  ACALL   GC              ;GET THR FIRST CHARACTER
08FA 302D0E         2642            JNB     XBIT,IAT        ;TRAP TO EXTERNAL RUN PACKAGE
08FD B42000         2643            CJNE    A,#20H,ISTAT1
0900 5009           2644    ISTAT1: JNC     IAT
0902 122070         2645            LCALL   2070H           ;LET THE USER SET UP THE DPTR
0905 D1D7           2646            ACALL   GCI1
0907 540F           2647            ANL     A,#0FH          ;STRIP OFF BIAS
0909 8051           2648            SJMP    ISTA1
                    2649            ;
090B B4C300         2650    IAT:    CJNE    A,#T_XTAL,IAT1
090E 50D5           2651    IAT1:   JNC     T_TRAP
0910 30E75B         2652            JNB     ACC.7,SLET      ;IMPLIED LET IF BIT 7 NOT SET
0913 B4BC06         2653            CJNE    A,#T_UOP+12,ISTAX       ;DBYTE TOKEN
0916 31D9           2654            ACALL   SPEOP           ;EVALUATE SPECIAL OPERATOR
0918 31D5           2655            ACALL   R3CK            ;CHECK LOCATION
091A F7             2656            MOV     @R1,A           ;SAVE IT
091B 22             2657            RET
                    2658            ;
091C B4BD06         2659    ISTAX:  CJNE    A,#T_UOP+13,ISTAY       ;XBYTE TOKEN
091F 31D9           2660            ACALL   SPEOP
                    2661            ;
0921 8BA0           2662    ISTAX1: MOV     P2,R3
0923 F3             2663            MOVX    @R1,A
0924 22             2664            RET
                    2665            ;
0925 B4AB00         2666    ISTAY:  CJNE    A,#T_CR+1,ISTAY1;TRAP NEW OPERATORS
0928 4009           2667    ISTAY1: JC      I_S
092A B4B000         2668            CJNE    A,#0B0H,ISTAY2  ;SEE IF TOO BIG
092D 5009           2669    ISTAY2: JNC     INTERX
092F 24F9           2670            ADD     A,#0F9H         ;BIAS FOR LOOKUP TABLE
0931 801D           2671            SJMP    ISTA0           ;DO THE OPERATION
                    2672            ;
0933 B4A400         2673    I_S:    CJNE    A,#T_LAST,I_S1  ;MAKE SURE AN INITIAL RESERVED WORD
0936 4003           2674    I_S1:   JC      INTERX1         ;ERROR IF NOT
                    2675            ;
0938 021885         2676    INTERX: LJMP    E1XX            ;SYNTAX ERROR
                    2677            ;
093B 302F12         2678    INTERX1:JNB     DIRF,ISTA0      ;EXECUTE ALL STATEMENTS IF IN RUN MODE
093E B49000         2679            CJNE    A,#T_DIR,INTERX2;SEE IF ON TOKEN
0941 400D           2680    INTERX2:JC      ISTA0           ;OK IF DIRECT
0943 B4A002         2681            CJNE    A,#T_GOSB+1,INTERX3;SEE IF FOR
0946 8008           2682            SJMP    ISTA0           ;FOR IS OK
0948 B49702         2683    INTERX3:CJNE    A,#T_REM+1,INTERX4      ;NEXT IS OK
094B 8003           2684            SJMP    ISTA0
094D B496E8         2685    INTERX4:CJNE    A,#T_STOP+6,INTERX      ;SO IS REM
                    2686            ;
0950 D1D7           2687    ISTA0:  ACALL   GCI1            ;ADVANCE THE TEXT POINTER
0952 900123         2688            MOV     DPTR,#STATD     ;POINT DPTR TO LOOKUP TABLE
0955 B48002         2689            CJNE    A,#T_GOTO-3,ISTA01;SEE IF LET TOKEN
0958 809E           2690            SJMP    ISTAT           ;WASTE LET TOKEN
BASIC52S                                                                                                      PAGE 48

095A 543F           2691    ISTA01: ANL     A,#3FH          ;STRIP OFF THE GARBAGE
                    2692            ;
095C 23             2693    ISTA1:  RL      A               ;ROTATE FOR OFFSET
095D 2582           2694            ADD     A,DPL           ;BUMP
095F F582           2695            MOV     DPL,A           ;SAVE IT
0961 E4             2696            CLR     A
0962 93             2697            MOVC    A,@A+DPTR       ;GET HIGH BYTE
0963 C0E0           2698            PUSH    ACC             ;SAVE IT
0965 A3             2699            INC     DPTR
0966 E4             2700            CLR     A
0967 93             2701            MOVC    A,@A+DPTR       ;GET LOW BYTE
0968 D083           2702            POP     DPH
096A F582           2703            MOV     DPL,A
                    2704            ;
096C E4             2705    AC1:    CLR     A
096D 73             2706            JMP     @A+DPTR         ;GO DO IT
                    2707            ;
                    2708            ;***************************************************************
                    2709            ;
                    2710            ; The statement action routine - LET
                    2711            ;
                    2712            ;***************************************************************
                    2713            ;
096E D1BF           2714    SLET:   ACALL   S_C             ;CHECK FOR POSSIBLE STRING
0970 4050           2715            JC      SLET0           ;NO STRING
0972 C215           2716            CLR     LINEB           ;USED STRINGS
                    2717            ;
0974 120579         2718            CALL    X31DP           ;PUT ADDRESS IN DPTR
0977 7FEA           2719            MOV     R7,#T_EQU       ;WASTE =
0979 91E5           2720            ACALL   EATC
097B D1CD           2721            ACALL   GC              ;GET THE NEXT CHARACTER
097D B42211         2722            CJNE    A,#'"',S_3      ;CHECK FOR A "
0980 AF3F           2723            MOV     R7,S_LEN        ;GET THE STRING LENGTH
                    2724            ;
0982 D1D7           2725    S_0:    ACALL   GCI1            ;BUMP PAST "
0984 D1E1           2726            ACALL   DELTST          ;CHECK FOR DELIMITER
0986 60B0           2727            JZ      INTERX          ;EXIT IF CARRIAGE RETURN
0988 F0             2728            MOVX    @DPTR,A         ;SAVE THE CHARACTER
0989 B42226         2729            CJNE    A,#'"',S_1      ;SEE IF DONE
                    2730            ;
098C 740D           2731    S_E:    MOV     A,#CR           ;PUT A CR IN A
098E F0             2732            MOVX    @DPTR,A         ;SAVE CR
098F C1D7           2733            AJMP    GCI1
                    2734            ;
0991 C083           2735    S_3:    PUSH    DPH
0993 C082           2736            PUSH    DPL             ;SAVE DESTINATION
0995 D1BF           2737            ACALL   S_C             ;CALCULATE SOURCE
0997 409F           2738            JC      INTERX          ;ERROR IF CARRY
0999 D000           2739            POP     R0B0            ;GET DESTINATION BACK
099B D002           2740            POP     R2B0
                    2741            ;
099D AF3F           2742    SSOOP:  MOV     R7,S_LEN        ;SET UP COUNTER
                    2743            ;
099F 121596         2744    S_4:    CALL    TBYTE           ;TRANSFER THE BYTE
09A2 B40D01         2745            CJNE    A,#CR,S_41      ;EXIT IF A CR
09A5 22             2746            RET
09A6 DF05           2747    S_41:   DJNZ    R7,S_5          ;BUMP COUNTER
09A8 740D           2748            MOV     A,#CR           ;SAVE A CR
BASIC52S                                                                                                      PAGE 49

09AA F2             2749            MOVX    @R0,A
09AB C14E           2750            AJMP    EIGP            ;PRINT EXTRA IGNORED
                    2751            ;
                    2752            ;
09AD 121576         2753    S_5:    CALL    INC3210         ;BUMP POINTERS
09B0 80ED           2754            SJMP    S_4             ;LOOP
                    2755            ;
09B2 DF06           2756    S_1:    DJNZ    R7,S_11         ;SEE IF DONE
09B4 318C           2757            ACALL   S_E
09B6 D14E           2758            ACALL   EIGP            ;PRINT EXTRA IGNORED
09B8 C1EC           2759            AJMP    FINDCR          ;GO FIND THE END
09BA A3             2760    S_11:   INC     DPTR            ;BUMP THE STORE POINTER
09BB 80C5           2761            SJMP    S_0             ;CONTINUE TO LOOP
                    2762            ;
09BD 901828         2763    E3XX:   MOV     DPTR,#E3X       ;BAD ARG ERROR
09C0 810E           2764            AJMP    EK
                    2765            ;
09C2 31C6           2766    SLET0:  ACALL   SLET1
09C4 E1D3           2767            AJMP    POPAS           ;COPY EXPRESSION TO VARIABLE
                    2768            ;
09C6 F101           2769    SLET1:  ACALL   VAR_ER          ;CHECK FOR A"VARIABLE"
                    2770            ;
09C8 C002           2771    SLET2:  PUSH    R2B0            ;SAVE THE VARIABLE ADDRESS
09CA C000           2772            PUSH    R0B0
09CC 7FEA           2773            MOV     R7,#T_EQU       ;GET EQUAL TOKEN
09CE F141           2774            ACALL   WE
09D0 D001           2775            POP     R1B0            ;POP VARIABLE TO R3:R1
09D2 D003           2776            POP     R3B0
09D4 22             2777            RET                     ;EXIT
                    2778            ;
09D5 BB00E5         2779    R3CK:   CJNE    R3,#00H,E3XX    ;CHECK TO SEE IF R3 IS ZERO
09D8 22             2780            RET
                    2781            ;
09D9 D1D7           2782    SPEOP:  ACALL   GCI1            ;BUMP TXA
09DB 91DF           2783            ACALL   P_E             ;EVALUATE PAREN
09DD 31C8           2784    SPEOP1: ACALL   SLET2           ;EVALUATE AFTER =
09DF 1214A1         2785            CALL    TWOL            ;R7:R6 GETS VALUE, R3:R1 GETS LOCATION
09E2 EE             2786            MOV     A,R6            ;SAVE THE VALUE
                    2787            ;
09E3 BF00D7         2788            CJNE    R7,#00H,E3XX    ;R2 MUST BE = 0
09E6 22             2789            RET
                    2790            ;
                    2791            ;**************************************************************
                    2792            ;
                    2793            ; ST_CAL - Calculate string Address
                    2794            ;
                    2795            ;**************************************************************
                    2796            ;
09E7                2797    IST_CAL:;
                    2798            ;
09E7 D195           2799            ACALL   I_PI            ;BUMP TEXT, THEN EVALUATE
09E9 31D5           2800            ACALL   R3CK            ;ERROR IF R3 <> 0
09EB 09             2801            INC     R1              ;BUMP FOR OFFSET
09EC E9             2802            MOV     A,R1            ;ERROR IF R1 = 255
09ED 60CE           2803            JZ      E3XX
09EF 900104         2804            MOV     DPTR,#VARTOP    ;GET TOP OF VARIABLE STORAGE
09F2 853FF0         2805            MOV     B,S_LEN         ;MULTIPLY FOR LOCATION
09F5 5110           2806            ACALL   VARD            ;CALCULATE THE LOCATION
BASIC52S                                                                                                      PAGE 50

09F7 90010A         2807            MOV     DPTR,#MEMTOP    ;SEE IF BLEW IT
09FA 1215B0         2808            CALL    FUL1
09FD 853F82         2809            MOV     DPL,S_LEN       ;GET STRING LENGTH, DPH = 00H
0A00 1583           2810            DEC     DPH             ;DPH = 0
                    2811            ;
0A02 C3             2812    DUBSUB: CLR     C
0A03 E9             2813            MOV     A,R1
0A04 9582           2814            SUBB    A,DPL
0A06 F9             2815            MOV     R1,A
0A07 EB             2816            MOV     A,R3
0A08 9583           2817            SUBB    A,DPH
0A0A FB             2818            MOV     R3,A
0A0B 49             2819            ORL     A,R1
0A0C 22             2820            RET
                    2821            ;
                    2822            ;***************************************************************
                    2823            ;
                    2824            ;VARD - Calculate the offset base
                    2825            ;
                    2826            ;***************************************************************
                    2827            ;
0A0D 75F006         2828    VARB:   MOV     B,#FPSIZ        ;SET UP FOR OPERATION
                    2829            ;
0A10 1205B0         2830    VARD:   CALL    LDPTRI          ;LOAD DPTR
0A13 E9             2831            MOV     A,R1            ;MULTIPLY BASE
0A14 A4             2832            MUL     AB
0A15 2582           2833            ADD     A,DPL
0A17 F9             2834            MOV     R1,A
0A18 E5F0           2835            MOV     A,B
0A1A 3583           2836            ADDC    A,DPH
0A1C FB             2837            MOV     R3,A
0A1D 22             2838            RET
                    2839            ;
                    2840            ;*************************************************************
                    2841            ;
0A1E                2842    CSY:    ; Calculate a biased string address and put in R3:R1
                    2843            ;
                    2844            ;*************************************************************
                    2845            ;
0A1E 31E7           2846            ACALL   IST_CAL         ;CALCULATE IT
0A20 C003           2847            PUSH    R3B0            ;SAVE IT
0A22 C001           2848            PUSH    R1B0
0A24 7F2C           2849            MOV     R7,#','         ;WASTE THE COMMA
0A26 91E5           2850            ACALL   EATC
0A28 D18E           2851            ACALL   ONE             ;GET THE NEXT EXPRESSION
0A2A E9             2852            MOV     A,R1            ;CHECK FOR BOUNDS
0A2B B53F00         2853            CJNE    A,S_LEN,CSY1
0A2E 508D           2854    CSY1:   JNC     E3XX            ;MUST HAVE A CARRY
0A30 19             2855            DEC     R1              ;BIAS THE POINTER
0A31 D0E0           2856            POP     ACC             ;GET VALUE LOW
0A33 29             2857            ADD     A,R1            ;ADD IT TO BASE
0A34 F9             2858            MOV     R1,A            ;SAVE IT
0A35 D003           2859            POP     R3B0            ;GET HIGH ADDRESS
0A37 5001           2860            JNC     CSY2            ;PROPAGATE THE CARRY
0A39 0B             2861            INC     R3
0A3A 81E3           2862    CSY2:   AJMP    ERPAR           ;WASTE THE RIGHT PAREN
                    2863            ;
                    2864            ;***************************************************************
BASIC52S                                                                                                      PAGE 51

                    2865            ;
                    2866            ; The statement action routine FOR
                    2867            ;
                    2868            ;***************************************************************
                    2869            ;
0A3C 31C6           2870    SFOR:   ACALL   SLET1           ;SET UP CONTROL VARIABLE
0A3E C003           2871            PUSH    R3B0            ;SAVE THE CONTROL VARIABLE LOCATION
0A40 C001           2872            PUSH    R1B0
0A42 F1D3           2873            ACALL   POPAS           ;POP ARG STACK AND COPY CONTROL VAR
0A44 7FA6           2874            MOV     R7,#T_TO        ;GET TO TOKEN
0A46 F141           2875            ACALL   WE
0A48 D1CD           2876            ACALL   GC              ;GET NEXT CHARACTER
0A4A B4A706         2877            CJNE    A,#T_STEP,SF2
0A4D D1D7           2878            ACALL   GCI1            ;EAT THE TOKEN
0A4F F143           2879            ACALL   EXPRB           ;EVALUATE EXPRESSION
0A51 8003           2880            SJMP    SF21            ;JUMP OVER
                    2881            ;
0A53 121443         2882    SF2:    LCALL   PUSH_ONE        ;PUT ONE ON THE STACK
                    2883            ;
0A56 74EF           2884    SF21:   MOV     A,#-FSIZE       ;ALLOCATE FSIZE BYTES ON THE CONTROL STACK
0A58 71B1           2885            ACALL   PUSHCS          ;GET CS IN R0
0A5A 71BD           2886            ACALL   CSC             ;CHECK CONTROL STACK
0A5C 7B00           2887            MOV     R3,#CSTKAH      ;IN CONTROL STACK
0A5E A900           2888            MOV     R1,R0B0         ;STACK ADDRESS
0A60 F1D3           2889            ACALL   POPAS           ;PUT STEP ON STACK
0A62 F1D3           2890            ACALL   POPAS           ;PUT LIMIT ON STACK
0A64 D1A2           2891            ACALL   DP_T            ;DPTR GETS TEXT
0A66 A801           2892            MOV     R0,R1B0         ;GET THE POINTER
0A68 7139           2893            ACALL   T_X_S           ;SAVE THE TEXT
0A6A D008           2894            POP     TXAL            ;GET CONTROL VARIABLE
0A6C D00A           2895            POP     TXAH
0A6E 7C01           2896            MOV     R4,#FTYPE       ;AND THE TYPE
0A70 7139           2897            ACALL   T_X_S           ;SAVE IT
                    2898            ;
0A72 D1B8           2899    SF3:    ACALL   T_DP            ;GET THE TEXT POINTER
0A74 0113           2900            AJMP    ILOOP           ;CONTINUE TO PROCESS
                    2901            ;
                    2902            ;**************************************************************
                    2903            ;
                    2904            ; The statement action routines - PUSH and POP
                    2905            ;
                    2906            ;**************************************************************
                    2907            ;
0A76 F143           2908    SPUSH:  ACALL   EXPRB           ;PUT EXPRESSION ON STACK
0A78 D1C6           2909            ACALL   C_TST           ;SEE IF MORE TO DO
0A7A 50FA           2910            JNC     SPUSH           ;IF A COMMA PUSH ANOTHER
0A7C 22             2911            RET
                    2912            ;
                    2913            ;
0A7D F101           2914    SPOP:   ACALL   VAR_ER          ;GET VARIABLE
0A7F F1D1           2915            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0A81 D1C6           2916            ACALL   C_TST           ;SEE IF MORE TO DO
0A83 50F8           2917            JNC     SPOP
                    2918            ;
0A85 22             2919    SPOP1:  RET
                    2920            ;
                    2921            ;***************************************************************
                    2922            ;
BASIC52S                                                                                                      PAGE 52

                    2923            ; The statement action routine - IF
                    2924            ;
                    2925            ;***************************************************************
                    2926            ;
0A86 51C7           2927    SIF:    ACALL   RTST            ;EVALUATE THE EXPRESSION
0A88 F9             2928            MOV     R1,A            ;SAVE THE RESULT
0A89 D1CD           2929            ACALL   GC              ;GET THE CHARACTER AFTER EXPR
0A8B B4A502         2930            CJNE    A,#T_THEN,SIF1  ;SEE IF THEN TOKEN
0A8E D1D7           2931            ACALL   GCI1            ;WASTE THEN TOKEN
0A90 B9000B         2932    SIF1:   CJNE    R1,#0,T_F1      ;CHECK R_OP RESULT
                    2933            ;
0A93 7FA8           2934    E_FIND: MOV     R7,#T_ELSE      ;FIND ELSE TOKEN
0A95 D1EE           2935            ACALL   FINDC
0A97 60EC           2936            JZ      SPOP1           ;EXIT IF A CR
0A99 D1D7           2937            ACALL   GCI1            ;BUMP PAST TOKEN
0A9B B4A8F5         2938            CJNE    A,#T_ELSE,E_FIND;WASTE IF NO ELSE
                    2939            ;
0A9E F135           2940    T_F1:   ACALL   INTGER          ;SEE IF NUMBER
0AA0 5056           2941            JNC     D_L1            ;EXECUTE LINE NUMBER
0AA2 01F8           2942            AJMP    ISTAT           ;EXECUTE STATEMENT IN NOT
                    2943            ;
0AA4 E0             2944    B_C:    MOVX    A,@DPTR
0AA5 14             2945            DEC     A
0AA6 20E72E         2946            JB      ACC.7,FL11
0AA9 22             2947            RET
                    2948            ;
                    2949            ;***************************************************************
                    2950            ;
                    2951            ; The statement action routine - GOTO
                    2952            ;
                    2953            ;***************************************************************
                    2954            ;
0AAA 51F2           2955    SGOTO:  ACALL   RLINE           ;R2:R0 AND DPTR GET INTGER
                    2956            ;
0AAC D1B8           2957    SGT1:   ACALL   T_DP            ;TEXT POINTER GETS DPTR
                    2958            ;
0AAE 102508         2959            JBC     RETBIT,SGT2     ;SEE IF RETI EXECUTED
                    2960            ;
0AB1 301503         2961            JNB     LINEB,SGT11     ;SEE IF A LINE WAS EDITED
0AB4 120662         2962            LCALL   CNEW1           ;CLEAR THE MEMORY IF SET
0AB7 0111           2963    SGT11:  AJMP    CILOOP1         ;CLEAR DIRF AND LOOP
                    2964            ;
0AB9 101405         2965    SGT2:   JBC     OTI,SGT21       ;SEE IF TIMER INTERRUPT
0ABC 5322BD         2966            ANL     34,#10111101B   ;CLEAR INTERRUPTS
0ABF 0113           2967            AJMP    ILOOP           ;EXECUTE
0AC1 A22B           2968    SGT21:  MOV     C,ISAV
0AC3 9211           2969            MOV     INPROG,C
0AC5 0113           2970            AJMP    ILOOP           ;RESTORE INTERRUPTS AND RET
                    2971            ;
                    2972            ;
                    2973            ;*************************************************************
                    2974            ;
0AC7                2975    RTST:   ; Test for ZERO
                    2976            ;
                    2977            ;*************************************************************
                    2978            ;
0AC7 F143           2979            ACALL   EXPRB           ;EVALUATE EXPRESSION
0AC9 12124F         2980            CALL    INC_ASTKA       ;BUMP ARG STACK
BASIC52S                                                                                                      PAGE 53

0ACC 6002           2981            JZ      RTST1           ;EXIT WITH ZERO OR 0FFH
0ACE 74FF           2982            MOV     A,#0FFH
0AD0 22             2983    RTST1:  RET
                    2984            ;
                    2985            ;
                    2986            ;**************************************************************
                    2987            ;
                    2988            ; GLN - get the line number in R2:R0, return in DPTR
                    2989            ;
                    2990            ;**************************************************************
                    2991            ;
0AD1 D19B           2992    GLN:    ACALL   DP_B            ;GET THE BEGINNING ADDRESS
                    2993            ;
0AD3 E0             2994    FL1:    MOVX    A,@DPTR         ;GET THE LENGTH
0AD4 FF             2995            MOV     R7,A            ;SAVE THE LENGTH
0AD5 DF05           2996            DJNZ    R7,FL3          ;SEE IF END OF FILE
                    2997            ;
0AD7 901FB5         2998    FL11:   MOV     DPTR,#E10X      ;NO LINE NUMBER
0ADA 810E           2999            AJMP    EK              ;HANDLE THE ERROR
                    3000            ;
0ADC 20E7F8         3001    FL3:    JB      ACC.7,FL11      ;CHECK FOR BIT 7
0ADF A3             3002            INC     DPTR            ;POINT AT HIGH BYTE
0AE0 E0             3003            MOVX    A,@DPTR         ;GET HIGH BYTE
0AE1 B50208         3004            CJNE    A,R2B0,FL2      ;SEE IF MATCH
0AE4 A3             3005            INC     DPTR            ;BUMP TO LOW BYTE
0AE5 1F             3006            DEC     R7              ;ADJUST AGAIN
0AE6 E0             3007            MOVX    A,@DPTR         ;GET THE LOW BYTE
0AE7 B50002         3008            CJNE    A,R0B0,FL2      ;SEE IF LOW BYTE MATCH
0AEA A3             3009            INC     DPTR            ;POINT AT FIRST CHARACTER
0AEB 22             3010            RET                     ;FOUND IT
                    3011            ;
0AEC EF             3012    FL2:    MOV     A,R7            ;GET THE LENGTH COUNTER
0AED 1205DE         3013            CALL    ADDPTR          ;ADD A TO DATA POINTER
0AF0 80E1           3014            SJMP    FL1             ;LOOP
                    3015            ;
                    3016            ;
                    3017            ;*************************************************************
                    3018            ;
                    3019            ;RLINE - Read in ASCII string, get line, and clean it up
                    3020            ;
                    3021            ;*************************************************************
                    3022            ;
0AF2 F130           3023    RLINE:  ACALL   INTERR          ;GET THE INTEGER
                    3024            ;
0AF4 51D1           3025    RL1:    ACALL   GLN
0AF6 E117           3026            AJMP    CLN_UP
                    3027            ;
                    3028            ;
0AF8 51D1           3029    D_L1:   ACALL   GLN             ;GET THE LINE
0AFA 41AC           3030            AJMP    SGT1            ;EXECUTE THE LINE
                    3031            ;
                    3032            ;***************************************************************
                    3033            ;
                    3034            ; The statement action routines WHILE and UNTIL
                    3035            ;
                    3036            ;***************************************************************
                    3037            ;
0AFC 51C7           3038    SWHILE: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
BASIC52S                                                                                                      PAGE 54

0AFE F4             3039            CPL     A
0AFF 8002           3040            SJMP    S_WU
                    3041            ;
0B01 51C7           3042    SUNTIL: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
                    3043            ;
0B03 7C03           3044    S_WU:   MOV     R4,#DTYPE       ;DO EXPECTED
0B05 FD             3045            MOV     R5,A            ;SAVE R_OP RESULT
0B06 800C           3046            SJMP    SR0             ;GO PROCESS
                    3047            ;
                    3048            ;
                    3049            ;***************************************************************
                    3050            ;
0B08                3051    CNULL:  ; The Command Action Routine - NULL
                    3052            ;
                    3053            ;***************************************************************
                    3054            ;
0B08 F130           3055            ACALL   INTERR          ;GET AN INTEGER FOLLOWING NULL
0B0A 8815           3056            MOV     NULLCT,R0       ;SAVE THE NULLCOUNT
0B0C 0155           3057            AJMP    CMNDLK          ;JUMP TO COMMAND MODE
                    3058            ;
                    3059            ;***************************************************************
                    3060            ;
                    3061            ; The statement action routine - RETI
                    3062            ;
                    3063            ;***************************************************************
                    3064            ;
0B0E D225           3065    SRETI:  SETB    RETBIT          ;SAYS THAT RETI HAS BEEN EXECUTED
                    3066            ;
                    3067            ;***************************************************************
                    3068            ;
                    3069            ; The statement action routine - RETURN
                    3070            ;
                    3071            ;***************************************************************
                    3072            ;
0B10 7C02           3073    SRETRN: MOV     R4,#GTYPE       ;MAKE SURE OF GOSUB
0B12 7D55           3074            MOV     R5,#55H         ;TYPE RETURN TYPE
                    3075            ;
0B14 714B           3076    SR0:    ACALL   CSETUP          ;SET UP CONTROL STACK
0B16 E2             3077            MOVX    A,@R0           ;GET RETURN TEXT ADDRESS
0B17 F583           3078            MOV     DPH,A
0B19 08             3079            INC     R0
0B1A E2             3080            MOVX    A,@R0
0B1B F582           3081            MOV     DPL,A
0B1D 08             3082            INC     R0              ;POP CONTROL STACK
0B1E E0             3083            MOVX    A,@DPTR         ;SEE IF GOSUB WAS THE LAST STATEMENT
0B1F B40102         3084            CJNE    A,#EOF,SR01
0B22 0155           3085            AJMP    CMNDLK
0B24 ED             3086    SR01:   MOV     A,R5            ;GET TYPE
0B25 6085           3087            JZ      SGT1            ;EXIT IF ZERO
0B27 8811           3088            MOV     CSTKA,R0        ;POP THE STACK
0B29 F4             3089            CPL     A               ;OPTION TEST, 00H, 55H, 0FFH, NOW 55H
0B2A 7080           3090            JNZ     SGT1            ;MUST BE GOSUB
0B2C 22             3091            RET                     ;NORMAL FALL THRU EXIT FOR NO MATCH
                    3092            ;
                    3093            ;***************************************************************
                    3094            ;
                    3095            ; The statement action routine - GOSUB
                    3096            ;
BASIC52S                                                                                                      PAGE 55

                    3097            ;***************************************************************
                    3098            ;
0B2D 51F2           3099    SGOSUB: ACALL   RLINE           ;NEW TXA IN DPTR
                    3100            ;
0B2F 7C02           3101    SGS0:   MOV     R4,#GTYPE
0B31 7135           3102            ACALL   SGS1            ;SET EVERYTHING UP
0B33 4172           3103            AJMP    SF3             ;EXIT
                    3104            ;
0B35 74FD           3105    SGS1:   MOV     A,#-3           ;ALLOCATE 3 BYTES ON CONTROL STACK
0B37 71B1           3106            ACALL   PUSHCS
                    3107            ;
0B39 75A000         3108    T_X_S:  MOV     P2,#CSTKAH      ;SET UP PORT FOR CONTROL STACK
0B3C E508           3109            MOV     A,TXAL          ;GET RETURN ADDRESS AND SAVE IT
0B3E F2             3110            MOVX    @R0,A
0B3F 18             3111            DEC     R0
0B40 E50A           3112            MOV     A,TXAH
0B42 F2             3113            MOVX    @R0,A
0B43 18             3114            DEC     R0
0B44 EC             3115            MOV     A,R4            ;GET TYPE
0B45 F2             3116            MOVX    @R0,A           ;SAVE TYPE
0B46 22             3117            RET                     ;EXIT
                    3118            ;
                    3119            ;
0B47 7403           3120    CS1:    MOV     A,#3            ;POP 3 BYTES
0B49 71B1           3121            ACALL   PUSHCS
                    3122            ;
0B4B A811           3123    CSETUP: MOV     R0,CSTKA        ;GET CONTROL STACK
0B4D 75A000         3124            MOV     P2,#CSTKAH
0B50 E2             3125            MOVX    A,@R0           ;GET BYTE
0B51 B50402         3126            CJNE    A,R4B0,CSETUP1  ;SEE IF TYPE MATCH
0B54 08             3127            INC     R0
0B55 22             3128            RET
0B56 6069           3129    CSETUP1:JZ      E4XX            ;EXIT IF STACK UNDERFLOW
0B58 B401EC         3130            CJNE    A,#FTYPE,CS1    ;SEE IF FOR TYPE
0B5B 71AF           3131            ACALL   XXI3            ;WASTE THE FOR TYPE
0B5D 80EC           3132            SJMP    CSETUP          ;LOOP
                    3133            ;
                    3134            ;***************************************************************
                    3135            ;
                    3136            ; The statement action routine - NEXT
                    3137            ;
                    3138            ;***************************************************************
                    3139            ;
0B5F 7C01           3140    SNEXT:  MOV     R4,#FTYPE       ;FOR TYPE
0B61 714B           3141            ACALL   CSETUP          ;SETUP CONTROL STACK
0B63 880F           3142            MOV     TEMP5,R0        ;SAVE CONTROL VARIABLE ADDRESS
0B65 790B           3143            MOV     R1,#TEMP1       ;SAVE VAR + RETURN IN TEMP1-4
                    3144            ;
0B67 E2             3145    XXI:    MOVX    A,@R0           ;LOOP UNTIL DONE
0B68 F7             3146            MOV     @R1,A
0B69 09             3147            INC     R1
0B6A 08             3148            INC     R0
0B6B B90FF9         3149            CJNE    R1,#TEMP5,XXI
                    3150            ;
0B6E B165           3151            ACALL   VAR             ;SEE IF THE USER HAS A VARIABLE
0B70 5004           3152            JNC     XXI1
0B72 AA0B           3153            MOV     R2,TEMP1
0B74 A80C           3154            MOV     R0,TEMP2
BASIC52S                                                                                                      PAGE 56

0B76 EA             3155    XXI1:   MOV     A,R2            ;SEE IF VAR'S AGREE
0B77 B50B47         3156            CJNE    A,TEMP1,E4XX
0B7A E8             3157            MOV     A,R0
0B7B B50C43         3158            CJNE    A,TEMP2,E4XX
0B7E F1DD           3159            ACALL   PUSHAS          ;PUT CONTROL VARIABLE ON STACK
0B80 740E           3160            MOV     A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO STEP VALUE SIGN
0B82 250F           3161            ADD     A,TEMP5         ;ADD IT TO BASE OF STACK
0B84 F8             3162            MOV     R0,A            ;SAVE IN R0
0B85 7A00           3163            MOV     R2,#CSTKAH      ;SET UP TO PUSH STEP VALUE
0B87 8AA0           3164            MOV     P2,R2           ;SET UP PORT
0B89 E2             3165            MOVX    A,@R0           ;GET SIGN
0B8A 08             3166            INC     R0              ;BACK TO EXPONENT
0B8B C0E0           3167            PUSH    ACC             ;SAVE SIGN OF STEP
0B8D F1DD           3168            ACALL   PUSHAS          ;PUT STEP VALUE ON STACK
0B8F C000           3169            PUSH    R0B0            ;SAVE LIMIT VALUE LOCATION
0B91 121741         3170            CALL    AADD            ;ADD STEP VALUE TO VARIABLE
0B94 12142C         3171            CALL    CSTAKA          ;COPY STACK
0B97 AB0B           3172            MOV     R3,TEMP1        ;GET CONTROL VARIABLE
0B99 A90C           3173            MOV     R1,TEMP2
0B9B F1D3           3174            ACALL   POPAS           ;SAVE THE RESULT
0B9D 7A00           3175            MOV     R2,#CSTKAH      ;RESTORE LIMIT LOCATION
0B9F D000           3176            POP     R0B0
0BA1 F1DD           3177            ACALL   PUSHAS          ;PUT LIMIT ON STACK
0BA3 121973         3178            CALL    FP_BASE2        ;DO THE COMPARE
0BA6 D0E0           3179            POP     ACC             ;GET LIMIT SIGN BACK
0BA8 6001           3180            JZ      XXI2            ;IF SIGN NEGATIVE, TEST "BACKWARDS"
0BAA B3             3181            CPL     C
0BAB 72D5           3182    XXI2:   ORL     C,F0            ;SEE IF EQUAL
0BAD 4017           3183            JC      N4              ;STILL SMALLER THAN LIMIT?
0BAF 7411           3184    XXI3:   MOV     A,#FSIZE        ;REMOVE CONTROL STACK ENTRY
                    3185            ;
                    3186            ; Fall thru to PUSHCS
                    3187            ;
                    3188            ;***************************************************************
                    3189            ;
                    3190            ; PUSHCS - push frame onto control stack
                    3191            ;          acc has - number of bytes, also test for overflow
                    3192            ;
                    3193            ;***************************************************************
                    3194            ;
0BB1 2511           3195    PUSHCS: ADD     A,CSTKA         ;BUMP CONTROL STACK
0BB3 B46100         3196            CJNE    A,#CONVT+17,PUSHCS1 ;SEE IF OVERFLOWED
0BB6 4009           3197    PUSHCS1:JC      E4XX            ;EXIT IF STACK OVERFLOW
0BB8 C511           3198            XCH     A,CSTKA         ;STORE NEW CONTROL STACK VALUE, GET OLD
0BBA 14             3199            DEC     A               ;BUMP OLD VALUE
0BBB F8             3200            MOV     R0,A            ;PUT OLD-1 IN R0
                    3201            ;
0BBC 22             3202    PUSHCS2:RET                     ;EXIT
                    3203            ;
0BBD F117           3204    CSC:    ACALL   CLN_UP          ;FINISH OFF THE LINE
0BBF 50FB           3205            JNC     PUSHCS2         ;EXIT IF NO TERMINATOR
                    3206            ;
0BC1 900383         3207    E4XX:   MOV     DPTR,#EXC       ;CONTROL STACK ERROR
0BC4 810E           3208            AJMP    EK              ;STACK ERROR
                    3209            ;
0BC6 850D0A         3210    N4:     MOV     TXAH,TEMP3      ;GET TEXT POINTER
0BC9 850E08         3211            MOV     TXAL,TEMP4
0BCC 0113           3212            AJMP    ILOOP           ;EXIT
BASIC52S                                                                                                      PAGE 57

                    3213            ;
                    3214            ;***************************************************************
                    3215            ;
                    3216            ; The statement action routine - RESTORE
                    3217            ;
                    3218            ;***************************************************************
                    3219            ;
0BCE 71D6           3220    SRESTR: ACALL   X_TR            ;SWAP POINTERS
0BD0 D19B           3221    SRESTR1:ACALL   DP_B            ;GET THE STARTING ADDRESS
0BD2 D1B8           3222            ACALL   T_DP            ;PUT STARTING ADDRESS IN TEXT POINTER
0BD4 F123           3223            ACALL   B_TXA           ;BUMP TXA
                    3224            ;
                    3225            ; Fall thru
                    3226            ;
0BD6                3227    X_TR:   ;swap txa and rtxa
                    3228            ;
0BD6 C50A           3229            XCH     A,TXAH
0BD8 C512           3230            XCH     A,RTXAH
0BDA C50A           3231            XCH     A,TXAH
0BDC C508           3232            XCH     A,TXAL
0BDE C510           3233            XCH     A,RTXAL
0BE0 C508           3234            XCH     A,TXAL
0BE2 22             3235            RET                     ;EXIT
                    3236            ;
                    3237            ;***************************************************************
                    3238            ;
                    3239            ; The statement action routine - READ
                    3240            ;
                    3241            ;***************************************************************
                    3242            ;
0BE3 71D6           3243    SREAD:  ACALL   X_TR            ;SWAP POINTERS
                    3244            ;
0BE5 D1C6           3245    SRD0:   ACALL   C_TST           ;CHECK FOR COMMA
0BE7 4016           3246            JC      SRD4            ;SEE WHAT IT IS
                    3247            ;
0BE9 F143           3248    SRD:    ACALL   EXPRB           ;EVALUATE THE EXPRESSION
0BEB D1CD           3249            ACALL   GC              ;GET THE CHARACTER AFTER EXPRESSION
0BED B42C02         3250            CJNE    A,#',',SRD1     ;SEE IF MORE DATA
0BF0 8002           3251            SJMP    SRD2            ;BYBASS CLEAN UP IF A COMMA
                    3252            ;
0BF2 F117           3253    SRD1:   ACALL   CLN_UP          ;FINISH OFF THE LINE, IF AT END
                    3254            ;
0BF4 71D6           3255    SRD2:   ACALL   X_TR            ;RESTORE POINTERS
0BF6 F101           3256            ACALL   VAR_ER          ;GET VARIABLE ADDRESS
0BF8 F1D1           3257            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0BFA D1C6           3258            ACALL   C_TST           ;SEE IF A COMMA
0BFC 50E5           3259            JNC     SREAD           ;READ AGAIN IF A COMMA
0BFE 22             3260    SRD21:  RET                     ;EXIT IF NOT
                    3261            ;
0BFF B49C04         3262    SRD4:   CJNE    A,#T_DATA,SRD5  ;SEE IF DATA
0C02 D1D7           3263            ACALL   GCI1            ;BUMP POINTER
0C04 80E3           3264            SJMP    SRD
                    3265            ;
0C06 B40108         3266    SRD5:   CJNE    A,#EOF,SRD6     ;SEE IF YOU BLEW IT
0C09 71D6           3267    SRD51:  ACALL   X_TR            ;GET THE TEXT POINTER BACK
0C0B 901F81         3268            MOV     DPTR,#E14X      ;READ ERROR
                    3269            ;
0C0E 02188F         3270    EK:     LJMP    ERROR
BASIC52S                                                                                                      PAGE 58

                    3271            ;
0C11 D1EC           3272    SRD6:   ACALL   FINDCR          ;WASTE THIS LINE
0C13 F117           3273            ACALL   CLN_UP          ;CLEAN IT UP
0C15 40F2           3274            JC      SRD51           ;ERROR IF AT END
0C17 80CC           3275            SJMP    SRD0
                    3276            ;
0C19 D1CD           3277    NUMC:   ACALL   GC              ;GET A CHARACTER
0C1B B42304         3278            CJNE    A,#'#',NUMC1    ;SEE IF A #
0C1E D21B           3279            SETB    COB             ;VALID LINE PRINT
0C20 C1CB           3280            AJMP    IGC             ;BUMP THE TEXT POINTER
                    3281            ;
0C22 B440D9         3282    NUMC1:  CJNE    A,#'@',SRD21    ;EXIT IF NO GOOD
0C25 D219           3283            SETB    LPB
0C27 C1CB           3284            AJMP    IGC
                    3285            ;
                    3286            ;***************************************************************
                    3287            ;
                    3288            ; The statement action routine - PRINT
                    3289            ;
                    3290            ;***************************************************************
                    3291            ;
0C29 D236           3292    SPH0:   SETB    ZSURP           ;NO ZEROS
                    3293            ;
0C2B D237           3294    SPH1:   SETB    HMODE           ;HEX MODE
                    3295            ;
0C2D 9119           3296    SPRINT: ACALL   NUMC            ;TEST FOR A LINE PRINT
0C2F 9138           3297            ACALL   SPRINT2         ;PROCEED
0C31 5323F5         3298    SPRINT1:ANL     35,#11110101B   ;CLEAR COB AND LPB
0C34 53263F         3299            ANL     38,#00111111B   ;NO HEX MODE
                    3300            ;
0C37 22             3301            RET
                    3302            ;
0C38 D1E1           3303    SPRINT2:ACALL   DELTST          ;CHECK FOR A DELIMITER
0C3A 4007           3304            JC      SP1
                    3305            ;
0C3C 0206A5         3306    SP0:    JMP     CRLF            ;EXIT WITH A CR IF SO
                    3307            ;
0C3F D1C6           3308    SP2:    ACALL   C_TST           ;CHECK FOR A COMMA
0C41 40F9           3309            JC      SP0             ;EXIT IF NO COMMA
                    3310            ;
0C43 D1A9           3311    SP1:    ACALL   CPS             ;SEE IF A STRING TO PRINT
0C45 50F8           3312            JNC     SP2             ;IF A STRING, CHECK FOR A COMMA
                    3313            ;
0C47 B4A408         3314    SP4:    CJNE    A,#T_TAB,SP6
0C4A D195           3315            ACALL   I_PI            ;ALWAYS CLEARS CARRY
0C4C 9516           3316            SUBB    A,PHEAD         ;TAKE DELTA BETWEEN TAB AND PHEAD
0C4E 40EF           3317            JC      SP2             ;EXIT IF PHEAD > TAB
0C50 8005           3318            SJMP    SP7             ;OUTPUT SPACES
                    3319            ;
0C52 B4A90A         3320    SP6:    CJNE    A,#T_SPC,SM
0C55 D195           3321            ACALL   I_PI            ;SET UP PAREN VALUE
                    3322            ;
0C57 60E6           3323    SP7:    JZ      SP2
0C59 12070F         3324            LCALL   STEROT          ;OUTPUT A SPACE
0C5C 14             3325            DEC     A               ;DECREMENT COUNTER
0C5D 80F8           3326            SJMP    SP7             ;LOOP
                    3327            ;
0C5F B4D313         3328    SM:     CJNE    A,#T_CHR,SP8
BASIC52S                                                                                                      PAGE 59

0C62 D1CB           3329            ACALL   IGC
0C64 B42406         3330            CJNE    A,#'$',SM01
0C67 F1F9           3331            ACALL   CNX             ;PUT THE CHARACTER ON THE STACK
0C69 D190           3332            ACALL   IFIXL           ;PUT THE CHARACTER IN R1
0C6B 8004           3333            SJMP    SM02
0C6D D18E           3334    SM01:   ACALL   ONE             ;EVALUATE THE EXPRESSION, PUT IN R3:R1
0C6F 91E3           3335            ACALL   ERPAR
0C71 AD01           3336    SM02:   MOV     R5,R1B0         ;BYTE TO OUTPUT
0C73 8007           3337            SJMP    SQ
                    3338            ;
0C75 B4AA09         3339    SP8:    CJNE    A,#T_CR,SX
0C78 D1D7           3340            ACALL   GCI1            ;EAT THE TOKEN
0C7A 7D0D           3341            MOV     R5,#CR
                    3342            ;
0C7C 120711         3343    SQ:     CALL    TEROT
0C7F 80BE           3344            SJMP    SP2             ;OUTPUT A CR AND DO IT AGAIN
                    3345            ;
0C81 B4D253         3346    SX:     CJNE    A,#T_USE,SP9    ;USING TOKEN
0C84 D1CB           3347            ACALL   IGC             ;GE THE CHARACTER AFTER THE USING TOKEN
0C86 B44616         3348            CJNE    A,#'F',U4       ;SEE IF FLOATING
0C89 7517F0         3349            MOV     FORMAT,#0F0H    ;SET FLOATING
0C8C D1CB           3350            ACALL   IGC             ;BUMP THE POINTER AND GET THE CHARACTER
0C8E D1D7           3351            ACALL   GCI1            ;BUMP IT AGAIN
0C90 540F           3352            ANL     A,#0FH          ;STRIP OFF ASCII BIAS
0C92 6007           3353            JZ      U3              ;EXIT IF ZERO
0C94 B40300         3354            CJNE    A,#3,SX1        ;SEE IF AT LEAST A THREE
0C97 5002           3355    SX1:    JNC     U3              ;FORCE A THREE IF NOT A THREE
0C99 7403           3356            MOV     A,#3
                    3357            ;
0C9B 4217           3358    U3:     ORL     FORMAT,A        ;PUT DIGIT IN FORMAT
0C9D 802A           3359            SJMP    U8              ;CLEAN UP END
                    3360            ;
0C9F B43007         3361    U4:     CJNE    A,#'0',U5
0CA2 751700         3362            MOV     FORMAT,#0       ;FREE FORMAT
0CA5 D1D7           3363            ACALL   GCI1            ;BUMP THE POINTER
0CA7 8020           3364            SJMP    U8
                    3365            ;
0CA9 B4231D         3366    U5:     CJNE    A,#'#',U8       ;SEE IF INTGER FORMAT
0CAC 91CD           3367            ACALL   U6
0CAE 8F17           3368            MOV     FORMAT,R7       ;SAVE THE FORMAT
0CB0 B42E11         3369            CJNE    A,#'.',U8A      ;SEE IF TERMINATOR WAS RADIX
0CB3 D1CB           3370            ACALL   IGC             ;BUMP PAST .
0CB5 91CD           3371            ACALL   U6              ;LOOP AGAIN
0CB7 EF             3372            MOV     A,R7            ;GET COUNT
0CB8 2517           3373            ADD     A,FORMAT        ;SEE IF TOO BIG
0CBA 24F7           3374            ADD     A,#0F7H
0CBC 5002           3375            JNC     U5A
                    3376            ;
0CBE 2138           3377    SE0:    AJMP    INTERX          ;ERROR, BAD SYNTAX
                    3378            ;
0CC0 EF             3379    U5A:    MOV     A,R7            ;GET THE COUNT BACK
0CC1 C4             3380            SWAP    A               ;ADJUST
0CC2 4217           3381            ORL     FORMAT,A        ;GET THE COUNT
                    3382            ;
0CC4 E517           3383    U8A:    MOV     A,FORMAT
                    3384            ;
0CC6 C4             3385    U8B:    SWAP    A               ;GET THE FORMAT RIGHT
0CC7 F517           3386            MOV     FORMAT,A
BASIC52S                                                                                                      PAGE 60

                    3387            ;
0CC9 91E3           3388    U8:     ACALL   ERPAR
0CCB 813F           3389            AJMP    SP2             ;DONE
                    3390            ;
0CCD 7F00           3391    U6:     MOV     R7,#0           ;SET COUNTER
                    3392            ;
0CCF B4230C         3393    U7:     CJNE    A,#'#',SP9A     ;EXIT IF NOT A #
0CD2 0F             3394            INC     R7              ;BUMP COUNTER
0CD3 D1CB           3395            ACALL   IGC             ;GET THE NEXT CHARACTER
0CD5 80F8           3396            SJMP    U7              ;LOOP
                    3397            ;
0CD7 D1E3           3398    SP9:    ACALL   DELTST1         ;CHECK FOR DELIMITER
0CD9 5003           3399            JNC     SP9A            ;EXIT IF A DELIMITER
                    3400            ;
0CDB B4A834         3401            CJNE    A,#T_ELSE,SS
                    3402            ;
0CDE 22             3403    SP9A:   RET                     ;EXIT IF ELSE TOKEN
                    3404            ;
                    3405            ;**************************************************************
                    3406            ;
                    3407            ; P_E - Evaluate an expression in parens ( )
                    3408            ;
                    3409            ;**************************************************************
                    3410            ;
0CDF 7FE0           3411    P_E:    MOV     R7,#T_LPAR
0CE1 F141           3412            ACALL   WE
                    3413            ;
0CE3 7F29           3414    ERPAR:  MOV     R7,#')'         ;EAT A RIGHT PAREN
                    3415            ;
0CE5 D1D5           3416    EATC:   ACALL   GCI             ;GET THE CHARACTER
0CE7 B507D4         3417            CJNE    A,R7B0,SE0      ;ERROR IF NOT THE SAME
0CEA 22             3418            RET
                    3419            ;
                    3420            ;***************************************************************
                    3421            ;
0CEB                3422    S_ON:   ; ON Statement
                    3423            ;
                    3424            ;***************************************************************
                    3425            ;
0CEB D18E           3426            ACALL   ONE             ;GET THE EXPRESSION
0CED D1D5           3427            ACALL   GCI             ;GET THE NEXT CHARACTER
0CEF B48304         3428            CJNE    A,#T_GOTO,C0
0CF2 91FD           3429            ACALL   C1              ;EAT THE COMMAS
0CF4 4172           3430            AJMP    SF3             ;DO GOTO
                    3431            ;
0CF6 B49FC5         3432    C0:     CJNE    A,#T_GOSB,SE0
0CF9 91FD           3433            ACALL   C1
0CFB 612F           3434            AJMP    SGS0            ;DO GOSUB
                    3435            ;
0CFD B90006         3436    C1:     CJNE    R1,#0,C2
0D00 F130           3437            ACALL   INTERR          ;GET THE LINE NUMBER
0D02 D1EC           3438            ACALL   FINDCR
0D04 41F4           3439            AJMP    RL1             ;FINISH UP THIS LINE
                    3440            ;
0D06 7F2C           3441    C2:     MOV     R7,#','
0D08 D1EE           3442            ACALL   FINDC
0D0A B42CB1         3443            CJNE    A,#',',SE0      ;ERROR IF NOT A COMMA
0D0D 19             3444            DEC     R1
BASIC52S                                                                                                      PAGE 61

0D0E D1D7           3445            ACALL   GCI1            ;BUMP PAST COMMA
0D10 80EB           3446            SJMP    C1
                    3447            ;
0D12 D1BF           3448    SS:     ACALL   S_C             ;SEE IF A STRING
0D14 4005           3449            JC      SA              ;NO STRING IF CARRY IS SET
0D16 1206BF         3450            LCALL   UPRNT           ;PUT POINTER IN DPTR
0D19 813F           3451            AJMP    SP2             ;SEE IF MORE
                    3452            ;
0D1B F143           3453    SA:     ACALL   EXPRB           ;MUST BE AN EXPRESSION
0D1D 7448           3454            MOV     A,#72
0D1F B51600         3455            CJNE    A,PHEAD,SA1     ;CHECK PHEAD POSITION
0D22 5002           3456    SA1:    JNC     SA2
0D24 913C           3457            ACALL   SP0             ;FORCE A CRLF
0D26 303714         3458    SA2:    JNB     HMODE,S13       ;HEX MODE?
0D29 121202         3459            CALL    FCMP            ;SEE IF TOS IS < 0FFFH
0D2C 400F           3460            JC      S13             ;EXIT IF GREATER
0D2E 12138F         3461            CALL    AABS            ;GET THE SIGN
0D31 7007           3462            JNZ     OOPS            ;WASTE IF NEGATIVE
0D33 D190           3463            ACALL   IFIXL
0D35 121985         3464            CALL    FP_BASE11       ;PRINT HEXMODE
0D38 813F           3465            AJMP    SP2
0D3A 1213A1         3466    OOPS:   CALL    ANEG            ;MAKE IT NEGATIVE
                    3467            ;
0D3D 12197D         3468    S13:    CALL    FP_BASE7        ;DO FP OUTPUT
0D40 7401           3469            MOV     A,#1            ;OUTPUT A SPACE
0D42 8157           3470            AJMP    SP7
                    3471            ;
                    3472            ;***************************************************************
                    3473            ;
                    3474            ; ANU -  Get variable name from text - set carry if not found
                    3475            ;        if succeeds returns variable in R7:R6
                    3476            ;        R6 = 0 if no digit in name
                    3477            ;
                    3478            ;***************************************************************
                    3479            ;
0D44 D1CB           3480    ANU:    ACALL   IGC             ;INCREMENT AND GET CHARACTER
0D46 121FED         3481            LCALL   DIGIT_CHECK     ;CHECK FOR DIGIT
0D49 400C           3482            JC      AL2             ;EXIT IF VALID DIGIT
0D4B B45F01         3483            CJNE    A,#'_',AL       ;SEE IF A _
0D4E 22             3484            RET
                    3485            ;
0D4F B44100         3486    AL:     CJNE    A,#'A',AL1      ;IS IT AN ASCII A?
0D52 4004           3487    AL1:    JC      AL3             ;EXIT IF CARRY IS SET
0D54 B45B00         3488            CJNE    A,#'Z'+1,AL2    ;IS IT LESS THAN AN ASCII Z
0D57 B3             3489    AL2:    CPL     C               ;FLIP CARRY
0D58 22             3490    AL3:    RET
                    3491            ;
0D59 30D53E         3492    SD01:   JNB     F0,VAR2
                    3493            ;
0D5C 901761         3494    SD0:    MOV     DPTR,#E6X
0D5F 810E           3495            AJMP    EK
                    3496            ;
0D61 D2D5           3497    SDIMX:  SETB    F0              ;SAYS DOING A DIMENSION
0D63 8002           3498            SJMP    VAR1
                    3499            ;
0D65 C2D5           3500    VAR:    CLR     F0              ;SAYS DOING A VARIABLE
                    3501            ;
0D67 D1CD           3502    VAR1:   ACALL   GC              ;GET THE CHARACTER
BASIC52S                                                                                                      PAGE 62

0D69 B14F           3503            ACALL   AL              ;CHECK FOR ALPHA
0D6B 5004           3504            JNC     VAR11           ;ERROR IF IN DIM
0D6D 20D5EC         3505            JB      F0,SD0
0D70 22             3506            RET
0D71 FF             3507    VAR11:  MOV     R7,A            ;SAVE ALPHA CHARACTER
0D72 E4             3508            CLR     A               ;ZERO IN CASE OF FAILURE
0D73 FD             3509            MOV     R5,A            ;SAVE IT
                    3510            ;
0D74 FE             3511    VY:     MOV     R6,A
0D75 B144           3512            ACALL   ANU             ;CHECK FOR ALPHA OR NUMBER
0D77 4007           3513            JC      VX              ;EXIT IF NO ALPHA OR NUM
                    3514            ;
0D79 CF             3515            XCH     A,R7
0D7A 2D             3516            ADD     A,R5            ;NUMBER OF CHARACTERS IN ALPHABET
0D7B CF             3517            XCH     A,R7            ;PUT IT BACK
0D7C 7D1A           3518            MOV     R5,#26          ;FOR THE SECOND TIME AROUND
0D7E 80F4           3519            SJMP    VY
                    3520            ;
0D80 C215           3521    VX:     CLR     LINEB           ;TELL EDITOR A VARIABLE IS DECLARED
0D82 B4E02F         3522            CJNE    A,#T_LPAR,V4    ;SEE IF A LEFT PAREN
                    3523            ;
0D85 430680         3524            ORL     R6B0,#80H       ;SET BIT 7 TO SIGINIFY MATRIX
0D88 120619         3525            CALL    F_VAR           ;FIND THE VARIABLE
0D8B C002           3526            PUSH    R2B0            ;SAVE THE LOCATION
0D8D C000           3527            PUSH    R0B0
0D8F 50C8           3528            JNC     SD01            ;DEFAULT IF NOT IN TABLE
0D91 20D528         3529            JB      F0,SDI          ;NO DEFAULT FOR DIMENSION
0D94 790A           3530            MOV     R1,#10
0D96 7B00           3531            MOV     R3,#0
0D98 B1CC           3532            ACALL   D_CHK
                    3533            ;
0D9A D197           3534    VAR2:   ACALL   PAREN_INT       ;EVALUATE INTEGER IN PARENS
0D9C BB00BD         3535            CJNE    R3,#0,SD0       ;ERROR IF R3<>0
0D9F D082           3536            POP     DPL             ;GET VAR FOR LOOKUP
0DA1 D083           3537            POP     DPH
0DA3 E0             3538            MOVX    A,@DPTR         ;GET DIMENSION
0DA4 14             3539            DEC     A               ;BUMP OFFSET
0DA5 99             3540            SUBB    A,R1            ;A MUST BE > R1
0DA6 40B4           3541            JC      SD0
0DA8 1205C0         3542            LCALL   DECDP2          ;BUMP POINTER TWICE
0DAB 510D           3543            ACALL   VARB            ;CALCULATE THE BASE
                    3544            ;
0DAD C9             3545    X3120:  XCH     A,R1            ;SWAP R2:R0, R3:R1
0DAE C8             3546            XCH     A,R0
0DAF C9             3547            XCH     A,R1
0DB0 CB             3548            XCH     A,R3
0DB1 CA             3549            XCH     A,R2
0DB2 CB             3550            XCH     A,R3
0DB3 22             3551            RET
                    3552            ;
0DB4 20D5A5         3553    V4:     JB      F0,SD0          ;ERROR IF NO LPAR FOR DIM
0DB7 120619         3554            LCALL   F_VAR           ;GET SCALAR VARIABLE
0DBA C3             3555            CLR     C
0DBB 22             3556            RET
                    3557            ;
0DBC D197           3558    SDI:    ACALL   PAREN_INT       ;EVALUATE PAREN EXPRESSION
0DBE BB009B         3559            CJNE    R3,#0,SD0       ;ERROR IF NOT ZERO
0DC1 D000           3560            POP     R0B0            ;SET UP R2:R0
BASIC52S                                                                                                      PAGE 63

0DC3 D002           3561            POP     R2B0
0DC5 B1CC           3562            ACALL   D_CHK           ;DO DIM
0DC7 D1C6           3563            ACALL   C_TST           ;CHECK FOR COMMA
0DC9 5096           3564            JNC     SDIMX           ;LOOP IF COMMA
0DCB 22             3565            RET                     ;RETURN IF NO COMMA
                    3566            ;
0DCC 09             3567    D_CHK:  INC     R1              ;BUMP FOR TABLE LOOKUP
0DCD E9             3568            MOV     A,R1
0DCE 608C           3569            JZ      SD0             ;ERROR IF 0FFFFH
0DD0 FC             3570            MOV     R4,A            ;SAVE FOR LATER
0DD1 900108         3571            MOV     DPTR,#MT_ALL    ;GET MATRIX ALLOCATION
0DD4 510D           3572            ACALL   VARB            ;DO THE CALCULATION
0DD6 AF83           3573            MOV     R7,DPH          ;SAVE MATRIX ALLOCATION
0DD8 AE82           3574            MOV     R6,DPL
0DDA 900106         3575            MOV     DPTR,#ST_ALL    ;SEE IF TOO MUCH MEMORY TAKEN
0DDD 1215B0         3576            CALL    FUL1            ;ST_ALL SHOULD BE > R3:R1
0DE0 900108         3577            MOV     DPTR,#MT_ALL    ;SAVE THE NEW MATRIX POINTER
0DE3 120605         3578            CALL    S31DP
0DE6 8882           3579            MOV     DPL,R0          ;GET VARIABLE ADDRESS
0DE8 8A83           3580            MOV     DPH,R2
0DEA EC             3581            MOV     A,R4            ;DIMENSION SIZE
0DEB F0             3582            MOVX    @DPTR,A         ;SAVE IT
0DEC 1205C0         3583            CALL    DECDP2          ;SAVE TARGET ADDRESS
                    3584            ;
0DEF EF             3585    R76S:   MOV     A,R7
0DF0 F0             3586            MOVX    @DPTR,A
0DF1 A3             3587            INC     DPTR
0DF2 EE             3588            MOV     A,R6            ;ELEMENT SIZE
0DF3 F0             3589            MOVX    @DPTR,A
0DF4 22             3590            RET                     ;R2:R0 STILL HAS SYMBOL TABLE ADDRESS
                    3591            ;
                    3592            ;***************************************************************
                    3593            ;
                    3594            ; The statement action routine - INPUT
                    3595            ;
                    3596            ;***************************************************************
                    3597            ;
0DF5 D1A9           3598    SINPUT: ACALL   CPS             ;PRINT STRING IF THERE
                    3599            ;
0DF7 D1C6           3600            ACALL   C_TST           ;CHECK FOR A COMMA
0DF9 5007           3601            JNC     IN2A            ;NO CRLF
0DFB 913C           3602            ACALL   SP0             ;DO A CRLF
                    3603            ;
0DFD 7D3F           3604    IN2:    MOV     R5,#'?'         ;OUTPUT A ?
0DFF 120711         3605            CALL    TEROT
                    3606            ;
0E02 D222           3607    IN2A:   SETB    INP_B           ;DOING INPUT
0E04 1206D8         3608            CALL    INLINE          ;INPUT THE LINE
0E07 C222           3609            CLR     INP_B
0E09 750F00         3610            MOV     TEMP5,#HIGH IBUF
0E0C 750E07         3611            MOV     TEMP4,#LOW IBUF
                    3612            ;
0E0F D1BF           3613    IN3:    ACALL   S_C             ;SEE IF A STRING
0E11 400D           3614            JC      IN3A            ;IF CARRY IS SET, NO STRING
0E13 B1AD           3615            ACALL   X3120           ;FLIP THE ADDRESSES
0E15 AB0F           3616            MOV     R3,TEMP5
0E17 A90E           3617            MOV     R1,TEMP4
0E19 319D           3618            ACALL   SSOOP
BASIC52S                                                                                                      PAGE 64

0E1B D1C6           3619            ACALL   C_TST           ;SEE IF MORE TO DO
0E1D 50DE           3620            JNC     IN2
0E1F 22             3621            RET
                    3622            ;
0E20 12184D         3623    IN3A:   CALL    DTEMP           ;GET THE USER LOCATION
0E23 121957         3624            CALL    GET_NUM         ;GET THE USER SUPPLIED NUMBER
0E26 7018           3625            JNZ     IN5             ;ERROR IF NOT ZERO
0E28 121854         3626            CALL    TEMPD           ;SAVE THE DATA POINTER
0E2B F101           3627            ACALL   VAR_ER          ;GET THE VARIABLE
0E2D F1D1           3628            ACALL   XPOP            ;SAVE THE VARIABLE
0E2F 12184D         3629            CALL    DTEMP           ;GET DPTR BACK FROM VAR_ER
0E32 D1C6           3630            ACALL   C_TST           ;SEE IF MORE TO DO
0E34 4013           3631            JC      IN6             ;EXIT IF NO COMMA
0E36 E0             3632            MOVX    A,@DPTR         ;GET INPUT TERMINATOR
0E37 B42C06         3633            CJNE    A,#',',IN5      ;IF NOT A COMMA DO A CR AND TRY AGAIN
0E3A A3             3634            INC     DPTR            ;BUMP PAST COMMA AND READ NEXT VALUE
0E3B 121854         3635            CALL    TEMPD
0E3E 80CF           3636            SJMP    IN3
                    3637            ;
0E40 9000F3         3638    IN5:    MOV     DPTR,#IAN       ;PRINT INPUT A NUMBER
0E43 1206AD         3639            CALL    CRP             ;DO A CR, THEN, PRINT FROM ROM
0E46 021844         3640            LJMP    CC1             ;TRY IT AGAIN
                    3641            ;
0E49 E0             3642    IN6:    MOVX    A,@DPTR
0E4A B40D01         3643            CJNE    A,#CR,EIGP
0E4D 22             3644            RET
                    3645            ;
0E4E 90036D         3646    EIGP:   MOV     DPTR,#EIG
0E51 1206AD         3647            CALL    CRP             ;PRINT THE MESSAGE AND EXIT
0E54 813C           3648            AJMP    SP0             ;EXIT WITH A CRLF
                    3649            ;
                    3650            ;***************************************************************
                    3651            ;
0E56                3652    SOT:    ; On timer interrupt
                    3653            ;
                    3654            ;***************************************************************
                    3655            ;
0E56 D185           3656            ACALL   TWO             ;GET THE NUMBERS
0E58 8B4B           3657            MOV     SP_H,R3
0E5A 894C           3658            MOV     SP_L,R1
0E5C 900126         3659            MOV     DPTR,#TIV       ;SAVE THE NUMBER
0E5F D210           3660            SETB    OTS
0E61 A1EF           3661            AJMP    R76S            ;EXIT
                    3662            ;
                    3663            ;
                    3664            ;***************************************************************
                    3665            ;
0E63                3666    SCALL:  ; Call a user rountine
                    3667            ;
                    3668            ;***************************************************************
                    3669            ;
0E63 F130           3670            ACALL   INTERR          ;CONVERT INTEGER
0E65 BA000A         3671            CJNE    R2,#0,S_C_1     ;SEE IF TRAP
0E68 E8             3672            MOV     A,R0
0E69 20E706         3673            JB      ACC.7,S_C_1
0E6C 28             3674            ADD     A,R0
0E6D 904100         3675            MOV     DPTR,#4100H
0E70 F582           3676            MOV     DPL,A
BASIC52S                                                                                                      PAGE 65

                    3677            ;
0E72 316C           3678    S_C_1:  ACALL   AC1             ;JUMP TO USER PROGRAM
0E74 53D0E7         3679            ANL     PSW,#11100111B  ;BACK TO BANK 0
0E77 22             3680            RET                     ;EXIT
                    3681            ;
                    3682            ;**************************************************************
                    3683            ;
0E78                3684    THREE:  ; Save value for timer function
                    3685            ;
                    3686            ;**************************************************************
                    3687            ;
0E78 D18E           3688            ACALL   ONE             ;GET THE FIRST INTEGER
0E7A 12167B         3689            CALL    CBIAS           ;BIAS FOR TIMER LOAD
0E7D 8B40           3690            MOV     T_HH,R3
0E7F 8941           3691            MOV     T_LL,R1
0E81 7F2C           3692            MOV     R7,#','         ;WASTE A COMMA
0E83 91E5           3693            ACALL   EATC            ;FALL THRU TO TWO
                    3694            ;
                    3695            ;**************************************************************
                    3696            ;
0E85                3697    TWO:    ; Get two values seperated by a comma off the stack
                    3698            ;
                    3699            ;**************************************************************
                    3700            ;
0E85 F143           3701            ACALL   EXPRB
0E87 7F2C           3702            MOV     R7,#','         ;WASTE THE COMMA
0E89 F141           3703            ACALL   WE
0E8B 0214A1         3704            JMP     TWOL            ;EXIT
                    3705            ;
                    3706            ;*************************************************************
                    3707            ;
0E8E                3708    ONE:    ; Evaluate an expression and get an integer
                    3709            ;
                    3710            ;*************************************************************
                    3711            ;
0E8E F143           3712            ACALL   EXPRB           ;EVALUATE EXPERSSION
                    3713            ;
0E90 121223         3714    IFIXL:  CALL    IFIX            ;INTEGERS IN R3:R1
0E93 E9             3715            MOV     A,R1
0E94 22             3716            RET
                    3717            ;
                    3718            ;
                    3719            ;*************************************************************
                    3720            ;
0E95                3721    I_PI:   ; Increment text pointer then get an integer
                    3722            ;
                    3723            ;*************************************************************
                    3724            ;
0E95 D1D7           3725            ACALL   GCI1            ;BUMP TEXT, THEN GET INTEGER
                    3726            ;
0E97                3727    PAREN_INT:; Get an integer in parens ( )
                    3728            ;
0E97 91DF           3729            ACALL   P_E
0E99 80F5           3730            SJMP    IFIXL
                    3731            ;
0E9B 851383         3732    DP_B:   MOV     DPH,BOFAH
0E9E 851482         3733            MOV     DPL,BOFAL
0EA1 22             3734            RET
BASIC52S                                                                                                      PAGE 66

                    3735            ;
0EA2 850A83         3736    DP_T:   MOV     DPH,TXAH
0EA5 850882         3737            MOV     DPL,TXAL
0EA8 22             3738            RET
                    3739            ;
0EA9 D1CD           3740    CPS:    ACALL   GC              ;GET THE CHARACTER
0EAB B42273         3741            CJNE    A,#'"',NOPASS   ;EXIT IF NO STRING
0EAE D1A2           3742            ACALL   DP_T            ;GET TEXT POINTER
0EB0 A3             3743            INC     DPTR            ;BUMP PAST "
0EB1 7C22           3744            MOV     R4,#'"'
0EB3 1206C3         3745            CALL    PN0             ;DO THE PRINT
0EB6 A3             3746            INC     DPTR            ;GO PAST QUOTE
0EB7 C3             3747            CLR     C               ;PASSED TEST
                    3748            ;
0EB8 85830A         3749    T_DP:   MOV     TXAH,DPH        ;TEXT POINTER GETS DPTR
0EBB 858208         3750            MOV     TXAL,DPL
0EBE 22             3751            RET
                    3752            ;
                    3753            ;*************************************************************
                    3754            ;
0EBF                3755    S_C:    ; Check for a string
                    3756            ;
                    3757            ;*************************************************************
                    3758            ;
0EBF D1CD           3759            ACALL   GC              ;GET THE CHARACTER
0EC1 B4245D         3760            CJNE    A,#'$',NOPASS   ;SET CARRY IF NOT A STRING
0EC4 21E7           3761            AJMP    IST_CAL         ;CLEAR CARRY, CALCULATE OFFSET
                    3762            ;
                    3763            ;
                    3764            ;
                    3765            ;**************************************************************
                    3766            ;
0EC6 D1CD           3767    C_TST:  ACALL   GC              ;GET A CHARACTER
0EC8 B42C56         3768            CJNE    A,#',',NOPASS   ;SEE IF A COMMA
                    3769            ;
                    3770            ;***************************************************************
                    3771            ;
                    3772            ;GC AND GCI - GET A CHARACTER FROM TEXT (NO BLANKS)
                    3773            ;             PUT CHARACTER IN THE ACC
                    3774            ;
                    3775            ;***************************************************************
                    3776            ;
0ECB D1D7           3777    IGC:    ACALL   GCI1            ;BUMP POINTER, THEN GET CHARACTER
                    3778            ;
0ECD D2D3           3779    GC:     SETB    RS0             ;USE BANK 1
0ECF 8AA0           3780            MOV     P2,R2           ;SET UP PORT 2
0ED1 E2             3781            MOVX    A,@R0           ;GET EXTERNAL BYTE
0ED2 C2D3           3782            CLR     RS0             ;BACK TO BANK 0
0ED4 22             3783            RET                     ;EXIT
                    3784            ;
0ED5 D1CD           3785    GCI:    ACALL   GC
                    3786            ;
                    3787            ; This routine bumps txa by one and always clears the carry
                    3788            ;
0ED7 D2D3           3789    GCI1:   SETB    RS0             ;BANK 1
0ED9 08             3790            INC     R0              ;BUMP TXA
0EDA B80001         3791            CJNE    R0,#0,GCI11
0EDD 0A             3792            INC     R2
BASIC52S                                                                                                      PAGE 67

0EDE C2D3           3793    GCI11:  CLR     RS0
0EE0 22             3794            RET                     ;EXIT
                    3795            ;
                    3796            ;**************************************************************
                    3797            ;
                    3798            ; Check delimiters
                    3799            ;
                    3800            ;**************************************************************
                    3801            ;
0EE1 D1CD           3802    DELTST: ACALL   GC              ;GET A CHARACTER
0EE3 B40D02         3803    DELTST1:CJNE    A,#CR,DT1       ;SEE IF A CR
0EE6 E4             3804            CLR     A
0EE7 22             3805            RET
                    3806            ;
0EE8 B43A36         3807    DT1:    CJNE    A,#':',NOPASS   ;SET CARRY IF NO MATCH
                    3808            ;
0EEB 22             3809    L_RET:  RET
                    3810            ;
                    3811            ;
                    3812            ;***************************************************************
                    3813            ;
                    3814            ; FINDC - Find the character in R7, update TXA
                    3815            ;
                    3816            ;***************************************************************
                    3817            ;
0EEC 7F0D           3818    FINDCR: MOV     R7,#CR          ;KILL A STATEMENT LINE
                    3819            ;
0EEE D1E1           3820    FINDC:  ACALL   DELTST
0EF0 50F9           3821            JNC     L_RET
                    3822            ;
0EF2 B50701         3823            CJNE    A,R7B0,FNDCL2   ;MATCH?
0EF5 22             3824            RET
                    3825            ;
0EF6 D1D7           3826    FNDCL2: ACALL   GCI1
0EF8 80F4           3827            SJMP    FINDC           ;LOOP
                    3828            ;
0EFA D1D7           3829    FNDCL3: ACALL   GCI1
                    3830            ;
0EFC D1E1           3831    WCR:    ACALL   DELTST          ;WASTE UNTIL A "REAL" CR
0EFE 70FA           3832            JNZ     FNDCL3
0F00 22             3833            RET
                    3834            ;
                    3835            ;***************************************************************
                    3836            ;
                    3837            ; VAR_ER - Check for a variable, exit if error
                    3838            ;
                    3839            ;***************************************************************
                    3840            ;
0F01 B165           3841    VAR_ER: ACALL   VAR
0F03 802D           3842            SJMP    INTERR1
                    3843            ;
                    3844            ;
                    3845            ;***************************************************************
                    3846            ;
                    3847            ; S_D0 - The Statement Action Routine DO
                    3848            ;
                    3849            ;***************************************************************
                    3850            ;
BASIC52S                                                                                                      PAGE 68

0F05 71BD           3851    S_DO:   ACALL   CSC             ;FINISH UP THE LINE
0F07 7C03           3852            MOV     R4,#DTYPE       ;TYPE FOR STACK
0F09 7135           3853            ACALL   SGS1            ;SAVE ON STACK
0F0B 0113           3854            AJMP    ILOOP           ;EXIT
                    3855            ;
                    3856            ;***************************************************************
                    3857            ;
                    3858            ; CLN_UP - Clean up the end of a statement, see if at end of
                    3859            ;          file, eat character and line count after CR
                    3860            ;
                    3861            ;***************************************************************
                    3862            ;
0F0D B43A02         3863    C_2:    CJNE    A,#':',C_1      ;SEE IF A TERMINATOR
0F10 C1D7           3864            AJMP    GCI1            ;BUMP POINTER AND EXIT, IF SO
                    3865            ;
0F12 B4A86D         3866    C_1:    CJNE    A,#T_ELSE,EP5
0F15 D1FC           3867            ACALL   WCR             ;WASTE UNTIL A CR
                    3868            ;
0F17 D1CD           3869    CLN_UP: ACALL   GC              ;GET THE CHARACTER
0F19 B40DF1         3870            CJNE    A,#CR,C_2       ;SEE IF A CR
0F1C D1CB           3871            ACALL   IGC             ;GET THE NEXT CHARACTER
0F1E B40102         3872            CJNE    A,#EOF,B_TXA    ;SEE IF TERMINATOR
                    3873            ;
0F21 D3             3874    NOPASS: SETB    C
0F22 22             3875            RET
                    3876            ;
0F23 C508           3877    B_TXA:  XCH     A,TXAL          ;BUMP TXA BY THREE
0F25 2403           3878            ADD     A,#3
0F27 C508           3879            XCH     A,TXAL
0F29 10D701         3880            JBC     CY,B_TXA1
0F2C 22             3881            RET
0F2D 050A           3882    B_TXA1: INC     TXAH
0F2F 22             3883            RET
                    3884            ;
                    3885            ;***************************************************************
                    3886            ;
                    3887            ;         Get an INTEGER from the text
                    3888            ;         sets CARRY if not found
                    3889            ;         returns the INTGER value in DPTR and R2:R0
                    3890            ;         returns the terminator in ACC
                    3891            ;
                    3892            ;***************************************************************
                    3893            ;
0F30 F135           3894    INTERR: ACALL   INTGER          ;GET THE INTEGER
0F32 404E           3895    INTERR1:JC      EP5             ;ERROR IF NOT FOUND
0F34 22             3896            RET                     ;EXIT IF FOUND
                    3897            ;
0F35 D1A2           3898    INTGER: ACALL   DP_T
0F37 121981         3899            CALL    FP_BASE9        ;CONVERT THE INTEGER
0F3A D1B8           3900            ACALL   T_DP
0F3C 8A83           3901            MOV     DPH,R2          ;PUT THE RETURNED VALUE IN THE DPTR
0F3E 8882           3902            MOV     DPL,R0
                    3903            ;
0F40 22             3904    ITRET:  RET                     ;EXIT
                    3905            ;
                    3906            ;
0F41 91E5           3907    WE:     ACALL   EATC            ;WASTE THE CHARACTER
                    3908            ;
BASIC52S                                                                                                      PAGE 69

                    3909            ; Fall thru to evaluate the expression
                    3910            ;
                    3911            ;***************************************************************
                    3912            ;
                    3913            ; EXPRB - Evaluate an expression
                    3914            ;
                    3915            ;***************************************************************
                    3916            ;
0F43 7ACF           3917    EXPRB:  MOV     R2,#LOW OPBOL   ;BASE PRECEDENCE
                    3918            ;
0F45 C002           3919    EP1:    PUSH    R2B0            ;SAVE OPERATOR PRECEDENCE
0F47 C224           3920            CLR     ARGF            ;RESET STACK DESIGNATOR
                    3921            ;
0F49 E581           3922    EP2:    MOV     A,SP            ;GET THE STACK POINTER
0F4B 240C           3923            ADD     A,#12           ;NEED AT LEAST 12 BYTES
0F4D 5003           3924            JNC     EP21
0F4F 02188C         3925            LJMP    E1XX2
0F52 E509           3926    EP21:   MOV     A,ASTKA         ;GET THE ARG STACK
0F54 9438           3927            SUBB    A,#LOW TM_TOP+12;NEED 12 BYTES ALSO
0F56 5003           3928            JNC     EP22
0F58 02121A         3929            LJMP    E4YY
0F5B 202413         3930    EP22:   JB      ARGF,EP4        ;MUST BE AN OPERATOR, IF SET
0F5E B165           3931            ACALL   VAR             ;IS THE VALUE A VARIABLE?
0F60 500D           3932            JNC     EP3             ;PUT VARIABLE ON STACK
                    3933            ;
0F62 F1EF           3934            ACALL   CONST           ;IS THE VALUE A NUMERIC CONSTANT?
0F64 500B           3935            JNC     EP4             ;IF SO, CONTINUE, IF NOT, SEE WHAT
0F66 D1CD           3936            CALL    GC              ;GET THE CHARACTER
0F68 B4E006         3937            CJNE    A,#T_LPAR,EP4   ;SEE IF A LEFT PAREN
0F6B 74D0           3938            MOV     A,#(LOW OPBOL+1)
0F6D 8055           3939            SJMP    XLPAR           ;PROCESS THE LEFT PAREN
                    3940            ;
0F6F F1DD           3941    EP3:    ACALL   PUSHAS          ;SAVE VAR ON STACK
                    3942            ;
0F71 D1CD           3943    EP4:    ACALL   GC              ;GET THE OPERATOR
                    3944            ;
0F73 B4E000         3945            CJNE    A,#T_LPAR,EP41  ;IS IT AN OPERATOR
0F76 500E           3946    EP41:   JNC     XOP             ;PROCESS OPERATOR
0F78 B4B000         3947            CJNE    A,#T_UOP,EP42   ;IS IT A UNARY OPERATOR
0F7B 503B           3948    EP42:   JNC     XBILT           ;PROCESS UNARY (BUILT IN) OPERATOR
0F7D D002           3949            POP     R2B0            ;GET BACK PREVIOUS OPERATOR PRECEDENCE
0F7F 2024BE         3950            JB      ARGF,ITRET      ;OK IF ARG FLAG IS SET
                    3951            ;
0F82 C3             3952    EP5:    CLR     C               ;NO RECOVERY
0F83 021887         3953            LJMP    E1XX1
                    3954            ;
                    3955            ; Process the operator
                    3956            ;
0F86 541F           3957    XOP:    ANL     A,#1FH          ;STRIP OFF THE TOKE BITS
0F88 202405         3958            JB      ARGF,XOP1       ;IF ARG FLAG IS SET, PROCESS
0F8B B4053C         3959            CJNE    A,#T_SUB-T_LPAR,XOP3
0F8E 7409           3960            MOV     A,#T_NEG-T_LPAR
                    3961            ;
0F90 24D0           3962    XOP1:   ADD     A,#LOW OPBOL+1  ;BIAS THE TABLE
0F92 FA             3963            MOV     R2,A
0F93 900000         3964            MOV     DPTR,#00H
0F96 93             3965            MOVC    A,@A+DPTR       ;GET THE CURRENT PRECEDENCE
0F97 FC             3966            MOV     R4,A
BASIC52S                                                                                                      PAGE 70

0F98 D0E0           3967            POP     ACC             ;GET THE PREVIOUS PRECEDENCE
0F9A FD             3968            MOV     R5,A            ;SAVE THE PREVIOUS PRECEDENCE
0F9B 93             3969            MOVC    A,@A+DPTR       ;GET IT
0F9C B50404         3970            CJNE    A,R4B0,XOP11    ;SEE WHICH HAS HIGHER PRECEDENCE
0F9F B40C9E         3971            CJNE    A,#12,ITRET     ;SEE IF ANEG
0FA2 D3             3972            SETB    C
0FA3 509B           3973    XOP11:  JNC     ITRET           ;PROCESS NON-INCREASING PRECEDENCE
                    3974            ;
                    3975            ; Save increasing precedence
                    3976            ;
0FA5 C005           3977            PUSH    R5B0            ;SAVE OLD PRECEDENCE ADDRESS
0FA7 C002           3978            PUSH    R2B0            ;SAVE NEW PRECEDENCE ADDRESS
0FA9 D1D7           3979            ACALL   GCI1            ;EAT THE OPERATOR
0FAB F145           3980            ACALL   EP1             ;EVALUATE REMAINING EXPRESSION
0FAD D0E0           3981    XOP12:  POP     ACC
                    3982            ;
                    3983            ; R2 has the action address, now setup and perform operation
                    3984            ;
0FAF 900057         3985    XOP2:   MOV     DPTR,#OPTAB
0FB2 2430           3986            ADD     A,#LOW (NOT OPBOL)
0FB4 315C           3987            CALL    ISTA1           ;SET UP TO RETURN TO EP2
0FB6 E149           3988            AJMP    EP2             ;JUMP TO EVALUATE EXPRESSION
                    3989            ;
                    3990            ; Built-in operator processing
                    3991            ;
0FB8 D1D7           3992    XBILT:  ACALL   GCI1            ;EAT THE TOKEN
0FBA 2430           3993            ADD     A,#LOW (50H+LOW UOPBOL)
0FBC 2024C3         3994            JB      ARGF,EP5        ;XBILT MUST COME AFTER AN OPERATOR
0FBF B4EE00         3995            CJNE    A,#STP,XBILT1
0FC2 50EB           3996    XBILT1: JNC     XOP2
                    3997            ;
0FC4 C0E0           3998    XLPAR:  PUSH    ACC             ;PUT ADDRESS ON THE STACK
0FC6 91DF           3999            ACALL   P_E
0FC8 80E3           4000            SJMP    XOP12           ;PERFORM OPERATION
                    4001            ;
0FCA B403B5         4002    XOP3:   CJNE    A,#T_ADD-T_LPAR,EP5
0FCD D1D7           4003            ACALL   GCI1
0FCF E149           4004            AJMP    EP2             ;WASTE + SIGN
                    4005            ;
0FD1 B1AD           4006    XPOP:   ACALL   X3120           ;FLIP ARGS THEN POP
                    4007            ;
                    4008            ;***************************************************************
                    4009            ;
                    4010            ; POPAS - Pop arg stack and copy variable to R3:R1
                    4011            ;
                    4012            ;***************************************************************
                    4013            ;
0FD3 12124F         4014    POPAS:  LCALL   INC_ASTKA
0FD6 021472         4015            JMP     VARCOP          ;COPY THE VARIABLE
                    4016            ;
0FD9 7A01           4017    AXTAL:  MOV     R2,#HIGH CXTAL
0FDB 7813           4018            MOV     R0,#LOW CXTAL
                    4019            ;
                    4020            ; fall thru
                    4021            ;
                    4022            ;***************************************************************
                    4023            ;
0FDD                4024    PUSHAS: ; Push the Value addressed by R2:R0 onto the arg stack
BASIC52S                                                                                                      PAGE 71

                    4025            ;
                    4026            ;***************************************************************
                    4027            ;
0FDD 12120B         4028            CALL    DEC_ASTKA
0FE0 D224           4029            SETB    ARGF            ;SAYS THAT SOMTHING IS ON THE STACK
0FE2 021472         4030            LJMP    VARCOP
                    4031            ;
                    4032            ;
                    4033            ;***************************************************************
                    4034            ;
0FE5                4035    ST_A:   ; Store at expression
                    4036            ;
                    4037            ;***************************************************************
                    4038            ;
0FE5 D18E           4039            ACALL   ONE             ;GET THE EXPRESSION
0FE7 80EA           4040            SJMP    POPAS           ;SAVE IT
                    4041            ;
                    4042            ;
                    4043            ;***************************************************************
                    4044            ;
0FE9                4045    LD_A:   ; Load at expression
                    4046            ;
                    4047            ;***************************************************************
                    4048            ;
0FE9 D18E           4049            ACALL   ONE             ;GET THE EXPRESSION
0FEB B1AD           4050            ACALL   X3120           ;FLIP ARGS
0FED 80EE           4051            SJMP    PUSHAS
                    4052            ;
                    4053            ;***************************************************************
                    4054            ;
0FEF                4055    CONST:  ; Get a constant fron the text
                    4056            ;
                    4057            ;***************************************************************
                    4058            ;
0FEF D1CD           4059            CALL    GC              ;FIRST SEE IF LITERAL
0FF1 B4D131         4060            CJNE    A,#T_ASC,C0C    ;SEE IF ASCII TOKEN
0FF4 D1CB           4061            CALL    IGC             ;GET THE CHARACTER AFTER TOKEN
0FF6 B42405         4062            CJNE    A,#'$',CN0      ;SEE IF A STRING
                    4063            ;
0FF9 511E           4064    CNX:    CALL    CSY             ;CALCULATE IT
0FFB 0213C0         4065            JMP     AXBYTE1         ;SAVE IT ON THE STACK
                    4066    ;
                    4067    ;*****************************************************************************
                    4068    ;****** Correct ASC(x) bug ***************************************************
                    4069    ;****** Wulf 5 ***************************************************************
                    4070    ;
                    4071    ;
0FFE 30E71B         4072    CN0:    jnb     acc.7,cn0t      ;jump if possibly ascii
1001 900175         4073            mov     dptr,#toktab
1004 FE             4074            mov     r6,a            ;save search token
1005 F4             4075    cn0t1:  cpl     a
1006 6013           4076            jz      cn0t4           ;jump if EOT
1008 E4             4077            clr     a
1009 93             4078            movc    a,@a+dptr       ;read token from token table
100A A3             4079            inc     dptr
100B B506F7         4080            cjne    a,r6b0,cn0t1    ;jump if wrong entry
                    4081            ;
100E FD             4082            mov     r5,a            ;save search token
BASIC52S                                                                                                      PAGE 72

100F E4             4083            clr     a
1010 93             4084    cn0t2:  movc    a,@a+dptr
1011 FE             4085            mov     r6,a            ;save first ascii of token text
                    4086            ;
1012 E4             4087    cn0t3:  clr     a
1013 93             4088            movc    a,@a+dptr
1014 A3             4089            inc     dptr
1015 30E7FA         4090            jnb     acc.7,cn0t3     ;jump if possibly ascii
                    4091            ;
1018 6D             4092            xrl     a,r5
1019 60F5           4093            jz      cn0t2           ;jump if same search token again
                    4094            ;
101B EE             4095    cn0t4:  mov     a,r6            ;get saved ascii
101C 1214B1         4096    CN0t:   CALL    TWO_R2          ;PUT IT ON THE STACK
                    4097    ;
                    4098    ;****** continue with original code: *****************************************
                    4099    ;
101F 120ED7         4100            CALL    GCI1            ;BUMP THE POINTER
1022 020CE3         4101            JMP     ERPAR           ;WASTE THE RIGHT PAREN
                    4102            ;
1025 120EA2         4103    C0C:    CALL    DP_T            ;GET THE TEXT POINTER
1028 121957         4104            CALL    GET_NUM         ;GET THE NUMBER
102B B4FF02         4105            CJNE    A,#0FFH,C1C     ;SEE IF NO NUMBER
102E D3             4106            SETB    C
102F 22             4107    C2C:    RET
                    4108            ;
1030 7006           4109    C1C:    JNZ     FPTST
1032 C3             4110            CLR     C
1033 D224           4111            SETB    ARGF
                    4112            ;
1035 020EB8         4113    C3C:    JMP     T_DP
                    4114            ;
1038 540B           4115    FPTST:  ANL     A,#00001011B    ;CHECK FOR ERROR
103A 60F3           4116            JZ      C2C             ;EXIT IF ZERO
                    4117            ;
                    4118            ; Handle the error condition
                    4119            ;
103C 901751         4120            MOV     DPTR,#E2X       ;DIVIDE BY ZERO
103F 30E003         4121            JNB     ACC.0,FPTST1    ;UNDERFLOW
1042 901804         4122            MOV     DPTR,#E7X
1045 30E103         4123    FPTST1: JNB     ACC.1,FPTS      ;OVERFLOW
1048 901F89         4124            MOV     DPTR,#E11X
                    4125            ;
104B 02188F         4126    FPTS:   JMP     ERROR
                    4127            ;
                    4128            ;***************************************************************
                    4129            ;
                    4130            ; The Command action routine - LIST
                    4131            ;
                    4132            ;***************************************************************
                    4133            ;
104E 120C19         4134    CLIST:  CALL    NUMC            ;SEE IF TO LINE PORT
1051 71CB           4135            ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
1053 120F35         4136            CALL    INTGER          ;SEE IF USER SUPPLIES LN
1056 E4             4137            CLR     A               ;LN = 0 TO START
1057 FB             4138            MOV     R3,A
1058 F9             4139            MOV     R1,A
1059 4014           4140            JC      CL1             ;START FROM ZERO
BASIC52S                                                                                                      PAGE 73

                    4141            ;
105B 121854         4142            CALL    TEMPD           ;SAVE THE START ADDTESS
105E 120ED5         4143            CALL    GCI             ;GET THE CHARACTER AFTER LIST
1061 B4E507         4144            CJNE    A,#T_SUB,CLIST1 ;CHECK FOR TERMINATION ADDRESS '-'
1064 514F           4145            ACALL   INC_ASTKA       ;WASTE 0FFFFH
1066 120F30         4146            LCALL   INTERR          ;GET TERMINATION ADDRESS
1069 91B4           4147            ACALL   TWO_EY          ;PUT TERMINATION ON THE ARG STACK
106B AB0F           4148    CLIST1: MOV     R3,TEMP5        ;GET THE START ADDTESS
106D A90E           4149            MOV     R1,TEMP4
                    4150            ;
106F 12058C         4151    CL1:    CALL    GETLIN          ;GET THE LINE NO IN R3:R1
1072 601E           4152            JZ      CL3             ;RET IF AT END
                    4153            ;
1074 1135           4154    CL2:    ACALL   C3C             ;SAVE THE ADDRESS
1076 A3             4155            INC     DPTR            ;POINT TO LINE NUMBER
1077 D152           4156            ACALL   PMTOP1          ;PUT LINE NUMBER ON THE STACK
1079 5108           4157            ACALL   CMPLK           ;COMPARE LN TO END ADDRESS
107B 4015           4158            JC      CL3             ;EXIT IF GREATER
107D 12078D         4159            CALL    BCK             ;CHECK FOR A CONTROL C
1080 510B           4160            ACALL   DEC_ASTKA       ;SAVE THE COMPARE ADDRESS
1082 120EA2         4161            CALL    DP_T            ;RESTORE ADDRESS
1085 11A3           4162            ACALL   UPPL            ;UN-PROCESS THE LINE
1087 1135           4163            ACALL   C3C             ;SAVE THE CR ADDRESS
1089 1194           4164            ACALL   CL6             ;PRINT IT
108B A3             4165            INC     DPTR            ;BUMP POINTER TO NEXT LINE
108C E0             4166            MOVX    A,@DPTR         ;GET LIN LENGTH
108D D5E0E4         4167            DJNZ    ACC,CL2         ;LOOP
1090 514F           4168            ACALL   INC_ASTKA       ;WASTE THE COMPARE BYTE
                    4169            ;
1092 E187           4170    CL3:    AJMP    CMND1           ;BACK TO COMMAND PROCESSOR
                    4171            ;
1094 900007         4172    CL6:    MOV     DPTR,#IBUF      ;PRINT IBUF
1097 1206C1         4173            CALL    PRNTCR          ;PRINT IT
109A 120EA2         4174            CALL    DP_T
                    4175            ;
109D 0206A5         4176    CL7:    JMP     CRLF
                    4177            ;
10A0 120579         4178    UPPL0:  LCALL   X31DP
                    4179            ;
                    4180            ;***************************************************************
                    4181            ;
                    4182            ;UPPL - UN PREPROCESS A LINE ADDRESSED BY DPTR INTO IBUF
                    4183            ;       RETURN SOURCE ADDRESS OF CR IN DPTR ON RETURN
                    4184            ;
                    4185            ;***************************************************************
                    4186            ;
10A3 7B00           4187    UPPL:   MOV     R3,#HIGH IBUF   ;POINT R3 AT HIGH IBUF
10A5 7907           4188            MOV     R1,#LOW IBUF    ;POINT R1 AT IBUF
10A7 A3             4189            INC     DPTR            ;SKIP OVER LINE LENGTH
                    4190    ;
                    4191    ;*****************************************************************************
                    4192    ;****** Elektor 1 Patch ******************************************************
                    4193    ;
                    4194    ;       ACALL   C3C             ;SAVE THE DPTR (DP_T)
                    4195    ;       CALL    L20DPI          ;PUT LINE NUMBER IN R2:R0
                    4196    ;       CALL    FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4197    ;       CALL    DP_T
                    4198    ;       INC     DPTR            ;BUMP DPTR PAST THE LINE NUMBER
BASIC52S                                                                                                      PAGE 74

                    4199    ;
                    4200    ;****** Proper code starts here: *********************************************
                    4201    ;
10A8 120573         4202            lcall   L20DPI          ;PUT LINE NUMBER IN R2:R0
10AB 12197F         4203            lcall   FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4204    ;
                    4205    ;****** continue with original code: *****************************************
                    4206    ;
10AE B90D00         4207    UPP0:   CJNE    R1,#LOW IBUF+6,UPP01
10B1 4022           4208    UPP01:  JC      UPP91           ;PUT SPACES IN TEXT
10B3 A3             4209            INC     DPTR            ;BUMP PAST LN HIGH
10B4 E0             4210            MOVX    A,@DPTR         ;GET USER TEXT
10B5 FE             4211            MOV     R6,A            ;SAVE A IN R6 FOR TOKE COMPARE
10B6 20E724         4212            JB      ACC.7,UPP1      ;IF TOKEN, PROCESS
10B9 B42000         4213            CJNE    A,#20H,UPP02    ;TRAP THE USER TOKENS
10BC 5003           4214    UPP02:  JNC     UPP03
10BE B40D1C         4215            CJNE    A,#CR,UPP1      ;DO IT IF NOT A CR
10C1 B42209         4216    UPP03:  CJNE    A,#'"',UPP9     ;SEE IF STRING
10C4 3121           4217            ACALL   UPP7            ;SAVE IT
10C6 3123           4218    UPP04:  ACALL   UPP8            ;GET THE NEXT CHARACTER AND SAVE IT
10C8 B422FB         4219            CJNE    A,#'"',UPP04    ;LOOP ON QUOTES
10CB 80E1           4220            SJMP    UPP0
                    4221            ;
10CD B43A09         4222    UPP9:   CJNE    A,#':',UPP1A    ;PUT A SPACE IN DELIMITER
10D0 311F           4223            ACALL   UPP7A
10D2 EE             4224            MOV     A,R6
10D3 3121           4225            ACALL   UPP7
10D5 311F           4226    UPP91:  ACALL   UPP7A
10D7 80D5           4227            SJMP    UPP0
                    4228            ;
10D9 3125           4229    UPP1A:  ACALL   UPP81           ;SAVE THE CHARACTER, UPDATE POINTER
10DB 80D1           4230            SJMP    UPP0            ;EXIT IF A CR, ELSE LOOP
                    4231            ;
10DD 1135           4232    UPP1:   ACALL   C3C             ;SAVE THE TEXT POINTER
10DF A22D           4233            MOV     C,XBIT
10E1 92D5           4234            MOV     F0,C            ;SAVE XBIT IN F0
10E3 900175         4235    UPP11:  MOV     DPTR,#TOKTAB    ;POINT AT TOKEN TABLE
10E6 30D503         4236            JNB     F0,UPP2
10E9 122078         4237            LCALL   2078H           ;SET UP DPTR FOR LOOKUP
                    4238            ;
10EC E4             4239    UPP2:   CLR     A               ;ZERO A FOR LOOKUP
10ED 93             4240            MOVC    A,@A+DPTR       ;GET TOKEN
10EE A3             4241            INC     DPTR            ;ADVANCE THE TOKEN POINTER
10EF B4FF05         4242            CJNE    A,#0FFH,UP_2    ;SEE IF DONE
10F2 10D5EE         4243            JBC     F0,UPP11        ;NOW DO NORMAL TABLE
10F5 E187           4244            AJMP    CMND1           ;EXIT IF NOT FOUND
                    4245            ;
10F7 B506F2         4246    UP_2:   CJNE    A,R6B0,UPP2     ;LOOP UNTIL THE SAME
                    4247            ;
10FA B4B000         4248    UP_3:   CJNE    A,#T_UOP,UP_4
10FD 5002           4249    UP_4:   JNC     UPP3
10FF 311F           4250            ACALL   UPP7A           ;PRINT THE SPACE IF OK
                    4251            ;
1101 E4             4252    UPP3:   CLR     A               ;DO LOOKUP
1102 93             4253            MOVC    A,@A+DPTR
1103 20E707         4254            JB      ACC.7,UPP4      ;EXIT IF DONE, ELSE SAVE
1106 6005           4255            JZ      UPP4            ;DONE IF ZERO
1108 3121           4256            ACALL   UPP7            ;SAVE THE CHARACTER
BASIC52S                                                                                                      PAGE 75

110A A3             4257            INC     DPTR
110B 80F4           4258            SJMP    UPP3            ;LOOP
                    4259            ;
110D 120EA2         4260    UPP4:   CALL    DP_T            ;GET IT BACK
1110 EE             4261            MOV     A,R6            ;SEE IF A REM TOKEN
1111 6496           4262            XRL     A,#T_REM
1113 7004           4263            JNZ     UPP42
1115 3123           4264    UPP41:  ACALL   UPP8
1117 80FC           4265            SJMP    UPP41
1119 5093           4266    UPP42:  JNC     UPP0            ;START OVER AGAIN IF NO TOKEN
111B 311F           4267            ACALL   UPP7A           ;PRINT THE SPACE IF OK
111D 808F           4268            SJMP    UPP0            ;DONE
                    4269            ;
111F 7420           4270    UPP7A:  MOV     A,#' '          ;OUTPUT A SPACE
                    4271            ;
1121 C144           4272    UPP7:   AJMP    PPL91           ;SAVE A
                    4273            ;
1123 A3             4274    UPP8:   INC     DPTR
1124 E0             4275            MOVX    A,@DPTR
1125 B40DF9         4276    UPP81:  CJNE    A,#CR,UPP7
1128 C130           4277            AJMP    PPL71
                    4278            ;
                    4279            ;**************************************************************
                    4280            ;
                    4281            ; This table contains all of the floating point constants
                    4282            ;
                    4283            ; The constants in ROM are stored "backwards" from the way
                    4284            ; basic normally treats floating point numbers. Instead of
                    4285            ; loading from the exponent and decrementing the pointer,
                    4286            ; ROM constants pointers load from the most significant
                    4287            ; digits and increment the pointers. This is done to 1) make
                    4288            ; arg stack loading faster and 2) compensate for the fact that
                    4289            ; no decrement data pointer instruction exsist.
                    4290            ;
                    4291            ; The numbers are stored as follows:
                    4292            ;
                    4293            ; BYTE X+5    = MOST SIGNIFICANT DIGITS IN BCD
                    4294            ; BYTE X+4    = NEXT MOST SIGNIFICANT DIGITS IN BCD
                    4295            ; BYTE X+3    = NEXT LEAST SIGNIFICANT DIGITS IN BCD
                    4296            ; BYTE X+2    = LEAST SIGNIFICANT DIGITS IN BCD
                    4297            ; BYTE X+1    = SIGN OF THE ABOVE MANTISSA 0 = +, 1 = -
                    4298            ; BYTE X      = EXPONENT IN TWO'S COMPLEMENT BINARY
                    4299            ;               ZERO EXPONENT = THE NUMBER ZERO
                    4300            ;
                    4301            ;**************************************************************
                    4302            ;
112A 7E             4303    ATTAB:  DB      128-2           ; ARCTAN LOOKUP
112B 00             4304            DB      00H
112C 57             4305            DB      57H
112D 22             4306            DB      22H
112E 66             4307            DB      66H
112F 28             4308            DB      28H
                    4309            ;
1130 7F             4310            DB      128-1
1131 01             4311            DB      01H
1132 37             4312            DB      37H
1133 57             4313            DB      57H
1134 16             4314            DB      16H
BASIC52S                                                                                                      PAGE 76

1135 16             4315            DB      16H
                    4316            ;
1136 7F             4317            DB      128-1
1137 00             4318            DB      00H
1138 14             4319            DB      14H
1139 96             4320            DB      96H
113A 90             4321            DB      90H
113B 42             4322            DB      42H
                    4323            ;
113C 7F             4324            DB      128-1
113D 01             4325            DB      01H
113E 40             4326            DB      40H
113F 96             4327            DB      96H
1140 28             4328            DB      28H
1141 75             4329            DB      75H
                    4330            ;
1142 80             4331            DB      128
1143 00             4332            DB      00H
1144 64             4333            DB      64H
1145 62             4334            DB      62H
1146 65             4335            DB      65H
1147 10             4336            DB      10H
                    4337            ;
1148 80             4338            DB      128
1149 01             4339            DB      01H
114A 99             4340            DB      99H
114B 88             4341            DB      88H
114C 20             4342            DB      20H
114D 14             4343            DB      14H
                    4344            ;
114E 80             4345            DB      128
114F 00             4346            DB      00H
1150 51             4347            DB      51H
1151 35             4348            DB      35H
1152 99             4349            DB      99H
1153 19             4350            DB      19H
                    4351            ;
1154 80             4352            DB      128
1155 01             4353            DB      01H
1156 45             4354            DB      45H
1157 31             4355            DB      31H
1158 33             4356            DB      33H
1159 33             4357            DB      33H
                    4358            ;
115A 81             4359            DB      129
115B 00             4360            DB      00H
115C 00             4361            DB      00H
115D 00             4362            DB      00H
115E 00             4363            DB      00H
115F 10             4364            DB      10H
                    4365            ;
1160 FF             4366            DB      0FFH            ;END OF TABLE
                    4367            ;
1161 81             4368    NTWO:   DB      129
1162 00             4369            DB      0
1163 00             4370            DB      0
1164 00             4371            DB      0
1165 00             4372            DB      0
BASIC52S                                                                                                      PAGE 77

1166 20             4373            DB      20H
                    4374    ;
                    4375    ;*****************************************************************************
                    4376    ;****** Use XTAL up to 47 MHz ************************************************
                    4377    ;****** Wulf 2 ***************************************************************
                    4378    ;
                    4379    ;TTIME: DB      128-4           ; CLOCK CALCULATION
                    4380    ;       DB      00H
                    4381    ;       DB      00H
                    4382    ;       DB      00H
                    4383    ;       DB      04H
                    4384    ;       DB      13H
                    4385    ;
1167 7B             4386    ttime:  db      128-5           ;New clock calculation for timer 0 in
1168 00             4387            db      00H             ;16 bit mode
1169 42             4388            db      42H
116A 60             4389            db      60H
116B 27             4390            db      27H
116C 16             4391            db      16H
                    4392    ;
                    4393    ;*****************************************************************************
                    4394    ;
                    4395            ;***************************************************************
                    4396            ;
                    4397            ; COSINE - Add pi/2 to stack, then fall thru to SIN
                    4398            ;
                    4399            ;***************************************************************
                    4400            ;
116D 3192           4401    ACOS:   ACALL   POTWO           ;PUT PI/2 ON THE STACK
116F F141           4402            ACALL   AADD            ;TOS = TOS+PI/2
                    4403            ;
                    4404            ;***************************************************************
                    4405            ;
                    4406            ; SINE - use taylor series to calculate sin function
                    4407            ;
                    4408            ;***************************************************************
                    4409            ;
1171 917F           4410    ASIN:   ACALL   PIPI            ;PUT PI ON THE STACK
1173 31B5           4411            ACALL   RV              ;REDUCE THE VALUE
1175 E546           4412            MOV     A,MT2           ;CALCULATE THE SIGN
1177 5401           4413            ANL     A,#01H          ;SAVE LSB
1179 6245           4414            XRL     MT1,A           ;SAVE SIGN IN MT1
117B 912C           4415            ACALL   CSTAKA          ;NOW CONVERT TO ONE QUADRANT
117D 3192           4416            ACALL   POTWO
117F 5108           4417            ACALL   CMPLK           ;DO COMPARE
1181 4004           4418            JC      ASIN1
1183 917F           4419            ACALL   PIPI
1185 F11C           4420            ACALL   ASUB
1187 718F           4421    ASIN1:  ACALL   AABS
1189 9016CE         4422            MOV     DPTR,#SINTAB    ;SET UP LOOKUP TABLE
118C 319B           4423            ACALL   POLYC           ;CALCULATE THE POLY
118E 31DA           4424            ACALL   STRIP
1190 21FC           4425            AJMP    SIN0
                    4426            ;
                    4427            ; Put PI/2 on the stack
                    4428            ;
1192 917F           4429    POTWO:  ACALL   PIPI            ;PUT PI ON THE STACK, NOW DIVIDE
                    4430            ;
BASIC52S                                                                                                      PAGE 78

1194 901161         4431    DBTWO:  MOV     DPTR,#NTWO
1197 9133           4432            ACALL   PUSHC
                    4433            ;MOV    A,#2            ;BY TWO
                    4434            ;ACALL  TWO_R2
1199 810A           4435            AJMP    ADIV
                    4436            ;
                    4437            ;*************************************************************
                    4438            ;
119B                4439    POLYC:  ; Expand a power series to calculate a polynomial
                    4440            ;
                    4441            ;*************************************************************
                    4442            ;
119B 912A           4443            ACALL   CSTAKA2         ;COPY THE STACK
119D 31B0           4444            ACALL   AMUL            ;SQUARE THE STACK
119F 9148           4445            ACALL   POP_T1          ;SAVE X*X
11A1 9133           4446            ACALL   PUSHC           ;PUT CONSTANT ON STACK
                    4447            ;
11A3 914F           4448    POLY1:  ACALL   PUSH_T1         ;PUT COMPUTED VALUE ON STACK
11A5 31B0           4449            ACALL   AMUL            ;MULTIPLY CONSTANT AND COMPUTED VALUE
11A7 9133           4450            ACALL   PUSHC           ;PUT NEXT CONSTANT ON STACK
11A9 F141           4451            ACALL   AADD            ;ADD IT TO THE OLD VALUE
11AB E4             4452            CLR     A               ;CHECK TO SEE IF DONE
11AC 93             4453            MOVC    A,@A+DPTR
11AD B4FFF3         4454            CJNE    A,#0FFH,POLY1   ;LOOP UNTIL DONE
                    4455            ;
11B0 121975         4456    AMUL:   LCALL   FP_BASE3
11B3 0138           4457            AJMP    FPTST
                    4458            ;
                    4459            ;*************************************************************
                    4460            ;
11B5                4461    RV:     ; Reduce a value for Trig and A**X functions
                    4462            ;
                    4463            ; value = (value/x - INT(value/x)) * x
                    4464            ;
                    4465            ;*************************************************************
                    4466            ;
11B5 916C           4467            ACALL   C2_T2           ;COPY TOS TO T2
11B7 910A           4468            ACALL   ADIV            ;TOS = TOS/TEMP2
11B9 718F           4469            ACALL   AABS            ;MAKE THE TOS A POSITIVE NUMBER
11BB F545           4470            MOV     MT1,A           ;SAVE THE SIGN
11BD 912A           4471            ACALL   CSTAKA2         ;COPY THE STACK TWICE
11BF 5123           4472            ACALL   IFIX            ;PUT THE NUMBER IN R3:R1
11C1 C003           4473            PUSH    R3B0            ;SAVE R3
11C3 8946           4474            MOV     MT2,R1          ;SAVE THE LS BYTE IN MT2
11C5 716D           4475            ACALL   AINT            ;MAKE THE TOS AN INTEGER
11C7 F11C           4476            ACALL   ASUB            ;TOS = TOS/T2 - INT(TOS/T2)
11C9 9156           4477            ACALL   P_T2            ;TOS = T2
11CB 31B0           4478            ACALL   AMUL            ;TOS = T2*(TOS/T2 - INT(TOS/T2)
11CD D003           4479            POP     R3B0            ;RESTORE R3
11CF 22             4480            RET                     ;EXIT
                    4481            ;
                    4482            ;**************************************************************
                    4483            ;
                    4484            ; TAN
                    4485            ;
                    4486            ;**************************************************************
                    4487            ;
11D0 912C           4488    ATAN:   ACALL   CSTAKA          ;DUPLACATE STACK
BASIC52S                                                                                                      PAGE 79

11D2 3171           4489            ACALL   ASIN            ;TOS = SIN(X)
11D4 915A           4490            ACALL   SWAP_ASTKA      ;TOS = X
11D6 316D           4491            ACALL   ACOS            ;TOS = COS(X)
11D8 810A           4492            AJMP    ADIV            ;TOS = SIN(X)/COS(X)
                    4493            ;
11DA 5153           4494    STRIP:  ACALL   SETREG          ;SETUP R0
11DC 7B01           4495            MOV     R3,#1           ;LOOP COUNT
11DE 6181           4496            AJMP    AI11            ;WASTE THE LSB
                    4497            ;
                    4498            ;************************************************************
                    4499            ;
                    4500            ; ARC TAN
                    4501            ;
                    4502            ;************************************************************
                    4503            ;
11E0 718F           4504    AATAN:  ACALL   AABS
11E2 F545           4505            MOV     MT1,A           ;SAVE THE SIGN
11E4 5153           4506            ACALL   SETREG          ;GET THE EXPONENT
11E6 247F           4507            ADD     A,#7FH          ;BIAS THE EXPONENT
11E8 922A           4508            MOV     UBIT,C          ;SAVE CARRY STATUS
11EA 5002           4509            JNC     AATAN1          ;SEE IF > 1
11EC 517C           4510            ACALL   RECIP           ;IF > 1, TAKE RECIP
11EE 90112A         4511    AATAN1: MOV     DPTR,#ATTAB     ;SET UP TO CALCULATE THE POLY
11F1 319B           4512            ACALL   POLYC           ;CALCULATE THE POLY
11F3 302A06         4513            JNB     UBIT,SIN0       ;JUMP IF NOT SET
11F6 71A1           4514            ACALL   ANEG            ;MAKE X POLY NEGATIVE
11F8 3192           4515            ACALL   POTWO           ;SUBTRACT PI/2
11FA F141           4516            ACALL   AADD
                    4517            ;
11FC E545           4518    SIN0:   MOV     A,MT1           ;GET THE SIGN
11FE 6019           4519            JZ      SRT
1200 61A1           4520            AJMP    ANEG
                    4521            ;
                    4522            ;*************************************************************
                    4523            ;
                    4524            ; FCOMP - COMPARE 0FFFFH TO TOS
                    4525            ;
                    4526            ;*************************************************************
                    4527            ;
1202 912C           4528    FCMP:   ACALL   CSTAKA          ;COPY THE STACK
1204 71CB           4529            ACALL   FSTK            ;MAKE THE TOS = 0FFFFH
1206 915A           4530            ACALL   SWAP_ASTKA      ;NOW COMPARE IS 0FFFFH - X
                    4531            ;
1208 021973         4532    CMPLK:  JMP     FP_BASE2        ;DO THE COMPARE
                    4533            ;
                    4534            ;*************************************************************
                    4535            ;
120B                4536    DEC_ASTKA:      ;Push ARG STACK and check for underflow
                    4537            ;
                    4538            ;*************************************************************
                    4539            ;
120B 74FA           4540            MOV     A,#-FPSIZ
120D 2509           4541            ADD     A,ASTKA
120F B43200         4542            CJNE    A,#LOW TM_TOP+6,DEC_ASTKA1
1212                4543    DEC_ASTKA1:
1212 4006           4544            JC      E4YY
1214 F509           4545            MOV     ASTKA,A
1216 F9             4546            MOV     R1,A
BASIC52S                                                                                                      PAGE 80

1217 7B01           4547            MOV     R3,#ASTKAH
                    4548            ;
1219 22             4549    SRT:    RET
                    4550            ;
121A 90037B         4551    E4YY:   MOV     DPTR,#EXA
121D 014B           4552            AJMP    FPTS            ;ARG STACK ERROR
                    4553            ;
                    4554            ;
121F 9133           4555    AXTAL3: ACALL   PUSHC           ;PUSH CONSTANT, THEN MULTIPLY
1221 31B0           4556            ACALL   AMUL
                    4557            ;
                    4558            ; Fall thru to IFIX
                    4559            ;
                    4560            ;***************************************************************
                    4561            ;
1223                4562    IFIX:   ; Convert a floating point number to an integer, put in R3:R1
                    4563            ;
                    4564            ;***************************************************************
                    4565            ;
1223 E4             4566            CLR     A               ;RESET THE START
1224 FB             4567            MOV     R3,A
1225 F9             4568            MOV     R1,A
1226 A809           4569            MOV     R0,ASTKA        ;GET THE ARG STACK
1228 75A001         4570            MOV     P2,#ASTKAH
122B E2             4571            MOVX    A,@R0           ;READ EXPONENT
122C C3             4572            CLR     C
122D 9481           4573            SUBB    A,#81H          ;BASE EXPONENT
122F FC             4574            MOV     R4,A            ;SAVE IT
1230 18             4575            DEC     R0              ;POINT AT SIGN
1231 E2             4576            MOVX    A,@R0           ;GET THE SIGN
1232 7056           4577            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1234 4019           4578            JC      INC_ASTKA       ;EXIT IF EXPONENT IS < 81H
1236 0C             4579            INC     R4              ;ADJUST LOOP COUNTER
1237 E8             4580            MOV     A,R0            ;BUMP THE POINTER REGISTER
1238 9405           4581            SUBB    A,#FPSIZ-1
123A F8             4582            MOV     R0,A
                    4583            ;
123B 08             4584    I2:     INC     R0              ;POINT AT DIGIT
123C E2             4585            MOVX    A,@R0           ;GET DIGIT
123D C4             4586            SWAP    A               ;FLIP
123E 121983         4587            CALL    FP_BASE10       ;ACCUMULATE
1241 4047           4588            JC      SQ_ERR
1243 DC02           4589            DJNZ    R4,I21
1245 8008           4590            SJMP    INC_ASTKA
1247 E2             4591    I21:    MOVX    A,@R0           ;GET DIGIT
1248 121983         4592            CALL    FP_BASE10
124B 403D           4593            JC      SQ_ERR
124D DCEC           4594            DJNZ    R4,I2
                    4595            ;
                    4596            ;************************************************************
                    4597            ;
124F                4598    INC_ASTKA:      ; Pop the ARG STACK and check for overflow
                    4599            ;
                    4600            ;************************************************************
                    4601            ;
124F 7406           4602            MOV     A,#FPSIZ        ;NUMBER TO POP
1251 8001           4603            SJMP    SETREG1
                    4604            ;
BASIC52S                                                                                                      PAGE 81

1253 E4             4605    SETREG: CLR     A               ;DON'T POP ANYTHING
1254 A809           4606    SETREG1:MOV     R0,ASTKA
1256 7A01           4607            MOV     R2,#ASTKAH
1258 8AA0           4608            MOV     P2,R2
125A 28             4609            ADD     A,R0
125B 40BD           4610            JC      E4YY
125D F509           4611            MOV     ASTKA,A
125F E2             4612            MOVX    A,@R0
1260 22             4613    A_D:    RET
                    4614            ;
                    4615            ;************************************************************
                    4616            ;
                    4617            ; EBIAS - Bias a number for E to the X calculations
                    4618            ;
                    4619            ;************************************************************
                    4620            ;
1261 9143           4621    EBIAS:  ACALL   PUSH_ONE
1263 31B5           4622            ACALL   RV
1265 BB0022         4623            CJNE    R3,#00H,SQ_ERR  ;ERROR IF R3 <> 0
1268 916C           4624            ACALL   C2_T2           ;TEMP 2 GETS FRACTIONS
126A 514F           4625            ACALL   INC_ASTKA
126C 9148           4626            ACALL   POP_T1
126E 9143           4627            ACALL   PUSH_ONE
                    4628            ;
1270 E546           4629    AELP:   MOV     A,MT2
1272 700E           4630            JNZ     AEL1
                    4631            ;
1274 E545           4632            MOV     A,MT1
1276 60E8           4633            JZ      A_D
1278 90011E         4634            MOV     DPTR,#FPT2-1
127B F0             4635            MOVX    @DPTR,A         ;MAKE THE FRACTIONS NEGATIVE
                    4636            ;
127C 9143           4637    RECIP:  ACALL   PUSH_ONE
127E 915A           4638            ACALL   SWAP_ASTKA
1280 810A           4639            AJMP    ADIV
                    4640            ;
1282 1546           4641    AEL1:   DEC     MT2
1284 914F           4642            ACALL   PUSH_T1
1286 31B0           4643            ACALL   AMUL
1288 80E6           4644            SJMP    AELP
                    4645            ;
128A 0209BD         4646    SQ_ERR: LJMP    E3XX            ;LINK TO BAD ARG
                    4647            ;
                    4648            ;************************************************************
                    4649            ;
                    4650            ; SQUARE ROOT
                    4651            ;
                    4652            ;************************************************************
                    4653            ;
128D 718F           4654    ASQR:   ACALL   AABS            ;GET THE SIGN
128F 70F9           4655            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1291 916C           4656            ACALL   C2_T2           ;COPY VARIABLE TO T2
1293 9148           4657            ACALL   POP_T1          ;SAVE IT IN T1
1295 7819           4658            MOV     R0,#LOW FPT1
1297 E2             4659            MOVX    A,@R0           ;GET EXPONENT
1298 6024           4660            JZ      SQR41           ;EXIT IF ZERO
129A 2480           4661            ADD     A,#128          ;BIAS THE EXPONENT
129C 5005           4662            JNC     SQR1            ;SEE IF < 80H
BASIC52S                                                                                                      PAGE 82

129E 03             4663            RR      A
129F 547F           4664            ANL     A,#127
12A1 8007           4665            SJMP    SQR2
                    4666            ;
12A3 F4             4667    SQR1:   CPL     A               ;FLIP BITS
12A4 04             4668            INC     A
12A5 03             4669            RR      A
12A6 547F           4670            ANL     A,#127          ;STRIP MSB
12A8 F4             4671            CPL     A
12A9 04             4672            INC     A
                    4673            ;
12AA 2480           4674    SQR2:   ADD     A,#128          ;BIAS EXPONENT
12AC F2             4675            MOVX    @R0,A           ;SAVE IT
                    4676            ;
                    4677            ; NEWGUESS = ( X/OLDGUESS + OLDGUESS) / 2
                    4678            ;
12AD 9156           4679    SQR4:   ACALL   P_T2            ;TOS = X
12AF 914F           4680            ACALL   PUSH_T1         ;PUT NUMBER ON STACK
12B1 910A           4681            ACALL   ADIV            ;TOS = X/GUESS
12B3 914F           4682            ACALL   PUSH_T1         ;PUT ON AGAIN
12B5 F141           4683            ACALL   AADD            ;TOS = X/GUESS + GUESS
12B7 3194           4684            ACALL   DBTWO           ;TOS = ( X/GUESS + GUESS ) / 2
12B9 711C           4685            ACALL   TEMP_COMP       ;SEE IF DONE
12BB 30D5EF         4686            JNB     F0,SQR4
                    4687            ;
12BE 814F           4688    SQR41:  AJMP    PUSH_T1         ;PUT THE ANSWER ON THE STACK
                    4689            ;
                    4690            ;*************************************************************
                    4691            ;
                    4692            ; NATURAL LOG
                    4693            ;
                    4694            ;*************************************************************
                    4695            ;
12C0 718F           4696    ALN:    ACALL   AABS            ;MAKE SURE THAT NUM IS POSITIVE
12C2 70C6           4697            JNZ     SQ_ERR          ;ERROR IF NOT
12C4 F546           4698            MOV     MT2,A           ;CLEAR FOR LOOP
12C6 08             4699            INC     R0              ;POINT AT EXPONENT
12C7 E2             4700            MOVX    A,@R0           ;READ THE EXPONENT
12C8 60C0           4701            JZ      SQ_ERR          ;ERROR IF EXPONENT IS ZERO
12CA B48100         4702            CJNE    A,#81H,ALN1     ;SEE IF NUM >= 1
12CD 922A           4703    ALN1:   MOV     UBIT,C          ;SAVE CARRY STATUS
12CF 4002           4704            JC      ALNL            ;TAKE RECIP IF >= 1
12D1 517C           4705            ACALL   RECIP
                    4706            ;
                    4707            ; Loop to reduce
                    4708            ;
12D3 912C           4709    ALNL:   ACALL   CSTAKA          ;COPY THE STACK FOR COMPARE
12D5 9143           4710            ACALL   PUSH_ONE        ;COMPARE NUM TO ONE
12D7 5108           4711            ACALL   CMPLK
12D9 501D           4712            JNC     ALNO            ;EXIT IF DONE
12DB 5153           4713            ACALL   SETREG          ;GET THE EXPONENT
12DD 2485           4714            ADD     A,#85H          ;SEE HOW BIG IT IS
12DF 500E           4715            JNC     ALN11           ;BUMP BY EXP(11) IF TOO SMALL
12E1 9130           4716            ACALL   PLNEXP          ;PUT EXP(1) ON STACK
12E3 7401           4717            MOV     A,#1            ;BUMP COUNT
                    4718            ;
12E5 2546           4719    ALNE:   ADD     A,MT2
12E7 40A1           4720            JC      SQ_ERR
BASIC52S                                                                                                      PAGE 83

12E9 F546           4721            MOV     MT2,A
12EB 31B0           4722            ACALL   AMUL            ;BIAS THE NUMBER
12ED 80E4           4723            SJMP    ALNL
                    4724            ;
12EF 9017F2         4725    ALN11:  MOV     DPTR,#EXP11     ;PUT EXP(11) ON STACK
12F2 9133           4726            ACALL   PUSHC
12F4 740B           4727            MOV     A,#11
12F6 80ED           4728            SJMP    ALNE
                    4729            ;
12F8 916C           4730    ALNO:   ACALL   C2_T2           ;PUT NUM IN TEMP 2
12FA 9143           4731            ACALL   PUSH_ONE        ;TOS = 1
12FC F11C           4732            ACALL   ASUB            ;TOS = X - 1
12FE 9156           4733            ACALL   P_T2            ;TOS = X
1300 9143           4734            ACALL   PUSH_ONE        ;TOS = 1
1302 F141           4735            ACALL   AADD            ;TOS = X + 1
1304 910A           4736            ACALL   ADIV            ;TOS = (X-1)/(X+1)
1306 9016A9         4737            MOV     DPTR,#LNTAB     ;LOG TABLE
1309 319B           4738            ACALL   POLYC
130B A3             4739            INC     DPTR            ;POINT AT LN(10)
130C 9133           4740            ACALL   PUSHC
130E 31B0           4741            ACALL   AMUL
1310 E546           4742            MOV     A,MT2           ;GET THE COUNT
1312 91B1           4743            ACALL   TWO_R2          ;PUT IT ON THE STACK
1314 F11C           4744            ACALL   ASUB            ;INT - POLY
1316 31DA           4745            ACALL   STRIP
1318 302A74         4746            JNB     UBIT,AABS
                    4747            ;
131B 22             4748    LN_D:   RET
                    4749            ;
                    4750            ;*************************************************************
                    4751            ;
131C                4752    TEMP_COMP:      ; Compare FPTEMP1 to TOS, FPTEMP1 gets TOS
                    4753            ;
                    4754            ;*************************************************************
                    4755            ;
131C 914F           4756            ACALL   PUSH_T1         ;SAVE THE TEMP
131E 915A           4757            ACALL   SWAP_ASTKA      ;TRADE WITH THE NEXT NUMBER
1320 912C           4758            ACALL   CSTAKA          ;COPY THE STACK
1322 9148           4759            ACALL   POP_T1          ;SAVE THE NEW NUMBER
1324 021973         4760            JMP     FP_BASE2        ;DO THE COMPARE
                    4761            ;
1327 9130           4762    AETOX:  ACALL   PLNEXP          ;EXP(1) ON TOS
1329 915A           4763            ACALL   SWAP_ASTKA      ;X ON TOS
                    4764            ;
132B                4765    AEXP:   ;EXPONENTIATION
                    4766            ;
132B 5161           4767            ACALL   EBIAS           ;T1=BASE,T2=FRACTIONS,TOS=INT MULTIPLIED
132D 90011F         4768            MOV     DPTR,#FPT2      ;POINT AT FRACTIONS
1330 E0             4769            MOVX    A,@DPTR         ;READ THE EXP OF THE FRACTIONS
1331 60E8           4770            JZ      LN_D            ;EXIT IF ZERO
1333 9156           4771            ACALL   P_T2            ;TOS = FRACTIONS
1335 914F           4772            ACALL   PUSH_T1         ;TOS = BASE
1337 5153           4773            ACALL   SETREG          ;SEE IF BASE IS ZERO
1339 6002           4774            JZ      AEXP1
133B 51C0           4775            ACALL   ALN             ;TOS = LN(BASE)
133D 31B0           4776    AEXP1:  ACALL   AMUL            ;TOS = FRACTIONS * LN(BASE)
133F 9130           4777            ACALL   PLNEXP          ;TOS = EXP(1)
1341 915A           4778            ACALL   SWAP_ASTKA      ;TOS = FRACTIONS * LN(BASE)
BASIC52S                                                                                                      PAGE 84

1343 5161           4779            ACALL   EBIAS           ;T2 = FRACTIONS, TOS = INT MULTIPLIED
1345 754600         4780            MOV     MT2,#00H        ;NOW CALCULATE E**X
1348 9143           4781            ACALL   PUSH_ONE
134A 912C           4782            ACALL   CSTAKA
134C 9148           4783            ACALL   POP_T1          ;T1 = 1
                    4784            ;
134E 9156           4785    AEXL:   ACALL   P_T2            ;TOS = FRACTIONS
1350 31B0           4786            ACALL   AMUL            ;TOS = FRACTIONS * ACCUMLATION
1352 0546           4787            INC     MT2             ;DO THE DEMONIATOR
1354 E546           4788            MOV     A,MT2
1356 91B1           4789            ACALL   TWO_R2
1358 910A           4790            ACALL   ADIV
135A 912C           4791            ACALL   CSTAKA          ;SAVE THE ITERATION
135C 914F           4792            ACALL   PUSH_T1         ;NOW ACCUMLATE
135E F141           4793            ACALL   AADD            ;ADD ACCUMLATION
1360 711C           4794            ACALL   TEMP_COMP
1362 30D5E9         4795            JNB     F0,AEXL         ;LOOP UNTIL DONE
                    4796            ;
1365 514F           4797            ACALL   INC_ASTKA
1367 914F           4798            ACALL   PUSH_T1
1369 31B0           4799            ACALL   AMUL            ;LAST INT MULTIPLIED
                    4800            ;
136B 21B0           4801    MU1:    AJMP    AMUL            ;FIRST INT MULTIPLIED
                    4802            ;
                    4803            ;***************************************************************
                    4804            ;
                    4805            ; integer operator - INT
                    4806            ;
                    4807            ;***************************************************************
                    4808            ;
136D 5153           4809    AINT:   ACALL   SETREG          ;SET UP THE REGISTERS, CLEAR CARRY
136F 9481           4810            SUBB    A,#129          ;SUBTRACT EXPONENT BIAS
1371 5007           4811            JNC     AI1             ;JUMP IF ACC > 81H
                    4812            ;
                    4813            ; Force the number to be a zero
                    4814            ;
1373 514F           4815            ACALL   INC_ASTKA       ;BUMP THE STACK
                    4816            ;
1375 9004E0         4817    P_Z:    MOV     DPTR,#ZRO       ;PUT ZERO ON THE STACK
1378 8133           4818            AJMP    PUSHC
                    4819            ;
137A 9407           4820    AI1:    SUBB    A,#7
137C 5010           4821            JNC     AI3
137E F4             4822            CPL     A
137F 04             4823            INC     A
1380 FB             4824            MOV     R3,A
1381 18             4825    AI11:   DEC     R0              ;POINT AT SIGN
                    4826            ;
1382 18             4827    AI2:    DEC     R0              ;NOW AT LSB'S
1383 E2             4828            MOVX    A,@R0           ;READ BYTE
1384 54F0           4829            ANL     A,#0F0H         ;STRIP NIBBLE
1386 F2             4830            MOVX    @R0,A           ;WRITE BYTE
1387 DB01           4831            DJNZ    R3,AI21
1389 22             4832            RET
138A E4             4833    AI21:   CLR     A
138B F2             4834            MOVX    @R0,A           ;CLEAR THE LOCATION
138C DBF4           4835            DJNZ    R3,AI2
                    4836            ;
BASIC52S                                                                                                      PAGE 85

138E 22             4837    AI3:    RET                     ;EXIT
                    4838            ;
                    4839            ;***************************************************************
                    4840            ;
138F                4841    AABS:   ; Absolute value - Make sign of number positive
                    4842            ;                  return sign in ACC
                    4843            ;
                    4844            ;***************************************************************
                    4845            ;
138F 71A1           4846            ACALL   ANEG            ;CHECK TO SEE IF + OR -
1391 7019           4847            JNZ     ALPAR           ;EXIT IF NON ZERO, BECAUSE THE NUM IS
1393 F2             4848            MOVX    @R0,A           ;MAKE A POSITIVE SIGN
1394 22             4849            RET
                    4850            ;
                    4851            ;***************************************************************
                    4852            ;
1395                4853    ASGN:   ; Returns the sign of the number 1 = +, -1 = -
                    4854            ;
                    4855            ;***************************************************************
                    4856            ;
1395 514F           4857            ACALL   INC_ASTKA       ;POP STACK, GET EXPONENT
1397 60DC           4858            JZ      P_Z             ;EXIT IF ZERO
1399 18             4859            DEC     R0              ;BUMP TO SIGN
139A E2             4860            MOVX    A,@R0           ;GET THE SIGN
139B FF             4861            MOV     R7,A            ;SAVE THE SIGN
139C 9143           4862            ACALL   PUSH_ONE        ;PUT A ONE ON THE STACK
139E EF             4863            MOV     A,R7            ;GET THE SIGN
139F 600B           4864            JZ      ALPAR           ;EXIT IF ZERO
                    4865            ;
                    4866            ; Fall thru to ANEG
                    4867            ;
                    4868            ;***************************************************************
                    4869            ;
13A1                4870    ANEG:   ; Flip the sign of the number on the tos
                    4871            ;
                    4872            ;***************************************************************
                    4873            ;
13A1 5153           4874            ACALL   SETREG
13A3 18             4875            DEC     R0              ;POINT AT THE SIGN OF THE NUMBER
13A4 6006           4876            JZ      ALPAR           ;EXIT IF ZERO
13A6 E2             4877            MOVX    A,@R0
13A7 6401           4878            XRL     A,#01H          ;FLIP THE SIGN
13A9 F2             4879            MOVX    @R0,A
13AA 6401           4880            XRL     A,#01H          ;RESTORE THE SIGN
                    4881            ;
13AC 22             4882    ALPAR:  RET
                    4883            ;
                    4884            ;***************************************************************
                    4885            ;
13AD                4886    ACBYTE: ; Read the ROM
                    4887            ;
                    4888            ;***************************************************************
                    4889            ;
13AD 5123           4890            ACALL   IFIX            ;GET EXPRESSION
13AF 120579         4891            CALL    X31DP           ;PUT R3:R1 INTO THE DP
13B2 E4             4892            CLR     A
13B3 93             4893            MOVC    A,@A+DPTR
13B4 81B1           4894            AJMP    TWO_R2
BASIC52S                                                                                                      PAGE 86

                    4895            ;
                    4896            ;***************************************************************
                    4897            ;
13B6                4898    ADBYTE: ; Read internal memory
                    4899            ;
                    4900            ;***************************************************************
                    4901            ;
13B6 5123           4902            ACALL   IFIX            ;GET THE EXPRESSION
13B8 1209D5         4903            CALL    R3CK            ;MAKE SURE R3 = 0
13BB E7             4904            MOV     A,@R1
13BC 81B1           4905            AJMP    TWO_R2
                    4906            ;
                    4907            ;***************************************************************
                    4908            ;
13BE                4909    AXBYTE: ; Read external memory
                    4910            ;
                    4911            ;***************************************************************
                    4912            ;
13BE 5123           4913            ACALL   IFIX            ;GET THE EXPRESSION
13C0 8BA0           4914    AXBYTE1:MOV     P2,R3
13C2 E3             4915            MOVX    A,@R1
13C3 81B1           4916            AJMP    TWO_R2
                    4917            ;
                    4918            ;***************************************************************
                    4919            ;
                    4920            ; The relational operators - EQUAL                        (=)
                    4921            ;                            GREATER THAN                 (>)
                    4922            ;                            LESS THAN                    (<)
                    4923            ;                            GREATER THAN OR EQUAL        (>=)
                    4924            ;                            LESS THAN OR EQUAL           (<=)
                    4925            ;                            NOT EQUAL                    (<>)
                    4926            ;
                    4927            ;***************************************************************
                    4928            ;
13C5 5108           4929    AGT:    ACALL   CMPLK
13C7 72D5           4930            ORL     C,F0            ;SEE IF EITHER IS A ONE
13C9 40AA           4931    AGT1:   JC      P_Z
                    4932            ;
13CB 9013D0         4933    FSTK:   MOV     DPTR,#FS
13CE 8133           4934            AJMP    PUSHC
                    4935            ;
13D0 85             4936    FS:     DB      85H
13D1 00             4937            DB      00H
13D2 00             4938            DB      00H
13D3 50             4939            DB      50H
13D4 53             4940            DB      53H
13D5 65             4941            DB      65H
                    4942            ;
13D6 5108           4943    ALT:    ACALL   CMPLK
13D8 B3             4944    ALT1:   CPL     C
13D9 80EE           4945            SJMP    AGT1
                    4946            ;
13DB 5108           4947    AEQ:    ACALL   CMPLK
13DD A2D5           4948    AEQ1:   MOV     C,F0
13DF 80F7           4949            SJMP    ALT1
                    4950            ;
13E1 5108           4951    ANE:    ACALL   CMPLK
13E3 B2D5           4952            CPL     F0
BASIC52S                                                                                                      PAGE 87

13E5 80F6           4953            SJMP    AEQ1
                    4954            ;
13E7 5108           4955    AGE:    ACALL   CMPLK
13E9 80DE           4956            SJMP    AGT1
                    4957            ;
13EB 5108           4958    ALE:    ACALL   CMPLK
13ED 72D5           4959            ORL     C,F0
13EF 80E7           4960            SJMP    ALT1
                    4961            ;
                    4962            ;***************************************************************
                    4963            ;
13F1                4964    ARND:   ; Generate a random number
                    4965            ;
                    4966            ;***************************************************************
                    4967            ;
13F1 90010C         4968            MOV     DPTR,#RCELL     ;GET THE BINARY SEED
13F4 1205BA         4969            CALL    L31DPI
13F7 E9             4970            MOV     A,R1
13F8 C3             4971            CLR     C
13F9 13             4972            RRC     A
13FA F8             4973            MOV     R0,A
13FB 7406           4974            MOV     A,#6
13FD 13             4975            RRC     A
13FE 29             4976            ADD     A,R1
13FF C8             4977            XCH     A,R0
1400 3B             4978            ADDC    A,R3
1401 FA             4979            MOV     R2,A
1402 1582           4980            DEC     DPL             ;SAVE THE NEW SEED
1404 9124           4981            ACALL   S20DP
1406 91B4           4982            ACALL   TWO_EY
1408 71CB           4983            ACALL   FSTK
                    4984            ;
140A 121977         4985    ADIV:   LCALL   FP_BASE4
140D 0138           4986            AJMP    FPTST
                    4987            ;
                    4988            ;***************************************************************
                    4989            ;
140F                4990    SONERR: ; ON ERROR Statement
                    4991            ;
                    4992            ;***************************************************************
                    4993            ;
140F 120F30         4994            LCALL   INTERR          ;GET THE LINE NUMBER
1412 D213           4995            SETB    ON_ERR
1414 900102         4996            MOV     DPTR,#ERRNUM    ;POINT AT THR ERROR LOCATION
1417 800B           4997            SJMP    S20DP
                    4998            ;
                    4999            ;
                    5000            ;**************************************************************
                    5001            ;
1419                5002    SONEXT: ; ON EXT1 Statement
                    5003            ;
                    5004            ;**************************************************************
                    5005            ;
1419 120F30         5006            LCALL   INTERR
141C D212           5007            SETB    INTBIT
141E 43A884         5008            ORL     IE,#10000100B   ;ENABLE INTERRUPTS
1421 900120         5009            MOV     DPTR,#INTLOC
                    5010            ;
BASIC52S                                                                                                      PAGE 88

1424 EA             5011    S20DP:  MOV     A,R2            ;SAVE R2:R0 @DPTR
1425 F0             5012            MOVX    @DPTR,A
1426 A3             5013            INC     DPTR
1427 E8             5014            MOV     A,R0
1428 F0             5015            MOVX    @DPTR,A
1429 22             5016            RET
                    5017            ;
                    5018            ;***************************************************************
                    5019            ;
                    5020            ; CASTAK - Copy and push another top of arg stack
                    5021            ;
                    5022            ;***************************************************************
                    5023            ;
142A 912C           5024    CSTAKA2:ACALL   CSTAKA          ;COPY STACK TWICE
                    5025            ;
142C 5153           5026    CSTAKA: ACALL   SETREG          ;SET UP R2:R0
142E 8023           5027            SJMP    PUSH_T12
                    5028            ;
1430 9017F8         5029    PLNEXP: MOV     DPTR,#EXP1
                    5030            ;
                    5031            ;***************************************************************
                    5032            ;
                    5033            ; PUSHC - Push constant on to the arg stack
                    5034            ;
                    5035            ;***************************************************************
                    5036            ;
1433 510B           5037    PUSHC:  ACALL   DEC_ASTKA
1435 8BA0           5038            MOV     P2,R3
1437 7B06           5039            MOV     R3,#FPSIZ       ;LOOP COUNTER
                    5040            ;
1439 E4             5041    PCL:    CLR     A               ;SET UP A
143A 93             5042            MOVC    A,@A+DPTR       ;LOAD IT
143B F3             5043            MOVX    @R1,A           ;SAVE IT
143C A3             5044            INC     DPTR            ;BUMP POINTERS
143D 19             5045            DEC     R1
143E DBF9           5046            DJNZ    R3,PCL          ;LOOP
                    5047            ;
1440 D224           5048            SETB    ARGF
1442 22             5049            RET                     ;EXIT
                    5050            ;
1443                5051    PUSH_ONE:;
                    5052            ;
1443 9016F2         5053            MOV     DPTR,#FPONE
1446 8133           5054            AJMP    PUSHC
                    5055            ;
1448                5056    POP_T1:
                    5057            ;
1448 7B01           5058            MOV     R3,#HIGH FPT1
144A 7919           5059            MOV     R1,#LOW FPT1
144C 020FD3         5060            JMP     POPAS
                    5061            ;
144F                5062    PUSH_T1:
                    5063            ;
144F 7819           5064            MOV     R0,#LOW FPT1
1451                5065    PUSH_T11:
1451 7A01           5066            MOV     R2,#HIGH FPT1
1453                5067    PUSH_T12:
1453 020FDD         5068            LJMP    PUSHAS
BASIC52S                                                                                                      PAGE 89

                    5069            ;
1456 781F           5070    P_T2:   MOV     R0,#LOW FPT2
1458 80F7           5071            SJMP    PUSH_T11                ;JUMP TO PUSHAS
                    5072            ;
                    5073            ;****************************************************************
                    5074            ;
145A                5075    SWAP_ASTKA:     ; SWAP TOS<>TOS-1
                    5076            ;
                    5077            ;****************************************************************
                    5078            ;
145A 5153           5079            ACALL   SETREG          ;SET UP R2:R0 AND P2
145C 7406           5080            MOV     A,#FPSIZ        ;PUT TOS+1 IN R1
145E FA             5081            MOV     R2,A
145F 28             5082            ADD     A,R0
1460 F9             5083            MOV     R1,A
                    5084            ;
1461 E2             5085    S_L:    MOVX    A,@R0
1462 FB             5086            MOV     R3,A
1463 E3             5087            MOVX    A,@R1
1464 F2             5088            MOVX    @R0,A
1465 EB             5089            MOV     A,R3
1466 F3             5090            MOVX    @R1,A
1467 19             5091            DEC     R1
1468 18             5092            DEC     R0
1469 DAF6           5093            DJNZ    R2,S_L
146B 22             5094            RET
                    5095            ;
146C 5153           5096    C2_T2:  ACALL   SETREG          ;SET UP R2:R0
146E 7B01           5097            MOV     R3,#HIGH FPT2
1470 791F           5098            MOV     R1,#LOW FPT2    ;TEMP VALUE
                    5099            ;
                    5100            ; Fall thru
                    5101            ;
                    5102            ;***************************************************************
                    5103            ;
                    5104            ; VARCOP - Copy a variable from R2:R0 to R3:R1
                    5105            ;
                    5106            ;***************************************************************
                    5107            ;
1472 7C06           5108    VARCOP: MOV     R4,#FPSIZ       ;LOAD THE LOOP COUNTER
                    5109            ;
1474 8AA0           5110    V_C:    MOV     P2,R2           ;SET UP THE PORTS
1476 E2             5111            MOVX    A,@R0           ;READ THE VALUE
1477 8BA0           5112            MOV     P2,R3           ;PORT TIME AGAIN
1479 F3             5113            MOVX    @R1,A           ;SAVE IT
147A B18B           5114            ACALL   DEC3210         ;BUMP POINTERS
147C DCF6           5115            DJNZ    R4,V_C          ;LOOP
147E 22             5116            RET                     ;EXIT
                    5117            ;
147F 9017FE         5118    PIPI:   MOV     DPTR,#PIE
1482 8133           5119            AJMP    PUSHC
                    5120            ;
                    5121            ;***************************************************************
                    5122            ;
                    5123            ; The logical operators ANL, ORL, XRL, NOT
                    5124            ;
                    5125            ;***************************************************************
                    5126            ;
BASIC52S                                                                                                      PAGE 90

1484 91A1           5127    AANL:   ACALL   TWOL            ;GET THE EXPRESSIONS
1486 EB             5128            MOV     A,R3            ;DO THE AND
1487 5F             5129            ANL     A,R7
1488 FA             5130            MOV     R2,A
1489 E9             5131            MOV     A,R1
148A 5E             5132            ANL     A,R6
148B 8026           5133            SJMP    TWO_EX
                    5134            ;
148D 91A1           5135    AORL:   ACALL   TWOL            ;SAME THING FOR OR
148F EB             5136            MOV     A,R3
1490 4F             5137            ORL     A,R7
1491 FA             5138            MOV     R2,A
1492 E9             5139            MOV     A,R1
1493 4E             5140            ORL     A,R6
1494 801D           5141            SJMP    TWO_EX
                    5142            ;
1496 71CB           5143    ANOT:   ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
                    5144            ;
1498 91A1           5145    AXRL:   ACALL   TWOL
149A EB             5146            MOV     A,R3
149B 6F             5147            XRL     A,R7
149C FA             5148            MOV     R2,A
149D E9             5149            MOV     A,R1
149E 6E             5150            XRL     A,R6
149F 8012           5151            SJMP    TWO_EX
                    5152            ;
14A1 5123           5153    TWOL:   ACALL   IFIX
14A3 AF03           5154            MOV     R7,R3B0
14A5 AE01           5155            MOV     R6,R1B0
14A7 4123           5156            AJMP    IFIX
                    5157            ;
                    5158            ;*************************************************************
                    5159            ;
14A9                5160    AGET:   ; READ THE BREAK BYTE AND PUT IT ON THE ARG STACK
                    5161            ;
                    5162            ;*************************************************************
                    5163            ;
14A9 900100         5164            MOV     DPTR,#GTB       ;GET THE BREAK BYTE
14AC E0             5165            MOVX    A,@DPTR
14AD 101801         5166            JBC     GTRD,TWO_R2
14B0 E4             5167            CLR     A
                    5168            ;
14B1 7A00           5169    TWO_R2: MOV     R2,#00H         ;ACC GOES TO STACK
                    5170            ;
                    5171            ;
14B3 F8             5172    TWO_EX: MOV     R0,A            ;R2:ACC GOES TO STACK
                    5173            ;
                    5174            ;
14B4 D224           5175    TWO_EY: SETB    ARGF            ;R2:R0 GETS PUT ON THE STACK
14B6 021987         5176            JMP     FP_BASE12       ;DO IT
                    5177            ;
                    5178            ;*************************************************************
                    5179            ;
                    5180            ; Put directs onto the stack
                    5181            ;
                    5182            ;**************************************************************
                    5183            ;
14B9 E5A8           5184    A_IE:   MOV     A,IE            ;IE
BASIC52S                                                                                                      PAGE 91

14BB 80F4           5185            SJMP    TWO_R2
                    5186            ;
14BD E5B8           5187    A_IP:   MOV     A,IP            ;IP
14BF 80F0           5188            SJMP    TWO_R2
                    5189            ;
14C1 AA8C           5190    ATIM0:  MOV     R2,TH0          ;TIMER 0
14C3 A88A           5191            MOV     R0,TL0
14C5 80ED           5192            SJMP    TWO_EY
                    5193            ;
14C7 AA8D           5194    ATIM1:  MOV     R2,TH1          ;TIMER 1
14C9 A88B           5195            MOV     R0,TL1
14CB 80E7           5196            SJMP    TWO_EY
                    5197            ;
14CD AACD           5198    ATIM2:  MOV     R2,TH2
14CF A8CC           5199            MOV     R0,TL2
                    5200    ;       DB      0AAH            ;MOV R2 DIRECT OP CODE
                    5201    ;       DB      0CDH            ;T2 HIGH
                    5202    ;       DB      0A8H            ;MOV R0 DIRECT OP CODE
                    5203    ;       DB      0CCH            ;T2 LOW
14D1 80E1           5204            SJMP    TWO_EY          ;TIMER 2
                    5205            ;
14D3 E5C8           5206    AT2CON: MOV     A,T2CON
                    5207    ;       DB      0E5H            ;MOV A,DIRECT OPCODE
                    5208    ;       DB      0C8H            ;T2CON LOCATION
14D5 80DA           5209            SJMP    TWO_R2
                    5210            ;
14D7 E588           5211    ATCON:  MOV     A,TCON          ;TCON
14D9 80D6           5212            SJMP    TWO_R2
                    5213            ;
14DB E589           5214    ATMOD:  MOV     A,TMOD          ;TMOD
14DD 80D2           5215            SJMP    TWO_R2
                    5216            ;
14DF AACB           5217    ARCAP2: MOV     R2,RCAPH2
14E1 A8CA           5218            MOV     R0,RCAPL2
                    5219    ;       DB      0AAH            ;MOV R2, DIRECT OP CODE
                    5220    ;       DB      0CBH            ;RCAP2H LOCATION
                    5221    ;       DB      0A8H            ;MOV R0, DIRECT OP CODE
                    5222    ;       DB      0CAH            ;R2CAPL LOCATION
14E3 80CF           5223            SJMP    TWO_EY
                    5224            ;
14E5 E590           5225    AP1:    MOV     A,P1            ;GET P1
14E7 80C8           5226            SJMP    TWO_R2          ;PUT IT ON THE STACK
                    5227            ;
14E9 E587           5228    APCON:  MOV     A,PCON
                    5229    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    5230    ;       DB      87H             ;ADDRESS OF PCON
14EB 80C4           5231            SJMP    TWO_R2          ;PUT PCON ON THE STACK
                    5232            ;
                    5233            ;***************************************************************
                    5234            ;
                    5235            ;THIS IS THE LINE EDITOR
                    5236            ;
                    5237            ;TAKE THE PROCESSED LINE IN IBUF AND INSERT IT INTO THE
                    5238            ;BASIC TEXT FILE.
                    5239            ;
                    5240            ;***************************************************************
                    5241            ;
14ED 02056E         5242    LINE0:  LJMP    NOGO            ;CAN'T EDIT A ROM
BASIC52S                                                                                                      PAGE 92

                    5243            ;
14F0 E513           5244    LINE:   MOV     A,BOFAH
14F2 B402F8         5245            CJNE    A,#HIGH PSTART,LINE0
14F5 1205A9         5246            CALL    G4              ;GET END ADDRESS FOR EDITING
14F8 AC82           5247            MOV     R4,DPL
14FA AD83           5248            MOV     R5,DPH
14FC AB0F           5249            MOV     R3,TEMP5        ;GET HIGH ORDER IBLN
14FE A90E           5250            MOV     R1,TEMP4        ;LOW ORDER IBLN
                    5251            ;
1500 12058C         5252            CALL    GETLIN          ;FIND THE LINE
1503 7012           5253            JNZ     INSR            ;INSERT IF NOT ZERO, ELSE APPEND
                    5254            ;
                    5255            ;APPEND THE LINE AT THE END
                    5256            ;
1505 E50D           5257            MOV     A,TEMP3         ;PUT IBCNT IN THE ACC
1507 B40401         5258            CJNE    A,#4H,LINE1     ;SEE IF NO ENTRY
150A 22             5259            RET                     ;RET IF NO ENTRY
                    5260            ;
150B B1A8           5261    LINE1:  ACALL   FULL            ;SEE IF ENOUGH SPACE LEFT
150D AA05           5262            MOV     R2,R5B0         ;PUT END ADDRESS A INTO TRANSFER
150F A804           5263            MOV     R0,R4B0         ;REGISTERS
1511 B166           5264            ACALL   IMOV            ;DO THE BLOCK MOVE
                    5265            ;
1513 7401           5266    UE:     MOV     A,#EOF          ;SAVE EOF CHARACTER
1515 A199           5267            AJMP    TBR
                    5268            ;
                    5269            ;INSERT A LINE INTO THE FILE
                    5270            ;
1517 FF             5271    INSR:   MOV     R7,A            ;SAVE IT IN R7
1518 121854         5272            CALL    TEMPD           ;SAVE INSERATION ADDRESS
151B E50D           5273            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN THE ACC
151D 4009           5274            JC      LTX             ;JUMP IF NEW LINE # NOT = OLD LINE #
151F B40401         5275            CJNE    A,#04H,INSR1    ;SEE IF NULL
1522 E4             5276            CLR     A
                    5277            ;
1523 9F             5278    INSR1:  SUBB    A,R7            ;SUBTRACT LINE COUNT FROM ACC
1524 6036           5279            JZ      LIN1            ;LINE LENGTHS EQUAL
1526 401F           5280            JC      GTX             ;SMALLER LINE
                    5281            ;
                    5282            ;EXPAND FOR A NEW LINE OR A LARGER LINE
                    5283            ;
1528 FF             5284    LTX:    MOV     R7,A            ;SAVE A IN R7
1529 E50D           5285            MOV     A,TEMP3         ;GET THE COUNT IN THE ACC
152B B40401         5286            CJNE    A,#04H,LTX1     ;DO NO INSERTATION IF NULL LINE
152E 22             5287            RET                     ;EXIT IF IT IS
                    5288            ;
152F EF             5289    LTX1:   MOV     A,R7            ;GET THE COUNT BACK - DELTA IN A
1530 B1A8           5290            ACALL   FULL            ;SEE IF ENOUGH MEMORY NEW EOFA IN R3:R1
1532 12184D         5291            CALL    DTEMP           ;GET INSERATION ADDRESS
1535 B19D           5292            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
1537 120DAD         5293            CALL    X3120
153A A904           5294            MOV     R1,R4B0         ;EOFA LOW
153C AB05           5295            MOV     R3,R5B0         ;EOFA HIGH
153E 0E             5296            INC     R6              ;INCREMENT BYTE COUNT
153F BE0001         5297            CJNE    R6,#00,LTX2     ;NEED TO BUMP HIGH BYTE?
1542 0F             5298            INC     R7
                    5299            ;
1543 B181           5300    LTX2:   ACALL   RMOV            ;GO DO THE INSERTION
BASIC52S                                                                                                      PAGE 93

1545 8015           5301            SJMP    LIN1            ;INSERT THE CURRENT LINE
                    5302            ;
1547 F4             5303    GTX:    CPL     A               ;FLIP ACC
1548 04             5304            INC     A               ;TWOS COMPLEMENT
1549 1205DE         5305            CALL    ADDPTR          ;DO THE ADDITION
154C B19D           5306            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
154E A982           5307            MOV     R1,DPL          ;SET UP THE REGISTERS
1550 AB83           5308            MOV     R3,DPH
1552 AA0F           5309            MOV     R2,TEMP5        ;PUT INSERTATION ADDRESS IN THE RIGHT REG
1554 A80E           5310            MOV     R0,TEMP4
1556 6002           5311            JZ      GTX1            ;IF ACC WAS ZERO FROM NMOV, JUMP
1558 B16D           5312            ACALL   LMOV            ;IF NO ZERO DO A LMOV
                    5313            ;
155A B113           5314    GTX1:   ACALL   UE              ;SAVE NEW END ADDRESS
                    5315            ;
155C AA0F           5316    LIN1:   MOV     R2,TEMP5        ;GET THE INSERTATION ADDRESS
155E A80E           5317            MOV     R0,TEMP4
1560 E50D           5318            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN ACC
1562 B40401         5319            CJNE    A,#04H,IMOV     ;SEE IF NULL
1565 22             5320            RET                     ;EXIT IF NULL
                    5321            ;
                    5322            ;***************************************************************
                    5323            ;
                    5324            ;INSERT A LINE AT ADDRESS R2:R0
                    5325            ;
                    5326            ;***************************************************************
                    5327            ;
1566 E4             5328    IMOV:   CLR     A               ;TO SET UP
1567 7904           5329            MOV     R1,#LOW IBCNT   ;INITIALIZE THE REGISTERS
1569 FB             5330            MOV     R3,A
156A AE0D           5331            MOV     R6,TEMP3        ;PUT THE BYTE COUNT IN R6 FOR LMOV
156C FF             5332            MOV     R7,A            ;PUT A 0 IN R7 FOR LMOV
                    5333            ;
                    5334            ;***************************************************************
                    5335            ;
                    5336            ;COPY A BLOCK FROM THE BEGINNING
                    5337            ;
                    5338            ;R2:R0 IS THE DESTINATION ADDRESS
                    5339            ;R3:R1 IS THE SOURCE ADDRESS
                    5340            ;R7:R6 IS THE COUNT REGISTER
                    5341            ;
                    5342            ;***************************************************************
                    5343            ;
156D B196           5344    LMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
156F B176           5345            ACALL   INC3210         ;BUMP THE POINTER
1571 D147           5346            ACALL   DEC76           ;BUMP R7:R6
1573 70F8           5347            JNZ     LMOV            ;LOOP
1575 22             5348            RET                     ;GO BACK TO CALLING ROUTINE
                    5349            ;
1576 08             5350    INC3210:INC     R0
1577 B80001         5351            CJNE    R0,#00H,INC3211
157A 0A             5352            INC     R2
                    5353            ;
157B 09             5354    INC3211:INC     R1
157C B90001         5355            CJNE    R1,#00H,INC3212
157F 0B             5356            INC     R3
1580 22             5357    INC3212:RET
                    5358            ;
BASIC52S                                                                                                      PAGE 94

                    5359            ;***************************************************************
                    5360            ;
                    5361            ;COPY A BLOCK STARTING AT THE END
                    5362            ;
                    5363            ;R2:R0 IS THE DESTINATION ADDRESS
                    5364            ;R3:R1 IS THE SOURCE ADDRESS
                    5365            ;R6:R7 IS THE COUNT REGISTER
                    5366            ;
                    5367            ;***************************************************************
                    5368            ;
1581 B196           5369    RMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
1583 B18B           5370            ACALL   DEC3210         ;DEC THE LOCATIONS
1585 D147           5371            ACALL   DEC76           ;BUMP THE COUNTER
1587 70F8           5372            JNZ     RMOV            ;LOOP
                    5373            ;
1589 00             5374    DEC_R:  NOP                     ;CREATE EQUAL TIMING
158A 22             5375            RET                     ;EXIT
                    5376            ;
158B 18             5377    DEC3210:DEC     R0              ;BUMP THE POINTER
158C B8FF01         5378            CJNE    R0,#0FFH,DEC3212;SEE IF OVERFLOWED
158F 1A             5379    DEC3211:DEC     R2              ;BUMP THE HIGH BYTE
1590 19             5380    DEC3212:DEC     R1              ;BUMP THE POINTER
1591 B9FFF5         5381            CJNE    R1,#0FFH,DEC_R  ;SEE IF OVERFLOWED
1594 1B             5382            DEC     R3              ;CHANGE THE HIGH BYTE
1595 22             5383            RET                     ;EXIT
                    5384            ;
                    5385            ;***************************************************************
                    5386            ;
                    5387            ;TBYTE - TRANSFER A BYTE
                    5388            ;
                    5389            ;***************************************************************
                    5390            ;
1596 8BA0           5391    TBYTE:  MOV     P2,R3           ;OUTPUT SOURCE REGISTER TO PORT
1598 E3             5392            MOVX    A,@R1           ;PUT BYTE IN ACC
                    5393            ;
1599 8AA0           5394    TBR:    MOV     P2,R2           ;OUTPUT DESTINATION TO PORT
159B F2             5395            MOVX    @R0,A           ;SAVE THE BYTE
159C 22             5396            RET                     ;EXIT
                    5397            ;
                    5398            ;***************************************************************
                    5399            ;
                    5400            ;NMOV - R7:R6 = END ADDRESS - DPTR
                    5401            ;
                    5402            ;ACC GETS CLOBBERED
                    5403            ;
                    5404            ;***************************************************************
                    5405            ;
159D EC             5406    NMOV:   MOV     A,R4            ;THE LOW BYTE OF EOFA
159E C3             5407            CLR     C               ;CLEAR THE CARRY FOR SUBB
159F 9582           5408            SUBB    A,DPL           ;SUBTRACT DATA POINTER LOW
15A1 FE             5409            MOV     R6,A            ;PUT RESULT IN R6
15A2 ED             5410            MOV     A,R5            ;HIGH BYTE OF EOFA
15A3 9583           5411            SUBB    A,DPH           ;SUBTRACT DATA POINTER HIGH
15A5 FF             5412            MOV     R7,A            ;PUT RESULT IN R7
15A6 4E             5413            ORL     A,R6            ;SEE IF ZERO
15A7 22             5414    NMOV1:  RET                     ;EXIT
                    5415            ;
                    5416            ;***************************************************************
BASIC52S                                                                                                      PAGE 95

                    5417            ;
                    5418            ;CHECK FOR A FILE OVERFLOW
                    5419            ;LEAVES THE NEW END ADDRESS IN R3:R1
                    5420            ;A HAS THE INCREASE IN SIZE
                    5421            ;
                    5422            ;***************************************************************
                    5423            ;
15A8 2C             5424    FULL:   ADD     A,R4            ;ADD A TO END ADDRESS
15A9 F9             5425            MOV     R1,A            ;SAVE IT
15AA E4             5426            CLR     A
15AB 3D             5427            ADDC    A,R5            ;ADD THE CARRY
15AC FB             5428            MOV     R3,A
15AD 900104         5429            MOV     DPTR,#VARTOP    ;POINT AT VARTOP
                    5430            ;
15B0 1205CC         5431    FUL1:   CALL    DCMPX           ;COMPARE THE TWO
15B3 40F2           5432            JC      NMOV1           ;OUT OF ROOM
                    5433            ;
15B5 901816         5434    TB:     MOV     DPTR,#E5X       ;OUT OF MEMORY
15B8 014B           5435            AJMP    FPTS
                    5436            ;
                    5437            ;***************************************************************
                    5438            ;
                    5439            ; PP - Preprocesses the line in IBUF back into IBUF
                    5440            ;      sets F0 if no line number
                    5441            ;      leaves the correct length of processed line in IBCNT
                    5442            ;      puts the line number in IBLN
                    5443            ;      wastes the text address TXAL and TXAH
                    5444            ;
                    5445            ;***************************************************************
                    5446            ;
15BA F16C           5447    PP:     ACALL   T_BUF           ;TXA GETS IBUF
15BC 120F35         5448            CALL    INTGER          ;SEE IF A NUMBER PRESENT
15BF 121854         5449            CALL    TEMPD           ;SAVE THE INTEGER IN TEMP5:TEMP4
15C2 92D5           5450            MOV     F0,C            ;SAVE INTEGER IF PRESENT
15C4 900005         5451            MOV     DPTR,#IBLN      ;SAVE THE LINE NUMBER, EVEN IF NONE
15C7 9124           5452            ACALL   S20DP
15C9 A808           5453            MOV     R0,TXAL         ;TEXT POINTER
15CB 7907           5454            MOV     R1,#LOW IBUF    ;STORE POINTER
                    5455            ;
                    5456            ; Now process the line back into IBUF
                    5457            ;
15CD C224           5458    PPL:    CLR     ARGF            ;FIRST PASS DESIGNATOR
15CF 900175         5459            MOV     DPTR,#TOKTAB    ;POINT DPTR AT LOOK UP TABLE
                    5460            ;
15D2 8805           5461    PPL1:   MOV     R5B0,R0         ;SAVE THE READ POINTER
15D4 E4             5462            CLR     A               ;ZERO A FOR LOOKUP
15D5 93             5463            MOVC    A,@A+DPTR       ;GET THE TOKEN
15D6 FF             5464            MOV     R7,A            ;SAVE TOKEN IN CASE OF MATCH
                    5465            ;
15D7 E2             5466    PPL2:   MOVX    A,@R0           ;GET THE USER CHARACTER
15D8 FB             5467            MOV     R3,A            ;SAVE FOR REM
15D9 B46100         5468            CJNE    A,#'a',PPL21
15DC 4007           5469    PPL21:  JC      PPX             ;CONVERT LOWER TO UPPER CASE
15DE B47B00         5470            CJNE    A,#('z'+1),PPL22
15E1 5002           5471    PPL22:  JNC     PPX
15E3 C2E5           5472            CLR     ACC.5
                    5473            ;
15E5 FA             5474    PPX:    MOV     R2,A
BASIC52S                                                                                                      PAGE 96

15E6 F2             5475            MOVX    @R0,A           ;SAVE UPPER CASE
15E7 A3             5476            INC     DPTR            ;BUMP THE LOOKUP POINTER
15E8 E4             5477            CLR     A
15E9 93             5478            MOVC    A,@A+DPTR
15EA B50203         5479            CJNE    A,R2B0,PPL3     ;LEAVE IF NOT THE SAME
15ED 08             5480            INC     R0              ;BUMP THE USER POINTER
15EE 80E7           5481            SJMP    PPL2            ;CONTINUE TO LOOP
                    5482            ;
15F0 20E72F         5483    PPL3:   JB      ACC.7,PPL6      ;JUMP IF FOUND MATCH
15F3 602D           5484            JZ      PPL6            ;USER MATCH
                    5485            ;
                    5486            ;
                    5487            ; Scan to the next TOKTAB entry
                    5488            ;
15F5 A3             5489    PPL4:   INC     DPTR            ;ADVANCE THE POINTER
15F6 E4             5490            CLR     A               ;ZERO A FOR LOOKUP
15F7 93             5491            MOVC    A,@A+DPTR       ;LOAD A WITH TABLE
15F8 20E703         5492            JB      ACC.7,PPL41     ;KEEP SCANNING IF NOT A RESERVED WORD
15FB 70F8           5493            JNZ     PPL4
15FD A3             5494            INC     DPTR
                    5495            ;
                    5496            ; See if at the end of TOKTAB
                    5497            ;
15FE A805           5498    PPL41:  MOV     R0,R5B0         ;RESTORE THE POINTER
1600 B4FFCF         5499            CJNE    A,#0FFH,PPL1    ;SEE IF END OF TABLE
                    5500            ;
                    5501            ; Character not in TOKTAB, so see what it is
                    5502            ;
1603 BA2003         5503            CJNE    R2,#' ',PPLX    ;SEE IF A SPACE
1606 08             5504            INC     R0              ;BUMP USER POINTER
1607 80C4           5505            SJMP    PPL             ;TRY AGAIN
                    5506            ;
1609 302D0A         5507    PPLX:   JNB     XBIT,PPLY       ;EXTERNAL TRAP
160C 202407         5508            JB      ARGF,PPLY
160F D224           5509            SETB    ARGF            ;SAYS THAT THE USER HAS TABLE
1611 122078         5510            LCALL   2078H           ;SET UP POINTER
1614 A1D2           5511            AJMP    PPL1
                    5512            ;
1616 D12F           5513    PPLY:   ACALL   PPL7            ;SAVE CHARACTER, EXIT IF A CR
1618 B422B2         5514            CJNE    A,#'"',PPL      ;SEE IF QUOTED STRING, START AGAIN IF NOT
                    5515            ;
                    5516            ; Just copy a quoted string
                    5517            ;
161B D12F           5518    PPLY1:  ACALL   PPL7            ;SAVE THE CHARACTER, TEST FOR CR
161D B422FB         5519            CJNE    A,#'"',PPLY1    ;IS THERE AN ENDQUOTE, IF NOT LOOP
1620 80AB           5520            SJMP    PPL             ;DO IT AGAIN IF ENDQUOTE
                    5521            ;
1622 EF             5522    PPL6:   MOV     A,R7            ;GET THE TOKEN
1623 D144           5523            ACALL   PPL91           ;SAVE THE TOKEN
1625 B496A5         5524            CJNE    A,#T_REM,PPL    ;SEE IF A REM TOKEN
1628 EB             5525            MOV     A,R3
1629 D130           5526            ACALL   PPL71           ;WASTE THE REM STATEMENT
162B D12F           5527    PPL61:  ACALL   PPL7            ;LOOP UNTIL A CR
162D 80FC           5528            SJMP    PPL61
                    5529            ;
162F E2             5530    PPL7:   MOVX    A,@R0           ;GET THE CHARACTER
1630 B40D10         5531    PPL71:  CJNE    A,#CR,PPL9      ;FINISH IF A CR
1633 D000           5532            POP     R0B0            ;WASTE THE CALLING STACK
BASIC52S                                                                                                      PAGE 97

1635 D000           5533            POP     R0B0
1637 F3             5534            MOVX    @R1,A           ;SAVE CR IN MEMORY
1638 09             5535            INC     R1              ;SAVE A TERMINATOR
1639 7401           5536            MOV     A,#EOF
163B F3             5537            MOVX    @R1,A
163C E9             5538            MOV     A,R1            ;SUBTRACT FOR LENGTH
163D 9404           5539            SUBB    A,#4
163F F50D           5540            MOV     TEMP3,A         ;SAVE LENGTH
1641 7904           5541            MOV     R1,#LOW IBCNT   ;POINT AT BUFFER COUNT
                    5542            ;
1643 08             5543    PPL9:   INC     R0
1644 F3             5544    PPL91:  MOVX    @R1,A           ;SAVE THE CHARACTER
1645 09             5545            INC     R1              ;BUMP THE POINTERS
1646 22             5546            RET                     ;EXIT TO CALLING ROUTINE
                    5547            ;
                    5548            ;
                    5549            ;***************************************************************
                    5550            ;
                    5551            ;DEC76 - DECREMENT THE REGISTER PAIR R7:R6
                    5552            ;
                    5553            ;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC DOES NOT
                    5554            ;
                    5555            ;***************************************************************
                    5556            ;
1647 1E             5557    DEC76:  DEC     R6              ;BUMP R6
1648 BEFF01         5558            CJNE    R6,#0FFH,DEC77  ;SEE IF RAPPED AROUND
164B 1F             5559            DEC     R7
164C EF             5560    DEC77:  MOV     A,R7            ;SEE IF ZERO
164D 4E             5561            ORL     A,R6
164E 22             5562            RET                     ;EXIT
                    5563            ;
                    5564            ;***************************************************************
                    5565            ;
                    5566            ; MTOP - Get or Put the top of assigned memory
                    5567            ;
                    5568            ;***************************************************************
                    5569            ;
164F 90010A         5570    PMTOP:  MOV     DPTR,#MEMTOP
1652 120573         5571    PMTOP1: CALL    L20DPI
1655 81B4           5572            AJMP    TWO_EY          ;PUT R2:R0 ON THE STACK
                    5573            ;
                    5574            ;*************************************************************
                    5575            ;
                    5576            ; AXTAL - Crystal value calculations
                    5577            ;
                    5578            ;*************************************************************
                    5579            ;
1657 9017EC         5580    AXTAL0: MOV     DPTR,#XTALV     ;CRYSTAL VALUE
165A 9133           5581            ACALL   PUSHC
                    5582            ;
165C 912A           5583    AXTAL1: ACALL   CSTAKA2         ;COPY CRYSTAL VALUE TWICE
                    5584    ;
                    5585    ;*****************************************************************************
                    5586    ;****** Disable Intel programming for to get room ****************************
                    5587    ;
                    5588    ;       ACALL   CSTAKA          ;Copy crystal value the 3rd.
                    5589    ;
                    5590    ;*****************************************************************************
BASIC52S                                                                                                      PAGE 98

                    5591    ;
165E 900709         5592            MOV     DPTR,#PTIME     ;PROM TIMER
1661 D179           5593            ACALL   AXTAL2
1663 900128         5594            MOV     DPTR,#PROGS
1666 F10E           5595            ACALL   S31L
                    5596    ;
                    5597    ;*****************************************************************************
                    5598    ;****** Disable Intel programming for to get room ****************************
                    5599    ;
                    5600    ;       MOV     DPTR,#IPTIME    ;IPROM TIMER
                    5601    ;       ACALL   AXTAL2
                    5602    ;       MOV     DPTR,#IPROGS
                    5603    ;       ACALL   S31L
                    5604    ;
                    5605    ;*****************************************************************************
                    5606    ;
1668 901167         5607            MOV     DPTR,#TTIME     ;CLOCK CALCULATION
166B 511F           5608            ACALL   AXTAL3
166D E9             5609            MOV     A,R1
166E F4             5610            CPL     A
166F 04             5611            INC     A
1670 F54A           5612            MOV     SAVE_T,A
1672 7B01           5613            MOV     R3,#HIGH CXTAL
1674 7913           5614            MOV     R1,#LOW CXTAL
1676 020FD3         5615            JMP     POPAS
                    5616            ;
1679 511F           5617    AXTAL2: ACALL   AXTAL3
                    5618            ;
167B                5619    CBIAS:  ;Bias the crystal calculations
                    5620            ;
167B E9             5621            MOV     A,R1            ;GET THE LOW COUNT
167C F4             5622            CPL     A               ;FLIP IT FOR TIMER LOAD
167D 240F           5623            ADD     A,#15           ;BIAS FOR CALL AND LOAD TIMES
167F F9             5624            MOV     R1,A            ;RESTORE IT
1680 EB             5625            MOV     A,R3            ;GET THE HIGH COUNT
1681 F4             5626            CPL     A               ;FLIP IT
1682 3400           5627            ADDC    A,#00H          ;ADD THE CARRY
1684 FB             5628            MOV     R3,A            ;RESTORE IT
1685 22             5629            RET
                    5630            ;
                    5631            ;**************************************************************
                    5632            ;
1686                5633    STONE:  ; Toggle the I/O port
                    5634            ;
                    5635            ;**************************************************************
                    5636            ;
1686 120E78         5637            CALL    THREE           ;GET THE NUMBERS
1689 D17B           5638            ACALL   CBIAS           ;BIAS R3:R1 FOR COUNT LOOP
                    5639            ;
168B C292           5640    STONE1: CLR     T_BIT           ;TOGGLE THE BIT
168D C28E           5641            CLR     TR1             ;STOP THE TIMER
168F 8B8D           5642            MOV     TH1,R3          ;LOAD THE TIMER
1691 898B           5643            MOV     TL1,R1
1693 C28F           5644            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
1695 D28E           5645            SETB    TR1             ;TURN IT ON
1697 D147           5646            ACALL   DEC76
1699 308FFD         5647            JNB     TF1,$           ;WAIT
169C 71AC           5648            ACALL   ALPAR
BASIC52S                                                                                                      PAGE 99

169E D292           5649            SETB    T_BIT           ;BACK TO A ONE
16A0 12052F         5650            CALL    TIMER_LOAD1     ;LOAD THE HIGH VALUE
16A3 308FFD         5651            JNB     TF1,$           ;WAIT
16A6 70E3           5652            JNZ     STONE1          ;LOOP
16A8 22             5653            RET
                    5654            ;
                    5655            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5656            ;
16A9                5657    LNTAB:  ; Natural log lookup table
                    5658            ;
                    5659            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5660            ;
16A9 80             5661            DB      80H
16AA 00             5662            DB      00H
16AB 71             5663            DB      71H
16AC 37             5664            DB      37H
16AD 13             5665            DB      13H
16AE 19             5666            DB      19H
                    5667            ;
16AF 7F             5668            DB      7FH
16B0 00             5669            DB      00H
16B1 76             5670            DB      76H
16B2 64             5671            DB      64H
16B3 37             5672            DB      37H
16B4 94             5673            DB      94H
                    5674            ;
16B5 80             5675            DB      80H
16B6 00             5676            DB      00H
16B7 07             5677            DB      07H
16B8 22             5678            DB      22H
16B9 75             5679            DB      75H
16BA 17             5680            DB      17H
                    5681            ;
16BB 80             5682            DB      80H
16BC 00             5683            DB      00H
16BD 52             5684            DB      52H
16BE 35             5685            DB      35H
16BF 93             5686            DB      93H
16C0 28             5687            DB      28H
                    5688            ;
16C1 80             5689            DB      80H
16C2 00             5690            DB      00H
16C3 71             5691            DB      71H
16C4 91             5692            DB      91H
16C5 85             5693            DB      85H
16C6 86             5694            DB      86H
                    5695            ;
16C7 FF             5696            DB      0FFH
                    5697            ;
16C8 81             5698            DB      81H
16C9 00             5699            DB      00H
16CA 51             5700            DB      51H
16CB 58             5701            DB      58H
16CC 02             5702            DB      02H
16CD 23             5703            DB      23H
                    5704            ;
                    5705            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
                    5706            ;
BASIC52S                                                                                                      PAGE 100

16CE                5707    SINTAB: ; Sin lookup table
                    5708            ;
                    5709            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
                    5710            ;
16CE 77             5711            DB      128-9
16CF 00             5712            DB      00H
16D0 44             5713            DB      44H
16D1 90             5714            DB      90H
16D2 05             5715            DB      05H
16D3 16             5716            DB      16H
                    5717            ;
16D4 79             5718            DB      128-7
16D5 01             5719            DB      01H
16D6 08             5720            DB      08H
16D7 21             5721            DB      21H
16D8 05             5722            DB      05H
16D9 25             5723            DB      25H
                    5724            ;
16DA 7B             5725            DB      128-5
16DB 00             5726            DB      00H
16DC 19             5727            DB      19H
16DD 73             5728            DB      73H
16DE 55             5729            DB      55H
16DF 27             5730            DB      27H
16E0 7D             5731            DB      128-3
16E1 01             5732            DB      01H
16E2 70             5733            DB      70H
16E3 12             5734            DB      12H
16E4 84             5735            DB      84H
16E5 19             5736            DB      19H
                    5737            ;
16E6 7E             5738            DB      128-2
16E7 00             5739            DB      00H
16E8 33             5740            DB      33H
16E9 33             5741            DB      33H
16EA 33             5742            DB      33H
16EB 83             5743            DB      83H
                    5744            ;
16EC 80             5745            DB      128
16ED 01             5746            DB      01H
16EE 67             5747            DB      67H
16EF 66             5748            DB      66H
16F0 66             5749            DB      66H
16F1 16             5750            DB      16H
                    5751            ;
16F2 81             5752    FPONE:  DB      128+1
16F3 00             5753            DB      00H
16F4 00             5754            DB      00H
16F5 00             5755            DB      00H
16F6 00             5756            DB      00H
16F7 10             5757            DB      10H
                    5758            ;
16F8 FF             5759            DB      0FFH            ;END OF TABLE
                    5760            ;
16F9 120FD9         5761    SBAUD:  CALL    AXTAL           ;PUT CRYSTAL ON THE STACK
16FC 120F43         5762            CALL    EXPRB           ;PUT THE NUMBER AFTER BAUD ON STACK
16FF 740C           5763            MOV     A,#12
1701 91B1           5764            ACALL   TWO_R2          ;TOS = 12
BASIC52S                                                                                                      PAGE 101

1703 31B0           5765            ACALL   AMUL            ;TOS = 12*BAUD
1705 910A           5766            ACALL   ADIV            ;TOS = XTAL/(12*BAUD)
1707 5123           5767            ACALL   IFIX
1709 D17B           5768            ACALL   CBIAS
170B 900124         5769            MOV     DPTR,#SPV
                    5770            ;
170E 020605         5771    S31L:   JMP     S31DP
                    5772            ;
1711 D14F           5773    AFREE:  CALL    PMTOP           ;PUT MTOP ON STACK
1713 1205A9         5774            CALL    G4              ;GET END ADDRESS
1716 A882           5775            MOV     R0,DPL
1718 AA83           5776            MOV     R2,DPH
171A 91B4           5777            ACALL   TWO_EY
                    5778            ;
171C 121971         5779    ASUB:   LCALL   FP_BASE1        ;DO FP SUB
171F 0138           5780            AJMP    FPTST
                    5781            ;
1721 12051C         5782    ALEN:   CALL    CCAL            ;CALCULATE THE LEN OF THE SELECTED PROGRAM
1724 AA07           5783            MOV     R2,R7B0         ;SAVE THE HIGH BYTE
1726 EE             5784            MOV     A,R6            ;SAVE THE LOW BYTE
1727 81B3           5785            AJMP    TWO_EX          ;PUT IT ON THE STACK
                    5786            ;
1729 A2AF           5787    ATIME:  MOV     C,EA            ;SAVE INTERRUTS
172B C2AF           5788            CLR     EA
172D C047           5789            PUSH    MILLIV          ;SAVE MILLI VALUE
172F AA48           5790            MOV     R2,TVH          ;GET THE TIMER
1731 E549           5791            MOV     A,TVL
1733 92AF           5792            MOV     EA,C            ;SAVE INTERRUPTS
1735 91B3           5793            ACALL   TWO_EX          ;PUT TIMER ON THE STACK
1737 D0E0           5794            POP     ACC             ;GET MILLI
1739 91B1           5795            ACALL   TWO_R2          ;PUT MILLI ON STACK
173B 74C8           5796            MOV     A,#200
173D 91B1           5797            ACALL   TWO_R2          ;DIVIDE MILLI BY 200
173F 910A           5798            ACALL   ADIV
                    5799            ;
1741 12196F         5800    AADD:   LCALL   FP_BASE         ;DO FP ADDITION
1744 0138           5801            AJMP    FPTST           ;CHECK FOR ERRORS
                    5802            ;
                    5803            ;**************************************************************
                    5804            ;
                    5805            ; Here are some error messages that were moved
                    5806            ;
                    5807            ;**************************************************************
                    5808            ;
                    5809            ;
1746 42414420       5810    E1X:    DB      'BAD SYNTAX"'
174A 53594E54   
174E 415822     
1751 8A             5811    E2X:    DB      128+10
1752 44495649       5812            DB      'DIVIDE BY ZERO"'
1756 44452042   
175A 59205A45   
175E 524F22     
                    5813            ;
1761 41525241       5814    E6X:    DB      'ARRAY SIZE"'
1765 59205349   
1769 5A4522     
                    5815            ;
BASIC52S                                                                                                      PAGE 102

                    5816            ;**************************************************************
                    5817            ;
176C                5818    T_BUF:  ; TXA gets IBUF
                    5819            ;
                    5820            ;**************************************************************
                    5821            ;
176C 750A00         5822            MOV     TXAH,#HIGH IBUF
176F 750807         5823            MOV     TXAL,#LOW IBUF
1772 22             5824            RET
                    5825            ;
                    5826            ;
                    5827            ;***************************************************************
                    5828            ;
1773                5829    CXFER:  ; Transfer a program from rom to ram
                    5830            ;
                    5831            ;***************************************************************
                    5832            ;
1773 12051C         5833            CALL    CCAL            ;GET EVERYTHING SET UP
1776 7A02           5834            MOV     R2,#HIGH PSTART
1778 7800           5835            MOV     R0,#LOW PSTART
177A B16D           5836            ACALL   LMOV            ;DO THE TRANSFER
177C 120664         5837            CALL    RCLEAR          ;CLEAR THE MEMORY
                    5838            ;
                    5839            ; Fall thru to CRAM
                    5840            ;
                    5841            ;***************************************************************
                    5842            ;
177F                5843    CRAM:   ; The command action routine - RAM - Run out of ram
                    5844            ;
                    5845            ;***************************************************************
                    5846            ;
177F C217           5847            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
1781 751302         5848            MOV     BOFAH,#HIGH PSTART
1784 751400         5849            MOV     BOFAL,#LOW PSTART
                    5850            ;
                    5851            ; Fall thru to Command Processor
                    5852            ;
                    5853            ;***************************************************************
                    5854            ;
1787                5855    CMND1:  ; The entry point for the command processor
                    5856            ;
                    5857            ;***************************************************************
                    5858            ;
1787 120C31         5859            LCALL   SPRINT1         ;WASTE AT AND HEX
178A C22D           5860            CLR     XBIT            ;TO RESET IF NEEDED
                    5861    ;
                    5862    ;*****************************************************************************
                    5863    ;****** Karmann 1 Bugfix *****************************************************
                    5864    ;
178C F1E0           5865            acall   TEST_USER       ;check for user command extensions
                    5866    ;
                    5867    ;****** continue with original code: *****************************************
                    5868    ;
178E 9000FD         5869            MOV     DPTR,#RDYS      ;PRINT THE READY MESSAGE
1791 1206AD         5870            CALL    CRP             ;DO A CR, THEN, PRINT FROM THE ROM
                    5871            ;
1794 D22F           5872    CMNDR:  SETB    DIRF            ;SET THE DIRECT INPUT BIT
1796 853E81         5873            MOV     SP,SPSAV        ;LOAD THE STACK
BASIC52S                                                                                                      PAGE 103

1799 119D           5874            ACALL   CL7             ;DO A CRLF
                    5875            ;
179B C218           5876    CMNX:   CLR     GTRD            ;CLEAR BREAK
179D 90005E         5877            MOV     DPTR,#5EH       ;DO RUN TRAP
17A0 E0             5878            MOVX    A,@DPTR
17A1 6434           5879            XRL     A,#52
17A3 7003           5880            JNZ     CMNX1
17A5 020802         5881            LJMP    CRUN
17A8 7D3E           5882    CMNX1:  MOV     R5,#'>'         ;OUTPUT A PROMPT
17AA 120711         5883            LCALL   TEROT
17AD 1206D8         5884            CALL    INLINE          ;INPUT A LINE INTO IBUF
17B0 B1BA           5885            CALL    PP              ;PRE-PROCESS THE LINE
17B2 20D50F         5886            JB      F0,CMND3        ;NO LINE NUMBER
17B5 91F0           5887            CALL    LINE            ;PROCESS THE LINE
17B7 1205E7         5888            LCALL   LCLR
17BA 2015DE         5889            JB      LINEB,CMNX      ;DON'T CLEAR MEMORY IF NO NEED
17BD D215           5890            SETB    LINEB
17BF 120664         5891            LCALL   RCLEAR          ;CLEAR THE MEMORY
17C2 80D7           5892            SJMP    CMNX            ;LOOP BACK
                    5893            ;
17C4 F16C           5894    CMND3:  CALL    T_BUF           ;SET UP THE TEXT POINTER
17C6 120EE1         5895            CALL    DELTST          ;GET THE CHARACTER
17C9 60C9           5896            JZ      CMNDR           ;IF CR, EXIT
17CB 90010F         5897            MOV     DPTR,#CMNDD     ;POINT AT THE COMMAND LOOKUP
17CE B4F000         5898            CJNE    A,#T_CMND,CMND31;PROCESS STATEMENT IF NOT A COMMAND
17D1 400A           5899    CMND31: JC      CMND5
17D3 120ED7         5900            CALL    GCI1            ;BUMP TXA
17D6 540F           5901            ANL     A,#0FH          ;STRIP MSB'S FOR LOOKUP
17D8 12095C         5902            LCALL   ISTA1           ;PROCESS COMMAND
17DB 80B7           5903            SJMP    CMNDR
                    5904            ;
17DD 020813         5905    CMND5:  LJMP    ILOOP           ;CHECK FOR A POSSIBLE BREAK
                    5906    ;
                    5907    ;*****************************************************************************
                    5908    ;****** Karmann 1 Bugfix *****************************************************
                    5909    ;
17E0                5910    TEST_USER:                      ;check for user command extensions
17E0 E4             5911            CLR     A
17E1 902002         5912            MOV     DPTR,#2002H     ;CHECK FOR EXTERNAL TRAP PACKAGE
17E4 93             5913            MOVC    A,@A+DPTR
17E5 B45A03         5914            CJNE    A,#5AH,CMND11   ;test for user commands
17E8 122048         5915            LCALL   2048H           ;IF PRESENT JUMP TO LOCATION 200BH
17EB 22             5916    CMND11: ret
                    5917    ;
                    5918    ;****** continue with original code: *****************************************
                    5919    ;
                    5920            ;CONSTANTS
                    5921            ;
17EC 88             5922    XTALV:  DB      128+8           ; DEFAULT CRYSTAL VALUE
17ED 00             5923            DB      00H
17EE 00             5924            DB      00H
17EF 92             5925            DB      92H
17F0 05             5926            DB      05H
17F1 11             5927            DB      11H
                    5928            ;
17F2 85             5929    EXP11:  DB      85H
17F3 00             5930            DB      00H
17F4 42             5931            DB      42H
BASIC52S                                                                                                      PAGE 104

17F5 41             5932            DB      41H
17F6 87             5933            DB      87H
17F7 59             5934            DB      59H
                    5935            ;
17F8 81             5936    EXP1:   DB      128+1           ; EXP(1)
17F9 00             5937            DB      00H
17FA 18             5938            DB      18H
17FB 28             5939            DB      28H
17FC 18             5940            DB      18H
17FD 27             5941            DB      27H
                    5942    ;
                    5943    ;*****************************************************************************
                    5944    ;****** Disable Intel programming for to get room ****************************
                    5945    ;
                    5946    ;IPTIME: DB     128-4           ;FPROG TIMING
                    5947    ;       DB      00H
                    5948    ;       DB      00H
                    5949    ;       DB      00H
                    5950    ;       DB      75H
                    5951    ;       DB      83H
                    5952    ;
                    5953    ;*****************************************************************************
                    5954    ;
17FE 81             5955    PIE:    DB      128+1           ;PI
17FF 00             5956            DB      00H
1800 26             5957            DB      26H
1801 59             5958            DB      59H
1802 41             5959            DB      41H
1803 31             5960            DB      31H             ; 3.1415926
                    5961            ;
                    5962            ;***************************************************************
                    5963            ;
                    5964            ; The error messages, some have been moved
                    5965            ;
                    5966            ;***************************************************************
                    5967            ;
1804 9E             5968    E7X:    DB      128+30
1805 41524954       5969            DB      'ARITH. UNDERFLOW"'
1809 482E2055   
180D 4E444552   
1811 464C4F57   
1815 22         
                    5970            ;
1816 4D454D4F       5971    E5X:    DB      'MEMORY ALLOCATION"'
181A 52592041   
181E 4C4C4F43   
1822 4154494F   
1826 4E22       
                    5972            ;
1828 A8             5973    E3X:    DB      128+40
1829 42414420       5974            DB      'BAD ARGUMENT"'
182D 41524755   
1831 4D454E54   
1835 22         
                    5975            ;
1836 492D5354       5976    EXI:    DB      'I-STACK"'
183A 41434B22   
                    5977            ;
BASIC52S                                                                                                      PAGE 105

                    5978            ;***************************************************************
                    5979            ;
                    5980            ; The command action routine - CONTINUE
                    5981            ;
                    5982            ;***************************************************************
                    5983            ;
183E 901FA6         5984    CCONT:  MOV     DPTR,#E15X
1841 30174B         5985            JNB     CONB,ERROR      ;ERROR IF CONTINUE IS NOT SET
                    5986            ;
1844                5987    CC1:    ;used for input statement entry
                    5988            ;
1844 85420A         5989            MOV     TXAH,INTXAH     ;RESTORE TXA
1847 854308         5990            MOV     TXAL,INTXAL
184A 02080F         5991            JMP     CILOOP          ;EXECUTE
                    5992            ;
184D 850F83         5993    DTEMP:  MOV     DPH,TEMP5       ;RESTORE DPTR
1850 850E82         5994            MOV     DPL,TEMP4
1853 22             5995            RET
                    5996            ;
1854 85830F         5997    TEMPD:  MOV     TEMP5,DPH
1857 85820E         5998            MOV     TEMP4,DPL
185A 22             5999            RET
                    6000            ;
                    6001            ;**************************************************************
                    6002            ;
185B                6003    I_DL:   ; IDLE
                    6004            ;
                    6005            ;**************************************************************
                    6006            ;
185B 202F27         6007            JB      DIRF,E1XX       ;SYNTAX ERROR IN DIRECT INPUT
185E C296           6008            CLR     DACK            ;ACK IDLE
                    6009            ;
1860 438701         6010    U_ID1:  ORL     PCON,#01H
                    6011    ;       DB      01000011B       ;ORL DIRECT OP CODE
                    6012    ;       DB      87H             ;PCON ADDRESS
                    6013    ;       DB      01H             ;SET IDLE BIT
1863 20160B         6014            JB      INTPEN,I_RET    ;EXIT IF EXTERNAL INTERRUPT
1866 102108         6015            JBC     U_IDL,I_RET     ;EXIT IF USER WANTS TO
1869 3010F4         6016            JNB     OTS,U_ID1       ;LOOP IF TIMER NOT ENABLED
186C 1207E3         6017            LCALL   T_CMP           ;CHECK THE TIMER
186F 40EF           6018            JC      U_ID1           ;LOOP IF TIME NOT BIG ENOUGH
                    6019            ;
1871 D296           6020    I_RET:  SETB    DACK            ;RESTORE EXECUTION
1873 22             6021            RET                     ;EXIT IF IT IS
                    6022            ;
                    6023            ;
                    6024            ;
1874 A3             6025    ER0:    INC     DPTR            ;BUMP TO TEXT
1875 202F23         6026            JB      DIRF,ERROR0     ;CAN'T GET OUT OF DIRECT MODE
1878 301320         6027            JNB     ON_ERR,ERROR0   ;IF ON ERROR ISN'T SET, GO BACK
187B 900101         6028            MOV     DPTR,#ERRLOC    ;SAVE THE ERROR CODE
187E 120673         6029            CALL    RC2             ;SAVE ERROR AND SET UP THE STACKS
1881 A3             6030            INC     DPTR            ;POINT AT ERRNUM
1882 020844         6031            JMP     ERL4            ;LOAD ERR NUM AND EXIT
                    6032            ;
                    6033            ; Syntax error
                    6034            ;
1885 A22F           6035    E1XX:   MOV     C,DIRF          ;SEE IF IN DIRECT MODE
BASIC52S                                                                                                      PAGE 106

1887 901746         6036    E1XX1:  MOV     DPTR,#E1X       ;ERROR MESSAGE
188A 8004           6037            SJMP    ERROR1          ;TRAP ON SET DIRF
                    6038            ;
188C 901836         6039    E1XX2:  MOV     DPTR,#EXI       ;STACK ERROR
                    6040            ;
                    6041            ; Falls through
                    6042            ;
                    6043            ;***************************************************************
                    6044            ;
                    6045            ;ERROR PROCESSOR - PRINT OUT THE ERROR TYPE, CHECK TO SEE IF IN
                    6046            ;                  RUN OR COMMAND MODE, FIND AND PRINT OUT THE
                    6047            ;                  LINE NUMBER IF IN RUN MODE
                    6048            ;
                    6049            ;***************************************************************
                    6050            ;
188F C3             6051    ERROR:  CLR     C               ;RESET STACK
1890 853E81         6052    ERROR1: MOV     SP,SPSAV        ;RESET THE STACK
1893 120C31         6053            LCALL   SPRINT1         ;CLEAR LINE AND AT MODE
1896 E4             6054            CLR     A               ;SET UP TO GET ERROR CODE
1897 93             6055            MOVC    A,@A+DPTR
1898 10E7D9         6056            JBC     ACC.7,ER0       ;PROCESS ERROR
                    6057            ;
189B 1154           6058    ERROR0: ACALL   TEMPD           ;SAVE THE DATA POINTER
189D 4003           6059            JC      ERROR01         ;NO RESET IF CARRY IS SET
189F 12066F         6060            LCALL   RC1             ;RESET THE STACKS
18A2 1206A3         6061    ERROR01:CALL    CRLF2           ;DO TWO CARRIAGE RET - LINE FEED
18A5 901FF8         6062            MOV     DPTR,#ERS       ;OUTPUT ERROR MESSAGE
18A8 1206AF         6063            CALL    ROM_P
18AB 114D           6064            CALL    DTEMP           ;GET THE ERROR MESSAGE BACK
                    6065            ;
18AD 1206AF         6066    ERRS:   CALL    ROM_P           ;PRINT ERROR TYPE
18B0 302F05         6067            JNB     DIRF,ER1        ;DO NOT PRINT IN LINE IF DIRF=1
                    6068            ;
18B3 C220           6069    SERR1:  CLR     STOPBIT         ;PRINT STOP THEN EXIT, FOR LIST
18B5 021787         6070            JMP     CMND1
                    6071            ;
18B8 900103         6072    ER1:    MOV     DPTR,#INS       ;OUTPUT IN LINE
18BB 1206AF         6073            CALL    ROM_P
                    6074            ;
                    6075            ;NOW, FIND THE LINE NUMBER
                    6076            ;
                    6077            ;
18BE 120E9B         6078            CALL    DP_B            ;GET THE FIRST ADDRESS OF THE PROGRAM
18C1 E4             6079            CLR     A               ;FOR INITIALIZATION
                    6080            ;
18C2 1154           6081    ER2:    ACALL   TEMPD           ;SAVE THE DPTR
18C4 1205DE         6082            CALL    ADDPTR          ;ADD ACC TO DPTR
18C7 11FB           6083            ACALL   ER4             ;R3:R1 = TXA-DPTR
18C9 4006           6084            JC      ER3             ;EXIT IF DPTR>TXA
18CB 6004           6085            JZ      ER3             ;EXIT IF DPTR=TXA
18CD E0             6086            MOVX    A,@DPTR         ;GET LENGTH
18CE B401F1         6087            CJNE    A,#EOF,ER2      ;SEE IF AT THE END
                    6088            ;
18D1 114D           6089    ER3:    ACALL   DTEMP           ;PUT THE LINE IN THE DPTR
18D3 11FB           6090            ACALL   ER4             ;R3:R1 = TXA - BEGINNING OF LINE
18D5 E9             6091            MOV     A,R1            ;GET LENGTH
18D6 240A           6092            ADD     A,#10           ;ADD 10 TO LENGTH, DPTR STILL HAS ADR
18D8 F545           6093            MOV     MT1,A           ;SAVE THE COUNT
BASIC52S                                                                                                      PAGE 107

18DA A3             6094            INC     DPTR            ;POINT AT LINE NUMBER HIGH BYTE
18DB 121652         6095            CALL    PMTOP1          ;LOAD R2:R0, PUT IT ON THE STACK
18DE 317D           6096            ACALL   FP_BASE7        ;OUTPUT IT
18E0 2020D0         6097            JB      STOPBIT,SERR1   ;EXIT IF STOP BIT SET
18E3 1206A3         6098            CALL    CRLF2           ;DO SOME CRLF'S
18E6 114D           6099            CALL    DTEMP
18E8 1210A3         6100            CALL    UPPL            ;UNPROCESS THE LINE
18EB 121094         6101            CALL    CL6             ;PRINT IT
18EE 7D2D           6102    ER31:   MOV     R5,#'-'         ;OUTPUT DASHES, THEN AN X
18F0 316C           6103            ACALL   T_L             ;PRINT AN X IF ERROR CHARACTER FOUND
18F2 D545F9         6104            DJNZ    MT1,ER31        ;LOOP UNTIL DONE
18F5 7D58           6105            MOV     R5,#'X'
18F7 316C           6106            ACALL   T_L
18F9 01B3           6107            AJMP    SERR1
                    6108            ;
18FB AB0A           6109    ER4:    MOV     R3,TXAH         ;GET TEXT POINTER AND PERFORM SUBTRACTION
18FD A908           6110            MOV     R1,TXAL
18FF 020A02         6111            JMP     DUBSUB
                    6112            ;
                    6113            ;**************************************************************
                    6114            ;
                    6115            ; Interrupt driven timer
                    6116            ;
                    6117            ;**************************************************************
                    6118            ;
1902 854A8C         6119    I_DR:   MOV     TH0,SAVE_T      ;LOAD THE TIMER
1905 C547           6120            XCH     A,MILLIV        ;SAVE A, GET MILLI COUNTER
1907 04             6121            INC     A               ;BUMP COUNTER
1908 B4C808         6122            CJNE    A,#200,TR       ;CHECK OUT TIMER VALUE
190B E4             6123            CLR     A               ;FORCE ACC TO BE ZERO
190C 0549           6124            INC     TVL             ;INCREMENT LOW TIMER
190E B54902         6125            CJNE    A,TVL,TR        ;CHECK LOW VALUE
1911 0548           6126            INC     TVH             ;BUMP TIMER HIGH
                    6127            ;
1913 C547           6128    TR:     XCH     A,MILLIV
1915 D0D0           6129            POP     PSW
1917 32             6130            RETI
                    6131            ;
                    6132            ;**************************************************************
                    6133            ;
                    6134            ; The statement action routine - CLOCK
                    6135            ;
                    6136            ;**************************************************************
                    6137            ;
1918 3138           6138    SCLOCK: ACALL   OTST            ;GET CHARACTER AFTER CLOCK TOKEN
191A C2A9           6139            CLR     ET0
191C C22E           6140            CLR     C_BIT
191E 500D           6141            JNC     SC_R            ;EXIT IF A ZERO
                    6142    ;
                    6143    ;*****************************************************************************
                    6144    ;****** Use XTAL up to 47 MHz ************************************************
                    6145    ;****** Wulf 2 ***************************************************************
                    6146    ;
                    6147    ;       ANL     TMOD,#0F0H      ;SET UP THE MODE
                    6148    ;
1920 5389F1         6149            anl     TMOD,#0F1H      ;Set up 16 bit mode for timer 0
1923 438901         6150            orl     TMOD,#01H
                    6151    ;
BASIC52S                                                                                                      PAGE 108

                    6152    ;*****************************************************************************
                    6153    ;
1926 D22E           6154            SETB    C_BIT           ;USER INTERRUPTS
1928 43A882         6155            ORL     IE,#82H         ;ENABLE ET0 AND EA
192B D28C           6156            SETB    TR0             ;TURN ON THE TIMER
                    6157            ;
192D 22             6158    SC_R:   RET
                    6159            ;
                    6160            ;***************************************************************
                    6161            ;
192E                6162    SUI:    ; Statement USER IN action routine
                    6163            ;
                    6164            ;***************************************************************
                    6165            ;
192E 3138           6166            ACALL   OTST
1930 921E           6167            MOV     CIUB,C          ;SET OR CLEAR CIUB
1932 22             6168            RET
                    6169            ;
                    6170            ;***************************************************************
                    6171            ;
1933                6172    SUO:    ; Statement USER OUT action routine
                    6173            ;
                    6174            ;***************************************************************
                    6175            ;
1933 3138           6176            ACALL   OTST
1935 921C           6177            MOV     COUB,C
1937 22             6178            RET
                    6179            ;
1938                6180    OTST:   ; Check for a one
                    6181            ;
1938 120ED5         6182            LCALL   GCI             ;GET THE CHARACTER, CLEARS CARRY
193B 9431           6183            SUBB    A,#'1'          ;SEE IF A ONE
193D B3             6184            CPL     C               ;SETS CARRY IF ONE, CLEARS IT IF ZERO
193E 22             6185    OTST1:  RET
                    6186            ;
                    6187            ;**************************************************************
                    6188            ;
                    6189            ; IBLK - EXECUTE USER SUPPLIED TOKEN
                    6190            ;
                    6191            ;**************************************************************
                    6192            ;
193F 20D4FC         6193    IBLK:   JB      PSW.4,OTST1     ;EXIT IF REGISTER BANK <> 0
1942 20D3F9         6194            JB      PSW.3,OTST1
1945 10E706         6195            JBC     ACC.7,IBLK1     ;SEE IF BIT SEVEN IS SET
1948 900047         6196            MOV     DPTR,#USENT     ;USER ENTRY LOCATION
194B 02095C         6197            LJMP    ISTA1
                    6198            ;
194E 20E02A         6199    IBLK1:  JB      ACC.0,FP_BASE6  ;FLOATING POINT INPUT
1951 6019           6200            JZ      T_L             ;DO OUTPUT ON 80H
1953 90196D         6201            MOV     DPTR,#FP_BASE-2
1956 73             6202            JMP     @A+DPTR
                    6203            ;
                    6204            ;
                    6205            ;**************************************************************
                    6206            ;
                    6207            ; GET_NUM - GET A NUMBER, EITHER HEX OR FLOAT
                    6208            ;
                    6209            ;**************************************************************
BASIC52S                                                                                                      PAGE 109

                    6210            ;
1957 3179           6211    GET_NUM:ACALL   FP_BASE5        ;SCAN FOR HEX
1959 5020           6212            JNC     FP_BASE6        ;DO FP INPUT
                    6213            ;
195B 3181           6214            ACALL   FP_BASE9        ;ASCII STRING TO R2:R0
195D 700C           6215            JNZ     H_RET
195F C083           6216            PUSH    DPH             ;SAVE THE DATA_POINTER
1961 C082           6217            PUSH    DPL
1963 3187           6218            ACALL   FP_BASE12       ;PUT R2:R0 ON THE STACK
1965 D082           6219            POP     DPL             ;RESTORE THE DATA_POINTER
1967 D083           6220            POP     DPH
1969 E4             6221            CLR     A               ;NO ERRORS
196A 22             6222            RET                     ;EXIT
                    6223            ;
                    6224            ;**************************************************************
                    6225            ;
                    6226            ; WB - THE EGO MESSAGE
                    6227            ;
                    6228            ;**************************************************************
                    6229    ;
                    6230    ;*****************************************************************************
                    6231    ;****** Sorry - but the ego message had to be disabled ***********************
                    6232    ;
                    6233    ;WB:
                    6234    ;
                    6235    ;       DB      'W'+80H,'R'+80H
                    6236    ;       DB      'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
                    6237    ;       DB      ' ','B'+80H,'Y'+80H,' '
                    6238    ;       DB      'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '+80H
                    6239    ;       DB      'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
                    6240    ;       DB      'S','K'+80H,'Y'+80H
                    6241    ;       DB      ', I','N'+80H,'T'+80H,'E'+80H,'L'+80H
                    6242    ;       DB      ' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'+80H
                    6243    ;       DB      '. 1','9'+80H,'85'
                    6244    ;
                    6245    ;*****************************************************************************
                    6246            ;
196B 22             6247    H_RET:  RET
                    6248            ;
                    6249    ;************************************************************
                    6250    ;
                    6251    ; This is a complete BCD floating point package for the 8051 micro-
                    6252    ; controller. It provides 8 digits of accuracy with exponents that
                    6253    ; range from +127 to -127. The mantissa is in packed BCD, while the
                    6254    ; exponent is expressed in pseudo-twos complement. A ZERO exponent
                    6255    ; is used to express the number ZERO. An exponent value of 80H or
                    6256    ; greater than means the exponent is positive, i.e. 80H = E 0,
                    6257    ; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
                    6258    ; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
                    6259    ; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
                    6260    ; normalized after calculation. A normalized mantissa is >=.10 and
                    6261    ; <=.99999999.
                    6262    ;
                    6263    ; The numbers in memory assumed to be stored as follows:
                    6264    ;
                    6265    ; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
                    6266    ; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
                    6267    ; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
BASIC52S                                                                                                      PAGE 110

                    6268    ; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
                    6269    ; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
                    6270    ; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
                    6271    ;
                    6272    ; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
                    6273    ; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
                    6274    ; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
                    6275    ; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
                    6276    ; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
                    6277    ; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
                    6278    ;
                    6279    ; The operations are performed thusly:
                    6280    ;
                    6281    ; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
                    6282    ;
                    6283    ; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
                    6284    ;
                    6285    ; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
                    6286    ;
                    6287    ; Note that the stack gets popped after an operation.
                    6288    ;
                    6289    ; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
                    6290    ;
                    6291    ;**********************************************************************
                    6292    ;
                    6293    ;**********************************************************************
                    6294    ;
                    6295    ; STATUS ON RETURN - After performing an operation (+, -, *, /)
                    6296    ;                    the accumulator contains the following status
                    6297    ;
                    6298    ; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
                    6299    ;
                    6300    ;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED
                    6301    ;
                    6302    ;             - BIT 2 - RESULT WAS ZER0
                    6303    ;
                    6304    ;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
                    6305    ;
                    6306    ;             - BIT 4 - NOT USED, 0 RETURNED
                    6307    ;
                    6308    ;             - BIT 5 - NOT USED, 0 RETURNED
                    6309    ;
                    6310    ;             - BIT 6 - NOT USED, 0 RETURNED
                    6311    ;
                    6312    ;             - BIT 7 - NOT USED, 0 RETURNED
                    6313    ;
                    6314    ; NOTE: When underflow occures, a ZERO result is returned.
                    6315    ;       When overflow or divide by zero occures, a result of
                    6316    ;       .99999999 E+127 is returned and it is up to the user
                    6317    ;       to handle these conditions as needed in the program.
                    6318    ;
                    6319    ; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
                    6320    ;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
                    6321    ;
                    6322    ;***********************************************************************
                    6323    ;
                    6324    ;***********************************************************************
                    6325    ;
BASIC52S                                                                                                      PAGE 111

                    6326    ; The following values MUST be provided by the user
                    6327    ;
                    6328    ;***********************************************************************
                    6329    ;
  0009              6330    ARG_STACK       EQU     9       ;ARGUMENT STACK POINTER
  0001              6331    ARG_STACK_PAGE  EQU     1
                    6332    ;OUTPUT          EQU     1990H   ;CALL LOCATION TO OUTPUT A CHARACTER
  0058              6333    CONVERT         EQU     58H     ;LOCATION TO CONVERT NUMBERS
  0019              6334    INTGRC          BIT     25      ;BIT SET IF INTGER ERROR
                    6335    ;
                    6336    ;***********************************************************************
                    6337    ;
                    6338    ; The following equates are used internally
                    6339    ;
                    6340    ;***********************************************************************
                    6341    ;
  0006              6342    FP_NUMBER_SIZE  EQU     6
  0000              6343    UNDERFLOW       EQU     0
  0001              6344    OVERFLOW        EQU     1
  0002              6345    ZERO            EQU     2
  0003              6346    ZERO_DIVIDE     EQU     3
                    6347    ;
                    6348    ;***********************************************************************
                    6349    ;
                    6350            ;**************************************************************
                    6351            ;
                    6352            ; The following internal locations are used by the math pack
                    6353            ; ordering is important and the FP_DIGITS must be bit
                    6354            ; addressable
                    6355            ;
                    6356            ;***************************************************************
                    6357            ;
  0028              6358    FP_STATUS       EQU     28H             ;NOT USED
  0029              6359    FP_TEMP         EQU     FP_STATUS+1     ;NOT USED
  002A              6360    FP_CARRY        EQU     FP_STATUS+2     ;USED FOR BITS
  0023              6361    ADD_IN          BIT     35              ;DCMPXZ IN BASIC BACKAGE
  0050              6362    XSIGN           BIT     FP_CARRY.0
  0051              6363    FOUND_RADIX     BIT     FP_CARRY.1
  0052              6364    FIRST_RADIX     BIT     FP_CARRY.2
  0053              6365    DONE_LOAD       BIT     FP_CARRY.3
  002B              6366    FP_DIG12        EQU     FP_CARRY+1
  002C              6367    FP_DIG34        EQU     FP_CARRY+2
  002D              6368    FP_DIG56        EQU     FP_CARRY+3
  002E              6369    FP_DIG78        EQU     FP_CARRY+4
  002F              6370    FP_SIGN         EQU     FP_CARRY+5
  0078              6371    MSIGN           BIT     FP_SIGN.0
  0030              6372    FP_EXP          EQU     FP_CARRY+6
  002B              6373    FP_NIB1         EQU     FP_DIG12
  002C              6374    FP_NIB2         EQU     FP_NIB1+1
  002D              6375    FP_NIB3         EQU     FP_NIB1+2
  002E              6376    FP_NIB4         EQU     FP_NIB1+3
  002F              6377    FP_NIB5         EQU     FP_NIB1+4
  0030              6378    FP_NIB6         EQU     FP_NIB1+5
  0031              6379    FP_NIB7         EQU     FP_NIB1+6
  0032              6380    FP_NIB8         EQU     FP_NIB1+7
  0033              6381    FP_ACCX         EQU     FP_NIB1+8
  0034              6382    FP_ACCC         EQU     FP_NIB1+9
  0035              6383    FP_ACC1         EQU     FP_NIB1+10
BASIC52S                                                                                                      PAGE 112

  0036              6384    FP_ACC2         EQU     FP_NIB1+11
  0037              6385    FP_ACC3         EQU     FP_NIB1+12
  0038              6386    FP_ACC4         EQU     FP_NIB1+13
  0039              6387    FP_ACC5         EQU     FP_NIB1+14
  003A              6388    FP_ACC6         EQU     FP_NIB1+15
  003B              6389    FP_ACC7         EQU     FP_NIB1+16
  003C              6390    FP_ACC8         EQU     FP_NIB1+17
  003D              6391    FP_ACCS         EQU     FP_NIB1+18
                    6392            ;
                    6393    ;        ORG     1990H
                    6394            ;
196C                6395    OUTPUT:
196C 020711         6396    T_L:    LJMP    TEROT
                    6397            ;
                    6398            ;
                    6399            ;**************************************************************
                    6400            ;
                    6401            ; The floating point entry points and jump table
                    6402            ;
                    6403            ;**************************************************************
                    6404            ;
196F 2193           6405    FP_BASE:        AJMP    FLOATING_ADD
1971 2189           6406    FP_BASE1:       AJMP    FLOATING_SUB
1973 4143           6407    FP_BASE2:       AJMP    FLOATING_COMP
1975 4173           6408    FP_BASE3:       AJMP    FLOATING_MUL
1977 41B0           6409    FP_BASE4:       AJMP    FLOATING_DIV
1979 8189           6410    FP_BASE5:       AJMP    HEXSCAN
197B 81C2           6411    FP_BASE6:       AJMP    FLOATING_POINT_INPUT
197D A17A           6412    FP_BASE7:       AJMP    FLOATING_POINT_OUTPUT
197F C1F7           6413    FP_BASE8:       AJMP    CONVERT_BINARY_TO_ASCII_STRING
1981 C19E           6414    FP_BASE9:       AJMP    CONVERT_ASCII_STRING_TO_BINARY
1983 C1D3           6415    FP_BASE10:      AJMP    MULNUM10
1985 E130           6416    FP_BASE11:      AJMP    HEXOUT
1987 81B6           6417    FP_BASE12:      AJMP    PUSHR2R0
                    6418            ;
                    6419            ;
1989                6420    FLOATING_SUB:
                    6421            ;
1989 75A001         6422            MOV     P2,#ARG_STACK_PAGE
198C A809           6423            MOV     R0,ARG_STACK
198E 18             6424            DEC     R0              ;POINT TO SIGN
198F E2             6425            MOVX    A,@R0           ;READ SIGN
1990 B2E0           6426            CPL     ACC.0
1992 F2             6427            MOVX    @R0,A
                    6428            ;
                    6429            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6430            ;
1993                6431    FLOATING_ADD:
                    6432            ;
                    6433            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6434            ;
                    6435            ;
1993 916A           6436            ACALL   MDES1           ;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
                    6437                                    ;R3=TOS-1 SIGN, OPERATION IS R1 # R0
                    6438            ;
1995 EF             6439            MOV     A,R7            ;GET TOS EXPONENT
1996 600D           6440            JZ      POP_AND_EXIT    ;IF TOS=0 THEN POP AND EXIT
1998 BE0012         6441            CJNE    R6,#0,LOAD1     ;CLEAR CARRY EXIT IF ZERO
BASIC52S                                                                                                      PAGE 113

                    6442            ;
                    6443            ;**************************************************************
                    6444            ;
199B                6445    SWAP_AND_EXIT:  ; Swap external args and return
                    6446            ;
                    6447            ;**************************************************************
                    6448            ;
199B 915E           6449            ACALL   LOAD_POINTERS
199D 7F06           6450            MOV     R7,#FP_NUMBER_SIZE
                    6451            ;
199F E2             6452    SE1:    MOVX    A,@R0           ;SWAP THE ARGUMENTS
19A0 F3             6453            MOVX    @R1,A
19A1 18             6454            DEC     R0
19A2 19             6455            DEC     R1
19A3 DFFA           6456            DJNZ    R7,SE1
                    6457            ;
19A5                6458    POP_AND_EXIT:
                    6459            ;
19A5 E509           6460            MOV     A,ARG_STACK     ;POP THE STACK
19A7 2406           6461            ADD     A,#FP_NUMBER_SIZE
19A9 F509           6462            MOV     ARG_STACK,A
19AB E4             6463            CLR     A
19AC 22             6464            RET
                    6465            ;
                    6466            ;
19AD 9E             6467    LOAD1:  SUBB    A,R6            ;A = ARG 1 EXP - ARG 2 EXP
19AE 8F30           6468            MOV     FP_EXP,R7       ;SAVE EXPONENT AND SIGN
19B0 8C2F           6469            MOV     FP_SIGN,R4
19B2 5009           6470            JNC     LOAD2           ;ARG1 EXPONENT IS LARGER OR SAME
19B4 8E30           6471            MOV     FP_EXP,R6
19B6 8B2F           6472            MOV     FP_SIGN,R3
19B8 F4             6473            CPL     A
19B9 04             6474            INC     A               ;COMPENSATE FOR EXP DELTA
19BA C8             6475            XCH     A,R0            ;FORCE R0 TO POINT AT THE LARGEST
19BB C9             6476            XCH     A,R1            ;EXPONENT
19BC C8             6477            XCH     A,R0
                    6478            ;
19BD FF             6479    LOAD2:  MOV     R7,A            ;SAVE THE EXPONENT DELTA IN R7
19BE C223           6480            CLR     ADD_IN
19C0 BD0002         6481            CJNE    R5,#0,LOAD21
19C3 D223           6482            SETB    ADD_IN
                    6483            ;
                    6484            ; Load the R1 mantissa
                    6485            ;
19C5 917B           6486    LOAD21: ACALL   LOADR1_MANTISSA ;LOAD THE SMALLEST NUMBER
                    6487            ;
                    6488            ; Now align the number to the delta exponent
                    6489            ; R4 points to the string of the last digits lost
                    6490            ;
19C7 BF0B00         6491            CJNE    R7,#DIGIT+DIGIT+3,LOAD22
19CA 4002           6492    LOAD22: JC      LOAD23
19CC 7F0A           6493            MOV     R7,#DIGIT+DIGIT+2
                    6494            ;
19CE 752A00         6495    LOAD23: MOV     FP_CARRY,#00    ;CLEAR THE CARRY
19D1 71BB           6496            ACALL   RIGHT           ;SHIFT THE NUMBER
                    6497            ;
                    6498            ; Set up for addition and subtraction
                    6499            ;
BASIC52S                                                                                                      PAGE 114

19D3 7F04           6500            MOV     R7,#DIGIT       ;LOOP COUNT
19D5 792E           6501            MOV     R1,#FP_DIG78
                    6502    ;
                    6503    ;*****************************************************************************
                    6504    ;****** Elektor 2 Patch ******************************************************
                    6505    ;****** Floting Point Error, found by D. Mudric and Z. Stojsavljevic *********
                    6506    ;
                    6507    ;       MOV     A,#9EH
                    6508    ;****** Error Number 1
                    6509    ;
                    6510    ;****** Value in R4 must be complemented with 100D (#9AH), it must be the
                    6511    ;****** first complement
                    6512    ;
                    6513    ;       CLR     C
                    6514    ;       SUBB    A,R4
                    6515    ;       DA      A
                    6516    ;       XCH     A,R4
                    6517    ;       JNZ     LOAD24
                    6518    ;       MOV     R4,A
                    6519    ;****** Error Number 2
                    6520    ;
                    6521    ;****** With substraction, after reducing both the minuend and the
                    6522    ;****** subtrahend to the same exponents, when R4 <> 0, it is obvious
                    6523    ;****** that one always has to make a borrowing from the first higher
                    6524    ;****** position of the minuend, not as it is stated by the original
                    6525    ;****** were it is made only when R4 = 50H
                    6526    ;
                    6527    ;LOAD24: CJNE    A,#50H,LOAD25   ;TEST FOR SUBTRACTION
                    6528    ;LOAD25: JNB     ADD_IN,SUBLP    ;DO SUBTRACTION IF NO ADD_IN
                    6529    ;
                    6530    ;*****************************************************************************
                    6531    ;****** Proper code starts here: *********************************************
                    6532    ;
19D7 749A           6533            mov     A,#9AH
19D9 C3             6534            clr     C
19DA 9C             6535            subb    A,R4
19DB D4             6536            da      A
19DC CC             6537            xch     A,R4
19DD 30231B         6538            jnb     ADD_IN,SUBLP
19E0 B45000         6539            cjne    A,#50H,LOAD25
                    6540    ;
                    6541    ;****** continue with original code: *****************************************
                    6542    ;
19E3 B3             6543    LOAD25: CPL     C               ;FLIP CARRY FOR ADDITION
19E4 31F2           6544            ACALL   ADDLP           ;DO ADDITION
                    6545            ;
19E6 5008           6546            JNC     ADD_R
19E8 052A           6547            INC     FP_CARRY
19EA 7F01           6548            MOV     R7,#1
19EC 71BB           6549            ACALL   RIGHT
19EE 7172           6550            ACALL   INC_FP_EXP      ;SHIFT AND BUMP EXPONENT
                    6551            ;
19F0 6163           6552    ADD_R:  AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6553            ;
19F2 E2             6554    ADDLP:  MOVX    A,@R0
19F3 37             6555            ADDC    A,@R1
19F4 D4             6556            DA      A
19F5 F7             6557            MOV     @R1,A
BASIC52S                                                                                                      PAGE 115

19F6 18             6558            DEC     R0
19F7 19             6559            DEC     R1
19F8 DFF8           6560            DJNZ    R7,ADDLP        ;LOOP UNTIL DONE
19FA 22             6561            RET
                    6562            ;
19FB E2             6563    SUBLP:  MOVX    A,@R0           ;NOW DO SUBTRACTION
19FC FE             6564            MOV     R6,A
19FD E4             6565            CLR     A
19FE 3499           6566            ADDC    A,#99H
1A00 97             6567            SUBB    A,@R1
1A01 2E             6568            ADD     A,R6
1A02 D4             6569            DA      A
1A03 F7             6570            MOV     @R1,A
1A04 18             6571            DEC     R0
1A05 19             6572            DEC     R1
1A06 DFF3           6573            DJNZ    R7,SUBLP
1A08 4011           6574            JC      FSUB6
                    6575            ;
                    6576            ; Need to complement the result and sign because the floating
                    6577            ; point accumulator mantissa was larger than the external
                    6578            ; memory and their signs were equal.
                    6579            ;
1A0A B278           6580            CPL     FP_SIGN.0
1A0C 792E           6581            MOV     R1,#FP_DIG78
1A0E 7F04           6582            MOV     R7,#DIGIT       ;LOOP COUNT
                    6583            ;
1A10 749A           6584    FSUB5:  MOV     A,#9AH
1A12 97             6585            SUBB    A,@R1
1A13 2400           6586            ADD     A,#0
1A15 D4             6587            DA      A
1A16 F7             6588            MOV     @R1,A
1A17 19             6589            DEC     R1
1A18 B3             6590            CPL     C
1A19 DFF5           6591            DJNZ    R7,FSUB5        ;LOOP
                    6592            ;
                    6593            ; Now see how many zeros their are
                    6594            ;
1A1B 782B           6595    FSUB6:  MOV     R0,#FP_DIG12
1A1D 7F00           6596            MOV     R7,#0
                    6597            ;
1A1F E6             6598    FSUB7:  MOV     A,@R0
1A20 7008           6599            JNZ     FSUB8
1A22 0F             6600            INC     R7
1A23 0F             6601            INC     R7
1A24 08             6602            INC     R0
1A25 B82FF7         6603            CJNE    R0,#FP_SIGN,FSUB7
1A28 61AB           6604            AJMP    ZERO_AND_EXIT
                    6605            ;
1A2A B41000         6606    FSUB8:  CJNE    A,#10H,FSUB81
1A2D 5001           6607    FSUB81: JNC     FSUB9
1A2F 0F             6608            INC     R7
                    6609            ;
                    6610            ; Now R7 has the number of leading zeros in the FP ACC
                    6611            ;
1A30 E530           6612    FSUB9:  MOV     A,FP_EXP        ;GET THE OLD EXPONENT
1A32 C3             6613            CLR     C
1A33 9F             6614            SUBB    A,R7            ;SUBTRACT FROM THE NUMBER OF ZEROS
1A34 600B           6615            JZ      FSUB10
BASIC52S                                                                                                      PAGE 116

1A36 4009           6616            JC      FSUB10
                    6617            ;
1A38 F530           6618            MOV     FP_EXP,A        ;SAVE THE NEW EXPONENT
                    6619            ;
1A3A 71F5           6620            ACALL   LEFT1           ;SHIFT THE FP ACC
1A3C 752A00         6621            MOV     FP_CARRY,#0
1A3F 6163           6622            AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6623            ;
1A41 61A5           6624    FSUB10: AJMP    UNDERFLOW_AND_EXIT
                    6625            ;
                    6626            ;***************************************************************
                    6627            ;
1A43                6628    FLOATING_COMP:  ; Compare two floating point numbers
                    6629                    ; used for relational operations and is faster
                    6630                    ; than subtraction. ON RETURN, The carry is set
                    6631                    ; if ARG1 is > ARG2, else carry is not set
                    6632                    ; if ARG1 = ARG2, F0 gets set
                    6633            ;
                    6634            ;***************************************************************
                    6635            ;
1A43 916A           6636            ACALL   MDES1           ;SET UP THE REGISTERS
1A45 E509           6637            MOV     A,ARG_STACK
1A47 240C           6638            ADD     A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1A49 F509           6639            MOV     ARG_STACK,A     ;POP THE STACK TWICE, CLEAR THE CARRY
1A4B EE             6640            MOV     A,R6            ;CHECK OUT EXPONENTS
1A4C C2D5           6641            CLR     F0
1A4E 9F             6642            SUBB    A,R7
1A4F 600A           6643            JZ      EXPONENTS_EQUAL
1A51 4003           6644            JC      ARG1_EXP_IS_LARGER
                    6645            ;
                    6646            ; Now the ARG2 EXPONENT is > ARG1 EXPONENT
                    6647            ;
1A53                6648    SIGNS_DIFFERENT:
                    6649            ;
1A53 EB             6650            MOV     A,R3            ;SEE IF SIGN OF ARG2 IS POSITIVE
1A54 8001           6651            SJMP    ARG1_EXP_IS_LARGER1
                    6652            ;
1A56                6653    ARG1_EXP_IS_LARGER:
                    6654            ;
1A56 EC             6655            MOV     A,R4            ;GET THE SIGN OF ARG1 EXPONENT
1A57                6656    ARG1_EXP_IS_LARGER1:
1A57 6001           6657            JZ      ARG1_EXP_IS_LARGER2
1A59 B3             6658            CPL     C
1A5A                6659    ARG1_EXP_IS_LARGER2:
1A5A 22             6660            RET
                    6661            ;
1A5B                6662    EXPONENTS_EQUAL:
                    6663            ;
                    6664            ; First, test the sign, then the mantissa
                    6665            ;
1A5B BD00F5         6666            CJNE    R5,#0,SIGNS_DIFFERENT
                    6667            ;
1A5E                6668    BOTH_PLUS:
                    6669            ;
1A5E 7F04           6670            MOV     R7,#DIGIT       ;POINT AT MS DIGIT
1A60 18             6671            DEC     R0
1A61 18             6672            DEC     R0
1A62 18             6673            DEC     R0
BASIC52S                                                                                                      PAGE 117

1A63 19             6674            DEC     R1
1A64 19             6675            DEC     R1
1A65 19             6676            DEC     R1
                    6677            ;
                    6678            ; Now do the compare
                    6679            ;
1A66 E2             6680    CLOOP:  MOVX    A,@R0
1A67 FE             6681            MOV     R6,A
1A68 E3             6682            MOVX    A,@R1
1A69 9E             6683            SUBB    A,R6
1A6A 70EA           6684            JNZ     ARG1_EXP_IS_LARGER
1A6C 08             6685            INC     R0
1A6D 09             6686            INC     R1
1A6E DFF6           6687            DJNZ    R7,CLOOP
                    6688            ;
                    6689            ; If here, the numbers are the same, the carry is cleared
                    6690            ;
1A70 D2D5           6691            SETB    F0
1A72 22             6692            RET                     ;EXIT WITH EQUAL
                    6693            ;
                    6694    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                    6695    ;
1A73                6696    FLOATING_MUL:   ; Floating point multiply
                    6697    ;
                    6698    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                    6699    ;
1A73 9168           6700            ACALL   MUL_DIV_EXP_AND_SIGN
                    6701            ;
                    6702            ; check for zero exponents
                    6703            ;
1A75 BE0002         6704            CJNE    R6,#00,FMUL1    ;ARG 2 EXP ZERO?
1A78 61AB           6705    FMUL0:  AJMP    ZERO_AND_EXIT
                    6706            ;
                    6707            ; calculate the exponent
                    6708            ;
1A7A 8D2F           6709    FMUL1:  MOV     FP_SIGN,R5      ;SAVE THE SIGN, IN CASE OF FAILURE
                    6710            ;
1A7C EF             6711            MOV     A,R7
1A7D 60F9           6712            JZ      FMUL0
1A7F 2E             6713            ADD     A,R6            ;ADD THE EXPONENTS
1A80 20E705         6714            JB      ACC.7,FMUL_OVER
1A83 10D708         6715            JBC     CY,FMUL21       ;SEE IF CARRY IS SET
                    6716            ;
1A86 61A5           6717            AJMP    UNDERFLOW_AND_EXIT
                    6718            ;
1A88                6719    FMUL_OVER:
                    6720            ;
1A88 5002           6721            JNC     FMUL2           ;OK IF SET
                    6722            ;
1A8A 6194           6723    FOV:    AJMP    OVERFLOW_AND_EXIT
                    6724    ;*****************************************************************************
                    6725    ;****** Wulf 1 Bugfix 1 ******************************************************
                    6726    ;****** Multiplication Error, found by D. Wulf *******************************
                    6727    ;
                    6728    ; FMUL2: SUBB    A,#129          ;SUBTRACT THE EXPONENT BIAS
                    6729    ;
                    6730    ;*****************************************************************************
                    6731    ;****** Proper code starts here: *********************************************
BASIC52S                                                                                                      PAGE 118

                    6732    ;
1A8C D228           6733    FMUL2:  setb    mul_underflow   ;Flag of multiplication limit case
1A8E 9483           6734    FMUL21: subb    A,#83H          ;exp. multipl. results are within the limits
1A90 04             6735            inc     A               ;Correct SUBB 83H
1A91 04             6736            inc     A               ;to original SUBB 81H
1A92 4002           6737            jc     NMARK_L          ;Limit case
1A94 C228           6738            clr     mul_underflow   ;No limit case
1A96                6739    NMARK_L:
                    6740    ;
                    6741    ;****** continue with original code: *****************************************
                    6742    ;
1A96 FE             6743            MOV     R6,A            ;SAVE IT FOR LATER
                    6744            ;
                    6745            ; Unpack and load R0
                    6746            ;
1A97 717E           6747            ACALL   UNPACK_R0
                    6748            ;
                    6749            ; Now set up for loop multiply
                    6750            ;
1A99 7B04           6751            MOV     R3,#DIGIT
1A9B AC01           6752            MOV     R4,R1B0
                    6753            ;
                    6754            ; Now, do the multiply and accumulate the product
                    6755            ;
1A9D 8C01           6756    FMUL3:  MOV     R1B0,R4
1A9F E3             6757            MOVX    A,@R1
1AA0 FA             6758            MOV     R2,A
1AA1 912B           6759            ACALL   MUL_NIBBLE
                    6760            ;
1AA3 EA             6761            MOV     A,R2
1AA4 C4             6762            SWAP    A
1AA5 912B           6763            ACALL   MUL_NIBBLE
1AA7 1C             6764            DEC     R4
1AA8 DBF3           6765            DJNZ    R3,FMUL3
                    6766            ;
                    6767            ; Now, pack and restore the sign
                    6768            ;
1AAA 8E30           6769            MOV     FP_EXP,R6
1AAC 8D2F           6770            MOV     FP_SIGN,R5
1AAE 6111           6771            AJMP    PACK            ;FINISH IT OFF
                    6772            ;
                    6773            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6774            ;
1AB0                6775    FLOATING_DIV:
                    6776            ;
                    6777            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6778            ;
1AB0 916A           6779            ACALL   MDES1
                    6780            ;
                    6781            ; Check the exponents
                    6782            ;
1AB2 8D2F           6783            MOV     FP_SIGN,R5      ;SAVE THE SIGN
1AB4 BF0006         6784            CJNE    R7,#0,DIV0      ;CLEARS THE CARRY
1AB7 7194           6785            ACALL   OVERFLOW_AND_EXIT
1AB9 E4             6786            CLR     A
1ABA D2E3           6787            SETB    ACC.ZERO_DIVIDE
1ABC 22             6788            RET
                    6789            ;
BASIC52S                                                                                                      PAGE 119

1ABD EE             6790    DIV0:   MOV     A,R6            ;GET EXPONENT
1ABE 60B8           6791            JZ      FMUL0           ;EXIT IF ZERO
1AC0 9F             6792            SUBB    A,R7            ;DELTA EXPONENT
1AC1 20E704         6793            JB      ACC.7,D_UNDER
1AC4 5004           6794            JNC     DIV3
1AC6 61A5           6795            AJMP    UNDERFLOW_AND_EXIT
                    6796            ;
1AC8 50C0           6797    D_UNDER:JNC     FOV
                    6798            ;
1ACA 2481           6799    DIV3:   ADD     A,#129          ;CORRECTLY BIAS THE EXPONENT
1ACC F530           6800            MOV     FP_EXP,A        ;SAVE THE EXPONENT
1ACE 917B           6801            ACALL   LOADR1_MANTISSA ;LOAD THE DIVIDED
                    6802            ;
1AD0 7A34           6803            MOV     R2,#FP_ACCC     ;SAVE LOCATION
1AD2 AB00           6804            MOV     R3,R0B0         ;SAVE POINTER IN R3
1AD4 752A00         6805            MOV     FP_CARRY,#0     ;ZERO CARRY BYTE
                    6806            ;
1AD7 7DFF           6807    DIV4:   MOV     R5,#0FFH        ;LOOP COUNT
1AD9 D3             6808            SETB    C
                    6809            ;
1ADA 8B00           6810    DIV5:   MOV     R0B0,R3         ;RESTORE THE EXTERNAL POINTER
1ADC 792E           6811            MOV     R1,#FP_DIG78    ;SET UP INTERNAL POINTER
1ADE 7F04           6812            MOV     R7,#DIGIT       ;LOOP COUNT
1AE0 5017           6813            JNC     DIV7            ;EXIT IF NO CARRY
                    6814            ;
1AE2 E2             6815    DIV6:   MOVX    A,@R0           ;DO ACCUMLATION
1AE3 FE             6816            MOV     R6,A
1AE4 E4             6817            CLR     A
1AE5 3499           6818            ADDC    A,#99H
1AE7 9E             6819            SUBB    A,R6
1AE8 27             6820            ADD     A,@R1
1AE9 D4             6821            DA      A
1AEA F7             6822            MOV     @R1,A
1AEB 18             6823            DEC     R0
1AEC 19             6824            DEC     R1
1AED DFF3           6825            DJNZ    R7,DIV6         ;LOOP
                    6826            ;
1AEF 0D             6827            INC     R5              ;SUBTRACT COUNTER
1AF0 40E8           6828            JC      DIV5            ;KEEP LOOPING IF CARRY
1AF2 E7             6829            MOV     A,@R1           ;GET CARRY
1AF3 9401           6830            SUBB    A,#1            ;CARRY IS CLEARED
1AF5 F7             6831            MOV     @R1,A           ;SAVE CARRY DIGIT
1AF6 B3             6832            CPL     C
1AF7 80E1           6833            SJMP    DIV5            ;LOOP
                    6834            ;
                    6835            ; Restore the result if carry was found
                    6836            ;
1AF9 31F2           6837    DIV7:   ACALL   ADDLP           ;ADD NUMBER BACK
1AFB 7700           6838            MOV     @R1,#0          ;CLEAR CARRY
1AFD 8A00           6839            MOV     R0B0,R2         ;GET SAVE COUNTER
1AFF A605           6840            MOV     @R0,5           ;SAVE COUNT BYTE
                    6841            ;
1B01 0A             6842            INC     R2              ;ADJUST SAVE COUNTER
1B02 7F01           6843            MOV     R7,#1           ;BUMP DIVIDEND
1B04 71F3           6844            ACALL   LEFT
1B06 BA3ECE         6845            CJNE    R2,#FP_ACC8+2,DIV4
                    6846            ;
1B09 D53002         6847            DJNZ    FP_EXP,DIV8
BASIC52S                                                                                                      PAGE 120

1B0C 61A5           6848            AJMP    UNDERFLOW_AND_EXIT
                    6849            ;
1B0E 752A00         6850    DIV8:   MOV     FP_CARRY,#0
                    6851            ;
                    6852            ;***************************************************************
                    6853            ;
1B11                6854    PACK:   ; Pack the mantissa
                    6855            ;
                    6856            ;***************************************************************
                    6857            ;
                    6858            ; First, set up the pointers
                    6859            ;
1B11 7834           6860            MOV     R0,#FP_ACCC
1B13 E6             6861            MOV     A,@R0           ;GET FP_ACCC
1B14 FE             6862            MOV     R6,A            ;SAVE FOR ZERO COUNT
1B15 6003           6863            JZ      PACK0           ;JUMP OVER IF ZERO
1B17 7172           6864            ACALL   INC_FP_EXP      ;BUMP THE EXPONENT
1B19 18             6865            DEC     R0
                    6866            ;
1B1A 08             6867    PACK0:  INC     R0              ;POINT AT FP_ACC1
                    6868            ;
1B1B 7408           6869    PACK1:  MOV     A,#8            ;ADJUST NIBBLE POINTER
1B1D F9             6870            MOV     R1,A
1B1E 28             6871            ADD     A,R0
1B1F F8             6872            MOV     R0,A
1B20 B60500         6873            CJNE    @R0,#5,PACK11   ;SEE IF ADJUSTING NEEDED
1B23 4013           6874    PACK11: JC      PACK31
                    6875            ;
1B25 D3             6876    PACK2:  SETB    C
1B26 E4             6877            CLR     A
1B27 18             6878            DEC     R0
1B28 36             6879            ADDC    A,@R0
1B29 D4             6880            DA      A
1B2A D6             6881            XCHD    A,@R0           ;SAVE THE VALUE
1B2B 30E409         6882            JNB     ACC.4,PACK3
1B2E D9F5           6883            DJNZ    R1,PACK2
                    6884            ;
1B30 18             6885            DEC     R0
1B31 7601           6886            MOV     @R0,#1
1B33 7172           6887            ACALL   INC_FP_EXP
1B35 8018           6888            SJMP    PACK4
                    6889            ;
1B37 19             6890    PACK3:  DEC     R1
1B38 E9             6891    PACK31: MOV     A,R1
1B39 C3             6892            CLR     C
1B3A C8             6893            XCH     A,R0
1B3B 98             6894            SUBB    A,R0
1B3C F8             6895            MOV     R0,A
                    6896    ;
                    6897    ;*****************************************************************************
                    6898    ;****** Wulf 1 Bugfix 2 ******************************************************
                    6899    ;****** Multiplication Error, found by D. Wulf *******************************
                    6900    ;
1B3D 30280F         6901            jnb     mul_underflow,PACK4
1B40 C228           6902            clr     mul_underflow
1B42 E530           6903            mov     A,FP_EXP        ;test of exceeding in limit case
1B44 6007           6904            jz      UNDER_MD        ;message about underflow
1B46 F4             6905            cpl     a               ;test of exceeding in limit case
BASIC52S                                                                                                      PAGE 121

1B47 6004           6906            jz      UNDER_MD        ;message about underflow
1B49 F4             6907            cpl     a               ;restore original exp
1B4A B40102         6908            cjne    a,#1,pack4      ;jump if not outer limit
1B4D                6909    UNDER_MD:
1B4D 61A5           6910            ajmp    UNDERFLOW_AND_EXIT
                    6911    ;
                    6912    ;****** continue with original code: *****************************************
                    6913    ;
1B4F 792B           6914    PACK4:  MOV     R1,#FP_DIG12
                    6915            ;
                    6916            ; Now, pack
                    6917            ;
1B51 E6             6918    PLOOP:  MOV     A,@R0
1B52 C4             6919            SWAP    A               ;FLIP THE DIGITS
1B53 08             6920            INC     R0
1B54 D6             6921            XCHD    A,@R0
1B55 4206           6922            ORL     6,A             ;ACCUMULATE THE OR'ED DIGITS
1B57 F7             6923            MOV     @R1,A
1B58 08             6924            INC     R0
1B59 09             6925            INC     R1
1B5A B92FF4         6926            CJNE    R1,#FP_SIGN,PLOOP
1B5D EE             6927            MOV     A,R6
1B5E 7003           6928            JNZ     STORE_ALIGN_TEST_AND_EXIT
1B60 753000         6929            MOV     FP_EXP,#0       ;ZERO EXPONENT
                    6930            ;
                    6931            ;**************************************************************
                    6932            ;
1B63                6933    STORE_ALIGN_TEST_AND_EXIT:      ;Save the number align carry and exit
                    6934            ;
                    6935            ;**************************************************************
                    6936            ;
1B63 915E           6937            ACALL   LOAD_POINTERS
1B65 8909           6938            MOV     ARG_STACK,R1    ;SET UP THE NEW STACK
1B67 7830           6939            MOV     R0,#FP_EXP
                    6940            ;
                    6941            ; Now load the numbers
                    6942            ;
1B69 E6             6943    STORE2: MOV     A,@R0
1B6A F3             6944            MOVX    @R1,A           ;SAVE THE NUMBER
1B6B 18             6945            DEC     R0
1B6C 19             6946            DEC     R1
1B6D B82AF9         6947            CJNE    R0,#FP_CARRY,STORE2
                    6948            ;
1B70 E4             6949            CLR     A               ;NO ERRORS
                    6950            ;
1B71 22             6951    PRET:   RET                     ;EXIT
                    6952            ;
1B72                6953    INC_FP_EXP:
                    6954            ;
1B72 0530           6955            INC     FP_EXP
1B74 E530           6956            MOV     A,FP_EXP
1B76 70F9           6957            JNZ     PRET            ;EXIT IF NOT ZERO
1B78 D0E0           6958            POP     ACC             ;WASTE THE CALLING STACK
1B7A D0E0           6959            POP     ACC
1B7C 6194           6960            AJMP    OVERFLOW_AND_EXIT
                    6961    ;
                    6962    ;***********************************************************************
                    6963    ;
BASIC52S                                                                                                      PAGE 122

1B7E                6964    UNPACK_R0:      ; Unpack BCD digits and load into nibble locations
                    6965    ;
                    6966    ;***********************************************************************
                    6967            ;
1B7E C001           6968            PUSH    R1B0
1B80 7932           6969            MOV     R1,#FP_NIB8
                    6970            ;
1B82 E2             6971    ULOOP:  MOVX    A,@R0
1B83 540F           6972            ANL     A,#0FH
1B85 F7             6973            MOV     @R1,A           ;SAVE THE NIBBLE
1B86 E2             6974            MOVX    A,@R0
1B87 C4             6975            SWAP    A
1B88 540F           6976            ANL     A,#0FH
1B8A 19             6977            DEC     R1
1B8B F7             6978            MOV     @R1,A           ;SAVE THE NIBBLE AGAIN
1B8C 18             6979            DEC     R0
1B8D 19             6980            DEC     R1
1B8E B92AF1         6981            CJNE    R1,#FP_NIB1-1,ULOOP
                    6982            ;
1B91 D001           6983            POP     R1B0
                    6984            ;
1B93 22             6985    LOAD7:  RET
                    6986            ;
                    6987            ;**************************************************************
                    6988            ;
1B94                6989    OVERFLOW_AND_EXIT:      ;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
                    6990            ;
                    6991            ;**************************************************************
                    6992            ;
1B94 782E           6993            MOV     R0,#FP_DIG78
1B96 7499           6994            MOV     A,#99H
                    6995            ;
1B98 F6             6996    OVE1:   MOV     @R0,A
1B99 18             6997            DEC     R0
1B9A B82AFB         6998            CJNE    R0,#FP_CARRY,OVE1
                    6999            ;
1B9D 7530FF         7000            MOV     FP_EXP,#0FFH
1BA0 7163           7001            ACALL   STORE_ALIGN_TEST_AND_EXIT
                    7002            ;
1BA2 D2E1           7003            SETB    ACC.OVERFLOW
1BA4 22             7004            RET
                    7005            ;
                    7006            ;**************************************************************
                    7007            ;
1BA5                7008    UNDERFLOW_AND_EXIT:     ;LOAD 0, SET UF BIT, AND EXIT
                    7009            ;
                    7010            ;**************************************************************
                    7011            ;
1BA5 71AB           7012            ACALL   ZERO_AND_EXIT
1BA7 E4             7013            CLR     A
1BA8 D2E0           7014            SETB    ACC.UNDERFLOW
1BAA 22             7015            RET
                    7016            ;
                    7017            ;**************************************************************
                    7018            ;
1BAB                7019    ZERO_AND_EXIT:          ;LOAD 0, SET ZERO BIT, AND EXIT
                    7020            ;
                    7021            ;**************************************************************
BASIC52S                                                                                                      PAGE 123

                    7022            ;
1BAB 71B2           7023            ACALL   FP_CLEAR
1BAD 7163           7024            ACALL   STORE_ALIGN_TEST_AND_EXIT
1BAF D2E2           7025            SETB    ACC.ZERO
1BB1 22             7026            RET                     ;EXIT
                    7027            ;
                    7028            ;**************************************************************
                    7029            ;
1BB2                7030    FP_CLEAR:
                    7031            ;
                    7032            ; Clear internal storage
                    7033            ;
                    7034            ;**************************************************************
                    7035            ;
1BB2 E4             7036            CLR     A
1BB3 783D           7037            MOV     R0,#FP_ACC8+1
                    7038            ;
1BB5 F6             7039    FPC1:   MOV     @R0,A
1BB6 18             7040            DEC     R0
1BB7 B829FB         7041            CJNE    R0,#FP_TEMP,FPC1
1BBA 22             7042            RET
                    7043            ;
                    7044            ;**************************************************************
                    7045            ;
1BBB                7046    RIGHT:  ; Shift ACCUMULATOR RIGHT the number of nibbles in R7
                    7047            ; Save the shifted values in R4 if SAVE_ROUND is set
                    7048            ;
                    7049            ;**************************************************************
                    7050            ;
1BBB 7C00           7051            MOV     R4,#0           ;IN CASE OF NO SHIFT
                    7052            ;
1BBD C3             7053    RIGHT1: CLR     C
1BBE EF             7054    RIGHT2: MOV     A,R7            ;GET THE DIGITS TO SHIFT
1BBF 6022           7055            JZ      RIGHTL1         ;EXIT IF ZERO
1BC1 9402           7056            SUBB    A,#2            ;TWO TO DO?
1BC3 501F           7057            JNC     RIGHT5          ;SHIFT TWO NIBBLES
                    7058            ;
                    7059            ; Swap one nibble then exit
                    7060            ;
1BC5 C000           7061    RIGHT3: PUSH    R0B0            ;SAVE POINTER REGISTER
1BC7 C001           7062            PUSH    R1B0
                    7063            ;
1BC9 792E           7064            MOV     R1,#FP_DIG78    ;LOAD THE POINTERS
1BCB 782D           7065            MOV     R0,#FP_DIG56
1BCD EC             7066            MOV     A,R4            ;GET THE OVERFLOW REGISTER
1BCE D7             7067            XCHD    A,@R1           ;GET DIGIT 8
1BCF C4             7068            SWAP    A               ;FLIP FOR LOAD
1BD0 FC             7069            MOV     R4,A
                    7070            ;
1BD1 E7             7071    RIGHTL: MOV     A,@R1           ;GET THE LOW ORDER BYTE
1BD2 D6             7072            XCHD    A,@R0           ;SWAP NIBBLES
1BD3 C4             7073            SWAP    A               ;FLIP FOR STORE
1BD4 F7             7074            MOV     @R1,A           ;SAVE THE DIGITS
1BD5 18             7075            DEC     R0              ;BUMP THE POINTERS
1BD6 19             7076            DEC     R1
1BD7 B92AF7         7077            CJNE    R1,#FP_DIG12-1,RIGHTL   ;LOOP
                    7078            ;
1BDA E7             7079            MOV     A,@R1           ;ACC = CH8
BASIC52S                                                                                                      PAGE 124

1BDB C4             7080            SWAP    A               ;ACC = 8CH
1BDC 540F           7081            ANL     A,#0FH          ;ACC = 0CH
1BDE F7             7082            MOV     @R1,A           ;CARRY DONE
1BDF D001           7083            POP     R1B0            ;EXIT
1BE1 D000           7084            POP     R0B0            ;RESTORE REGISTER
1BE3 22             7085    RIGHTL1:RET
                    7086            ;
1BE4 FF             7087    RIGHT5: MOV     R7,A            ;SAVE THE NEW SHIFT NUMBER
1BE5 E4             7088            CLR     A
1BE6 C52A           7089            XCH     A,FP_CARRY      ;SWAP THE NIBBLES
1BE8 C52B           7090            XCH     A,FP_DIG12
1BEA C52C           7091            XCH     A,FP_DIG34
1BEC C52D           7092            XCH     A,FP_DIG56
1BEE C52E           7093            XCH     A,FP_DIG78
1BF0 FC             7094            MOV     R4,A            ;SAVE THE LAST DIGIT SHIFTED
1BF1 80CB           7095            SJMP    RIGHT2
                    7096            ;
                    7097            ;***************************************************************
                    7098            ;
1BF3                7099    LEFT:   ; Shift ACCUMULATOR LEFT the number of nibbles in R7
                    7100            ;
                    7101            ;***************************************************************
                    7102            ;
1BF3 7C00           7103            MOV     R4,#00H         ;CLEAR FOR SOME ENTRYS
                    7104            ;
1BF5 C3             7105    LEFT1:  CLR     C
1BF6 EF             7106    LEFT2:  MOV     A,R7            ;GET SHIFT VALUE
1BF7 6022           7107            JZ      LEFTL1          ;EXIT IF ZERO
1BF9 9402           7108            SUBB    A,#2            ;SEE HOW MANY BYTES TO SHIFT
1BFB 501F           7109            JNC     LEFT5
                    7110            ;
1BFD C000           7111    LEFT3:  PUSH    R0B0            ;SAVE POINTER
1BFF C001           7112            PUSH    R1B0
1C01 782A           7113            MOV     R0,#FP_CARRY
1C03 792B           7114            MOV     R1,#FP_DIG12
                    7115            ;
1C05 E6             7116            MOV     A,@R0           ;ACC=CHCL
1C06 C4             7117            SWAP    A               ;ACC = CLCH
1C07 F6             7118            MOV     @R0,A           ;ACC = CLCH, @R0 = CLCH
                    7119            ;
1C08 E7             7120    LEFTL:  MOV     A,@R1           ;DIG 12
1C09 C4             7121            SWAP    A               ;DIG 21
1C0A D6             7122            XCHD    A,@R0
1C0B F7             7123            MOV     @R1,A           ;SAVE IT
1C0C 08             7124            INC     R0              ;BUMP POINTERS
1C0D 09             7125            INC     R1
1C0E B82EF7         7126            CJNE    R0,#FP_DIG78,LEFTL
                    7127            ;
1C11 EC             7128            MOV     A,R4
1C12 C4             7129            SWAP    A
1C13 D6             7130            XCHD    A,@R0
1C14 54F0           7131            ANL     A,#0F0H
1C16 FC             7132            MOV     R4,A
                    7133            ;
1C17 D001           7134            POP     R1B0
1C19 D000           7135            POP     R0B0            ;RESTORE
1C1B 22             7136    LEFTL1: RET                     ;DONE
                    7137            ;
BASIC52S                                                                                                      PAGE 125

1C1C FF             7138    LEFT5:  MOV     R7,A            ;RESTORE COUNT
1C1D E4             7139            CLR     A
1C1E CC             7140            XCH     A,R4            ;GET THE RESTORATION BYTE
1C1F C52E           7141            XCH     A,FP_DIG78      ;DO THE SWAP
1C21 C52D           7142            XCH     A,FP_DIG56
1C23 C52C           7143            XCH     A,FP_DIG34
1C25 C52B           7144            XCH     A,FP_DIG12
1C27 C52A           7145            XCH     A,FP_CARRY
1C29 80CB           7146            SJMP    LEFT2
                    7147            ;
1C2B                7148    MUL_NIBBLE:
                    7149            ;
                    7150            ; Multiply the nibble in R7 by the FP_NIB locations
                    7151            ; accumulate the product in FP_ACC
                    7152            ;
                    7153            ; Set up the pointers for multiplication
                    7154            ;
1C2B 540F           7155            ANL     A,#0FH          ;STRIP OFF MS NIBBLE
1C2D FF             7156            MOV     R7,A
1C2E 783C           7157            MOV     R0,#FP_ACC8
1C30 7932           7158            MOV     R1,#FP_NIB8
1C32 E4             7159            CLR     A
1C33 F533           7160            MOV     FP_ACCX,A
                    7161            ;
1C35 18             7162    MNLOOP: DEC     R0              ;BUMP POINTER TO PROPAGATE CARRY
1C36 26             7163            ADD     A,@R0           ;ATTEMPT TO FORCE CARRY
1C37 D4             7164            DA      A               ;BCD ADJUST
1C38 30E403         7165            JNB     ACC.4,MNL0      ;DON'T ADJUST IF NO NEED
1C3B 18             7166            DEC     R0              ;PROPAGATE CARRY TO THE NEXT DIGIT
1C3C 06             7167            INC     @R0             ;DO THE ADJUSTING
1C3D 08             7168            INC     R0              ;RESTORE R0
                    7169            ;
1C3E D6             7170    MNL0:   XCHD    A,@R0           ;RESTORE INITIAL NUMBER
1C3F 8FF0           7171            MOV     B,R7            ;GET THE NUBBLE TO MULTIPLY
1C41 E7             7172            MOV     A,@R1           ;GET THE OTHER NIBBLE
1C42 A4             7173            MUL     AB              ;DO THE MULTIPLY
1C43 75F00A         7174            MOV     B,#10           ;NOW BCD ADJUST
1C46 84             7175            DIV     AB
1C47 C5F0           7176            XCH     A,B             ;GET THE REMAINDER
1C49 26             7177            ADD     A,@R0           ;PROPAGATE THE PARTIAL PRODUCTS
1C4A D4             7178            DA      A               ;BCD ADJUST
1C4B 30E402         7179            JNB     ACC.4,MNL1      ;PROPAGATE PARTIAL PRODUCT CARRY
1C4E 05F0           7180            INC     B
                    7181            ;
1C50 08             7182    MNL1:   INC     R0
1C51 D6             7183            XCHD    A,@R0           ;SAVE THE NEW PRODUCT
1C52 18             7184            DEC     R0
1C53 E5F0           7185            MOV     A,B             ;GET BACK THE QUOTIENT
1C55 19             7186            DEC     R1
1C56 B92ADC         7187            CJNE    R1,#FP_NIB1-1,MNLOOP
                    7188            ;
1C59 2533           7189            ADD     A,FP_ACCX       ;GET THE OVERFLOW
1C5B D4             7190            DA      A               ;ADJUST
1C5C F6             7191            MOV     @R0,A           ;SAVE IT
1C5D 22             7192            RET                     ;EXIT
                    7193            ;
                    7194            ;***************************************************************
                    7195            ;
BASIC52S                                                                                                      PAGE 126

1C5E                7196    LOAD_POINTERS:  ; Load the ARG_STACK into R0 and bump R1
                    7197            ;
                    7198            ;***************************************************************
                    7199            ;
1C5E 75A001         7200            MOV     P2,#ARG_STACK_PAGE
1C61 A809           7201            MOV     R0,ARG_STACK
1C63 7406           7202            MOV     A,#FP_NUMBER_SIZE
1C65 28             7203            ADD     A,R0
1C66 F9             7204            MOV     R1,A
1C67 22             7205            RET
                    7206            ;
                    7207            ;***************************************************************
                    7208            ;
1C68                7209    MUL_DIV_EXP_AND_SIGN:
                    7210            ;
                    7211            ; Load the sign into R7, R6. R5 gets the sign for
                    7212            ; multiply and divide.
                    7213            ;
                    7214            ;***************************************************************
                    7215            ;
1C68 71B2           7216            ACALL   FP_CLEAR        ;CLEAR INTERNAL MEMORY
                    7217            ;
1C6A 915E           7218    MDES1:  ACALL   LOAD_POINTERS   ;LOAD REGISTERS
1C6C E2             7219            MOVX    A,@R0           ;ARG 1 EXP
1C6D FF             7220            MOV     R7,A            ;SAVED IN R7
1C6E E3             7221            MOVX    A,@R1           ;ARG 2 EXP
1C6F FE             7222            MOV     R6,A            ;SAVED IN R6
1C70 18             7223            DEC     R0              ;BUMP POINTERS TO SIGN
1C71 19             7224            DEC     R1
1C72 E2             7225            MOVX    A,@R0           ;GET THE SIGN
1C73 FC             7226            MOV     R4,A            ;SIGN OF ARG1
1C74 E3             7227            MOVX    A,@R1           ;GET SIGN OF NEXT ARG
1C75 FB             7228            MOV     R3,A            ;SIGN OF ARG2
1C76 6C             7229            XRL     A,R4            ;ACC GETS THE NEW SIGN
1C77 FD             7230            MOV     R5,A            ;R5 GETS THE NEW SIGN
                    7231            ;
                    7232            ; Bump the pointers to point at the LS digit
                    7233            ;
1C78 18             7234            DEC     R0
1C79 19             7235            DEC     R1
                    7236            ;
1C7A 22             7237            RET
                    7238            ;
                    7239            ;***************************************************************
                    7240            ;
1C7B                7241    LOADR1_MANTISSA:
                    7242            ;
                    7243            ; Load the mantissa of R0 into FP_Digits
                    7244            ;
                    7245            ;***************************************************************
                    7246            ;
1C7B C000           7247            PUSH    R0B0            ;SAVE REGISTER 1
1C7D 782E           7248            MOV     R0,#FP_DIG78    ;SET UP THE POINTER
                    7249            ;
1C7F E3             7250    LOADR1: MOVX    A,@R1
1C80 F6             7251            MOV     @R0,A
1C81 19             7252            DEC     R1
1C82 18             7253            DEC     R0
BASIC52S                                                                                                      PAGE 127

1C83 B82AF9         7254            CJNE    R0,#FP_CARRY,LOADR1
                    7255            ;
1C86 D000           7256            POP     R0B0
1C88 22             7257            RET
                    7258            ;
                    7259            ;***************************************************************
                    7260            ;
1C89                7261    HEXSCAN:        ; Scan a string to determine if it is a hex number
                    7262                    ; set carry if hex, else carry = 0
                    7263            ;
                    7264            ;***************************************************************
                    7265            ;
1C89 B15F           7266            ACALL   GET_DPTR_CHARACTER
1C8B C083           7267            PUSH    DPH
1C8D C082           7268            PUSH    DPL             ;SAVE THE POINTER
                    7269            ;
1C8F E0             7270    HEXSC1: MOVX    A,@DPTR         ;GET THE CHARACTER
1C90 F1ED           7271            ACALL   DIGIT_CHECK     ;SEE IF A DIGIT
1C92 4012           7272            JC      HS1             ;CONTINUE IF A DIGIT
1C94 91A9           7273            ACALL   HEX_CHECK       ;SEE IF HEX
1C96 400E           7274            JC      HS1
                    7275            ;
1C98 C2E5           7276            CLR     ACC.5           ;NO LOWER CASE
1C9A B44803         7277            CJNE    A,#'H',HEXDON
1C9D D3             7278            SETB    C
1C9E 8001           7279            SJMP    HEXDO1          ;NUMBER IS VALID HEX, MAYBE
                    7280            ;
1CA0 C3             7281    HEXDON: CLR     C
                    7282            ;
1CA1 D082           7283    HEXDO1: POP     DPL             ;RESTORE POINTER
1CA3 D083           7284            POP     DPH
1CA5 22             7285            RET
                    7286            ;
1CA6 A3             7287    HS1:    INC     DPTR            ;BUMP TO NEXT CHARACTER
1CA7 80E6           7288            SJMP    HEXSC1          ;LOOP
                    7289            ;
1CA9                7290    HEX_CHECK:      ;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
                    7291            ;
1CA9 C2E5           7292            CLR     ACC.5           ;WASTE LOWER CASE
1CAB B44700         7293            CJNE    A,#'F'+1,HEX_CHECK1     ;SEE IF F OR LESS
1CAE                7294    HEX_CHECK1:
1CAE 4001           7295            JC      HC1
1CB0 22             7296            RET
                    7297            ;
1CB1 B44100         7298    HC1:    CJNE    A,#'A',HC11     ;SEE IF A OR GREATER
1CB4 B3             7299    HC11:   CPL     C
1CB5 22             7300            RET
                    7301            ;
1CB6                7302    PUSHR2R0:
                    7303            ;
1CB6 7B00           7304            MOV     R3,#HIGH CONVERT;CONVERSION LOCATION
1CB8 7958           7305            MOV     R1,#LOW CONVERT
1CBA D1F7           7306            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1CBC 740D           7307            MOV     A,#0DH          ;A CR TO TERMINATE
1CBE F3             7308            MOVX    @R1,A           ;SAVE THE CR
1CBF 900058         7309            MOV     DPTR,#CONVERT
                    7310            ;
                    7311            ; Falls thru to FLOATING INPUT
BASIC52S                                                                                                      PAGE 128

                    7312            ;
                    7313            ;***************************************************************
                    7314            ;
1CC2                7315    FLOATING_POINT_INPUT:   ; Input a floating point number pointed to by
                    7316                            ; the DPTR
                    7317            ;
                    7318            ;***************************************************************
                    7319            ;
1CC2 71B2           7320            ACALL   FP_CLEAR        ;CLEAR EVERYTHING
1CC4 B15F           7321            ACALL   GET_DPTR_CHARACTER
1CC6 B165           7322            ACALL   PLUS_MINUS_TEST
1CC8 9278           7323            MOV     MSIGN,C         ;SAVE THE MANTISSA SIGN
                    7324            ;
                    7325            ; Now, set up for input loop
                    7326            ;
1CCA 7834           7327            MOV     R0,#FP_ACCC
1CCC 7E7F           7328            MOV     R6,#7FH         ;BASE EXPONENT
1CCE D2D5           7329            SETB    F0              ;SET INITIAL FLAG
                    7330            ;
1CD0 F1EB           7331    INLOOP: ACALL   GET_DIGIT_CHECK
1CD2 5007           7332            JNC     GTEST           ;IF NOT A CHARACTER, WHAT IS IT?
1CD4 540F           7333            ANL     A,#0FH          ;STRIP ASCII
1CD6 B138           7334            ACALL   STDIG           ;STORE THE DIGITS
                    7335            ;
1CD8 A3             7336    INLPIK: INC     DPTR            ;BUMP POINTER FOR LOOP
1CD9 80F5           7337            SJMP    INLOOP          ;LOOP FOR INPUT
                    7338            ;
1CDB B42E0C         7339    GTEST:  CJNE    A,#'.',GT1      ;SEE IF A RADIX
1CDE 205163         7340            JB      FOUND_RADIX,INERR
1CE1 D251           7341            SETB    FOUND_RADIX
1CE3 B834F2         7342            CJNE    R0,#FP_ACCC,INLPIK
1CE6 D252           7343            SETB    FIRST_RADIX     ;SET IF FIRST RADIX
1CE8 80EE           7344            SJMP    INLPIK          ;GET ADDITIONAL DIGITS
                    7345            ;
1CEA 20D557         7346    GT1:    JB      F0,INERR        ;ERROR IF NOT CLEARED
1CED B46502         7347            CJNE    A,#'e',GT11     ;CHECK FOR LOWER CASE
1CF0 8003           7348            SJMP    GT12
1CF2 B44533         7349    GT11:   CJNE    A,#'E',FINISH_UP
1CF5 B15E           7350    GT12:   ACALL   INC_AND_GET_DPTR_CHARACTER
1CF7 B165           7351            ACALL   PLUS_MINUS_TEST
1CF9 9250           7352            MOV     XSIGN,C         ;SAVE SIGN STATUS
1CFB F1EB           7353            ACALL   GET_DIGIT_CHECK
1CFD 5045           7354            JNC     INERR
                    7355            ;
1CFF 540F           7356            ANL     A,#0FH          ;STRIP ASCII BIAS OFF THE CHARACTER
1D01 FD             7357            MOV     R5,A            ;SAVE THE CHARACTER IN R5
                    7358            ;
1D02 A3             7359    GT2:    INC     DPTR
1D03 F1EB           7360            ACALL   GET_DIGIT_CHECK
1D05 500D           7361            JNC     FINISH1
1D07 540F           7362            ANL     A,#0FH          ;STRIP OFF BIAS
1D09 CD             7363            XCH     A,R5            ;GET THE LAST DIGIT
1D0A 75F00A         7364            MOV     B,#10           ;MULTIPLY BY TEN
1D0D A4             7365            MUL     AB
1D0E 2D             7366            ADD     A,R5            ;ADD TO ORIGINAL VALUE
1D0F FD             7367            MOV     R5,A            ;SAVE IN R5
1D10 50F0           7368            JNC     GT2             ;LOOP IF NO CARRY
1D12 7DFF           7369            MOV     R5,#0FFH        ;FORCE AN ERROR
BASIC52S                                                                                                      PAGE 129

                    7370            ;
1D14 ED             7371    FINISH1:MOV     A,R5            ;GET THE SIGN
1D15 305009         7372            JNB     XSIGN,POSNUM    ;SEE IF EXPONENT IS POS OR NEG
1D18 C3             7373            CLR     C
1D19 9E             7374            SUBB    A,R6
1D1A F4             7375            CPL     A
1D1B 04             7376            INC     A
1D1C 4009           7377            JC      FINISH2
1D1E 7401           7378            MOV     A,#01H
1D20 22             7379            RET
                    7380            ;
1D21 2E             7381    POSNUM: ADD     A,R6            ;ADD TO EXPONENT
1D22 5003           7382            JNC     FINISH2
                    7383            ;
1D24 7402           7384    POSNM1: MOV     A,#02H
1D26 22             7385            RET
                    7386            ;
1D27 CE             7387    FINISH2:XCH     A,R6            ;SAVE THE EXPONENT
                    7388            ;
1D28                7389    FINISH_UP:
                    7390            ;
1D28 8E30           7391            MOV     FP_EXP,R6       ;SAVE EXPONENT
1D2A B83402         7392            CJNE    R0,#FP_ACCC,FINISH_UP1
1D2D 71B2           7393            ACALL   FP_CLEAR        ;CLEAR THE MEMORY IF 0
1D2F                7394    FINISH_UP1:
1D2F E509           7395            MOV     A,ARG_STACK     ;GET THE ARG STACK
1D31 C3             7396            CLR     C
1D32 940C           7397            SUBB    A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1D34 F509           7398            MOV     ARG_STACK,A     ;ADJUST FOR STORE
1D36 6111           7399            AJMP    PACK
                    7400            ;
1D38 C2D5           7401    STDIG:  CLR     F0              ;CLEAR INITIAL DESIGNATOR
1D3A 700B           7402            JNZ     STDIG1          ;CONTINUE IF NOT ZERO
1D3C B83408         7403            CJNE    R0,#FP_ACCC,STDIG1
1D3F 305204         7404            JNB     FIRST_RADIX,RET_X
                    7405            ;
1D42 DE02           7406    DECX:   DJNZ    R6,RET_X
                    7407            ;
1D44 74FF           7408    INERR:  MOV     A,#0FFH
                    7409            ;
1D46 22             7410    RET_X:  RET
                    7411            ;
1D47 205302         7412    STDIG1: JB      DONE_LOAD,FRTEST
1D4A C252           7413            CLR     FIRST_RADIX
                    7414            ;
1D4C 2052F3         7415    FRTEST: JB      FIRST_RADIX,DECX
                    7416            ;
1D4F 205101         7417    FDTEST: JB      FOUND_RADIX,FDT1
1D52 0E             7418            INC     R6
                    7419            ;
1D53 2053F0         7420    FDT1:   JB      DONE_LOAD,RET_X
1D56 B83D02         7421            CJNE    R0,#FP_ACC8+1,FDT2
1D59 D253           7422            SETB    DONE_LOAD
                    7423            ;
1D5B F6             7424    FDT2:   MOV     @R0,A           ;SAVE THE STRIPPED ACCUMULATOR
1D5C 08             7425            INC     R0              ;BUMP THE POINTER
1D5D 22             7426            RET                     ;EXIT
                    7427            ;
BASIC52S                                                                                                      PAGE 130

                    7428            ;***************************************************************
                    7429            ;
                    7430            ; I/O utilities
                    7431            ;
                    7432            ;***************************************************************
                    7433            ;
1D5E                7434    INC_AND_GET_DPTR_CHARACTER:
                    7435            ;
1D5E A3             7436            INC     DPTR
                    7437            ;
1D5F                7438    GET_DPTR_CHARACTER:
                    7439            ;
1D5F E0             7440            MOVX    A,@DPTR         ;GET THE CHARACTER
1D60 B42016         7441            CJNE    A,#' ',PMT1     ;SEE IF A SPACE
                    7442            ;
                    7443            ; Kill spaces
                    7444            ;
1D63 80F9           7445            SJMP    INC_AND_GET_DPTR_CHARACTER
                    7446            ;
1D65                7447    PLUS_MINUS_TEST:
                    7448            ;
1D65 B4E302         7449            CJNE    A,#0E3H,PMT11   ;SEE IF A PLUS, PLUS TOKEN FROM BASIC
1D68 800E           7450            SJMP    PMT3
1D6A B42B02         7451    PMT11:  CJNE    A,#'+',PMT12
1D6D 8009           7452            SJMP    PMT3
1D6F B4E502         7453    PMT12:  CJNE    A,#0E5H,PMT13   ;SEE IF MINUS, MINUS TOKEN FROM BASIC
1D72 8003           7454            SJMP    PMT2
1D74 B42D02         7455    PMT13:  CJNE    A,#'-',PMT1
                    7456            ;
1D77 D3             7457    PMT2:   SETB    C
                    7458            ;
1D78 A3             7459    PMT3:   INC     DPTR
                    7460            ;
1D79 22             7461    PMT1:   RET
                    7462            ;
                    7463            ;***************************************************************
                    7464            ;
1D7A                7465    FLOATING_POINT_OUTPUT:  ; Output the number, format is in location 23
                    7466            ;
                    7467            ; IF FORMAT = 00 - FREE FLOATING
                    7468            ;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
                    7469            ;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
                    7470            ;                  N + X = 8 MAX
                    7471            ;
                    7472            ;***************************************************************
                    7473            ;
1D7A 916A           7474            ACALL   MDES1           ;GET THE NUMBER TO OUTPUT, R0 IS POINTER
1D7C 31A5           7475            ACALL   POP_AND_EXIT    ;OUTPUT POPS THE STACK
1D7E EF             7476            MOV     A,R7
1D7F FE             7477            MOV     R6,A            ;PUT THE EXPONENT IN R6
1D80 717E           7478            ACALL   UNPACK_R0       ;UNPACK THE NUMBER
1D82 782B           7479            MOV     R0,#FP_NIB1     ;POINT AT THE NUMBER
1D84 E517           7480            MOV     A,FORMAT        ;GET THE FORMAT
1D86 FB             7481            MOV     R3,A            ;SAVE IN CASE OF EXP FORMAT
1D87 6049           7482            JZ      FREE            ;FREE FLOATING?
1D89 B4F000         7483            CJNE    A,#0F0H,FPO1    ;SEE IF EXPONENTIAL
1D8C 5073           7484    FPO1:   JNC     EXPOUT
                    7485            ;
BASIC52S                                                                                                      PAGE 131

                    7486            ; If here, must be integer USING format
                    7487            ;
1D8E EE             7488            MOV     A,R6            ;GET THE EXPONENT
1D8F 7002           7489            JNZ     FPO2
1D91 7E80           7490            MOV     R6,#80H
1D93 EB             7491    FPO2:   MOV     A,R3            ;GET THE FORMAT
1D94 C4             7492            SWAP    A               ;SPLIT INTEGER AND FRACTION
1D95 540F           7493            ANL     A,#0FH
1D97 FA             7494            MOV     R2,A            ;SAVE INTEGER
1D98 D167           7495            ACALL   NUM_LT          ;GET THE NUMBER OF INTEGERS
1D9A CA             7496            XCH     A,R2            ;FLIP FOR SUBB
1D9B C3             7497            CLR     C
1D9C 9A             7498            SUBB    A,R2
1D9D FF             7499            MOV     R7,A
1D9E 5006           7500            JNC     FPO3
1DA0 7D3F           7501            MOV     R5,#'?'         ;OUTPUT A QUESTION MARK
1DA2 D19C           7502            ACALL   SOUT1           ;NUMBER IS TOO LARGE FOR FORMAT
1DA4 A1D2           7503            AJMP    FREE
1DA6 BA0007         7504    FPO3:   CJNE    R2,#00,USING0   ;SEE IF ZERO
1DA9 1F             7505            DEC     R7
1DAA D189           7506            ACALL   SS7
1DAC D196           7507            ACALL   ZOUT            ;OUTPUT A ZERO
1DAE 8006           7508            SJMP    USING1
                    7509            ;
1DB0 D189           7510    USING0: ACALL   SS7             ;OUTPUT SPACES, IF NEED TO
1DB2 EA             7511            MOV     A,R2            ;OUTPUT DIGITS
1DB3 FF             7512            MOV     R7,A
1DB4 D14B           7513            ACALL   OUTR0
                    7514            ;
1DB6 EB             7515    USING1: MOV     A,R3
1DB7 540F           7516            ANL     A,#0FH          ;GET THE NUMBER RIGHT OF DP
1DB9 FA             7517            MOV     R2,A            ;SAVE IT
1DBA 60BD           7518            JZ      PMT1            ;EXIT IF ZERO
1DBC D192           7519            ACALL   ROUT            ;OUTPUT DP
1DBE D170           7520            ACALL   NUM_RT
1DC0 B50203         7521            CJNE    A,2,USINGX      ;COMPARE A TO R2
                    7522            ;
1DC3 EA             7523    USINGY: MOV     A,R2
1DC4 C180           7524            AJMP    Z7R7
                    7525            ;
1DC6 50FB           7526    USINGX: JNC     USINGY
                    7527            ;
1DC8 CA             7528    USING2: XCH     A,R2
1DC9 C3             7529            CLR     C
1DCA 9A             7530            SUBB    A,R2
1DCB CA             7531            XCH     A,R2
1DCC D180           7532            ACALL   Z7R7            ;OUTPUT ZEROS IF NEED TO
1DCE EA             7533            MOV     A,R2
1DCF FF             7534            MOV     R7,A
1DD0 C14B           7535            AJMP    OUTR0
                    7536            ;
                    7537            ; First, force exponential output, if need to
                    7538            ;
1DD2 EE             7539    FREE:   MOV     A,R6            ;GET THE EXPONENT
1DD3 7004           7540            JNZ     FREE1           ;IF ZERO, PRINT IT
1DD5 D19A           7541            ACALL   SOUT
1DD7 C196           7542            AJMP    ZOUT
                    7543            ;
BASIC52S                                                                                                      PAGE 132

1DD9 7BF0           7544    FREE1:  MOV     R3,#0F0H        ;IN CASE EXP NEEDED
1DDB 7477           7545            MOV     A,#80H-DIGIT-DIGIT-1
1DDD 2E             7546            ADD     A,R6
1DDE 4021           7547            JC      EXPOUT
1DE0 94F7           7548            SUBB    A,#0F7H
1DE2 401D           7549            JC      EXPOUT
                    7550            ;
                    7551            ; Now, just print the number
                    7552            ;
1DE4 D18B           7553            ACALL   SINOUT          ;PRINT THE SIGN OF THE NUMBER
1DE6 D167           7554            ACALL   NUM_LT          ;GET THE NUMBER LEFT OF DP
1DE8 B40802         7555            CJNE    A,#8,FREE4
1DEB C14B           7556            AJMP    OUTR0
                    7557            ;
1DED D14B           7558    FREE4:  ACALL   OUTR0
1DEF D15D           7559            ACALL   ZTEST           ;TEST FOR TRAILING ZEROS
1DF1 6057           7560            JZ      U_RET           ;DONE IF ALL TRAILING ZEROS
1DF3 D192           7561            ACALL   ROUT            ;OUTPUT RADIX
                    7562            ;
1DF5 7F01           7563    FREE2:  MOV     R7,#1           ;OUTPUT ONE DIGIT
1DF7 D14B           7564            ACALL   OUTR0
1DF9 704F           7565            JNZ     U_RET
1DFB D15D           7566            ACALL   ZTEST
1DFD 604B           7567            JZ      U_RET
1DFF 80F4           7568            SJMP    FREE2           ;LOOP
                    7569            ;
1E01 D18B           7570    EXPOUT: ACALL   SINOUT          ;PRINT THE SIGN
1E03 7F01           7571            MOV     R7,#1           ;OUTPUT ONE CHARACTER
1E05 D14B           7572            ACALL   OUTR0
1E07 D192           7573            ACALL   ROUT            ;OUTPUT RADIX
1E09 EB             7574            MOV     A,R3            ;GET FORMAT
1E0A 540F           7575            ANL     A,#0FH          ;STRIP INDICATOR
1E0C 6006           7576            JZ      EXPOTX
                    7577            ;
1E0E FF             7578            MOV     R7,A            ;OUTPUT THE NUMBER OF DIGITS
1E0F 1F             7579            DEC     R7              ;ADJUST BECAUSE ONE CHAR ALREADY OUT
1E10 D14B           7580            ACALL   OUTR0
1E12 8002           7581            SJMP    EXPOT4
                    7582            ;
1E14 B1F5           7583    EXPOTX: ACALL   FREE2           ;OUTPUT UNTIL TRAILING ZEROS
                    7584            ;
1E16 D19A           7585    EXPOT4: ACALL   SOUT            ;OUTPUT A SPACE
1E18 7D45           7586            MOV     R5,#'E'
1E1A D19C           7587            ACALL   SOUT1           ;OUTPUT AN E
1E1C EE             7588            MOV     A,R6            ;GET THE EXPONENT
1E1D 6004           7589            JZ      XOUT0           ;EXIT IF ZERO
1E1F 14             7590            DEC     A               ;ADJUST FOR THE DIGIT ALREADY OUTPUT
1E20 B48005         7591            CJNE    A,#80H,XOUT2    ;SEE WHAT IT IS
                    7592            ;
1E23 D19A           7593    XOUT0:  ACALL   SOUT
1E25 E4             7594            CLR     A
1E26 800C           7595            SJMP    XOUT4
                    7596            ;
1E28 4006           7597    XOUT2:  JC      XOUT3           ;NEGATIVE EXPONENT
1E2A 7D2B           7598            MOV     R5,#'+'         ;OUTPUT A PLUS SIGN
1E2C D19C           7599            ACALL   SOUT1
1E2E 8004           7600            SJMP    XOUT4
                    7601            ;
BASIC52S                                                                                                      PAGE 133

1E30 D18E           7602    XOUT3:  ACALL   MOUT
1E32 F4             7603            CPL     A               ;FLIP BITS
1E33 04             7604            INC     A               ;BUMP
                    7605            ;
1E34 C2E7           7606    XOUT4:  CLR     ACC.7
1E36 F8             7607            MOV     R0,A
1E37 7A00           7608            MOV     R2,#0
1E39 7958           7609            MOV     R1,#LOW CONVERT ;CONVERSION LOCATION
1E3B 7B00           7610            MOV     R3,#HIGH CONVERT
1E3D D1F7           7611            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1E3F 7858           7612            MOV     R0,#LOW CONVERT ;NOW, OUTPUT EXPONENT
                    7613            ;
1E41 E2             7614    EXPOT5: MOVX    A,@R0           ;GET THE CHARACTER
1E42 FD             7615            MOV     R5,A            ;OUTPUT IT
1E43 D19C           7616            ACALL   SOUT1
1E45 08             7617            INC     R0              ;BUMP THE POINTER
1E46 E8             7618            MOV     A,R0            ;GET THE POINTER
1E47 B501F7         7619            CJNE    A,R1B0,EXPOT5   ;LOOP
                    7620            ;
1E4A 22             7621    U_RET:  RET                     ;EXIT
                    7622            ;
1E4B                7623    OUTR0:  ; Output the characters pointed to by R0, also bias ascii
                    7624            ;
1E4B EF             7625            MOV     A,R7            ;GET THE COUNTER
1E4C 600E           7626            JZ      OUTR            ;EXIT IF DONE
1E4E E6             7627            MOV     A,@R0           ;GET THE NUMBER
1E4F 4430           7628            ORL     A,#30H          ;ASCII BIAS
1E51 08             7629            INC     R0              ;BUMP POINTER AND COUNTER
1E52 1F             7630            DEC     R7
1E53 FD             7631            MOV     R5,A            ;PUT CHARACTER IN OUTPUT REGISTER
1E54 D19C           7632            ACALL   SOUT1           ;OUTPUT THE CHARACTER
1E56 E4             7633            CLR     A               ;JUST FOR TEST
1E57 B833F1         7634            CJNE    R0,#FP_NIB8+1,OUTR0
1E5A 7455           7635            MOV     A,#55H          ;KNOW WHERE EXIT OCCURED
                    7636            ;
1E5C 22             7637    OUTR:   RET
                    7638            ;
1E5D A900           7639    ZTEST:  MOV     R1,R0B0         ;GET POINTER REGISTER
                    7640            ;
1E5F E7             7641    ZT0:    MOV     A,@R1           ;GET THE VALUE
1E60 7004           7642            JNZ     ZT1
1E62 09             7643            INC     R1              ;BUMP POINTER
1E63 B933F9         7644            CJNE    R1,#FP_NIB8+1,ZT0
                    7645            ;
1E66 22             7646    ZT1:    RET
                    7647            ;
1E67 EE             7648    NUM_LT: MOV     A,R6            ;GET EXPONENT
1E68 C3             7649            CLR     C               ;GET READY FOR SUBB
1E69 9480           7650            SUBB    A,#80H          ;SUB EXPONENT BIAS
1E6B 5001           7651            JNC     NL1             ;OK IF NO CARRY
1E6D E4             7652            CLR     A               ;NO DIGITS LEFT
                    7653            ;
1E6E FF             7654    NL1:    MOV     R7,A            ;SAVE THE COUNT
1E6F 22             7655            RET
                    7656            ;
1E70 C3             7657    NUM_RT: CLR     C               ;SUBB AGAIN
1E71 7480           7658            MOV     A,#80H          ;EXPONENT BIAS
1E73 9E             7659            SUBB    A,R6            ;GET THE BIASED EXPONENT
BASIC52S                                                                                                      PAGE 134

1E74 5001           7660            JNC     NR1
1E76 E4             7661            CLR     A
                    7662            ;
1E77 22             7663    NR1:    RET                     ;EXIT
                    7664            ;
1E78 EF             7665    SPACE7: MOV     A,R7            ;GET THE NUMBER OF SPACES
1E79 60FC           7666            JZ      NR1             ;EXIT IF ZERO
1E7B D19A           7667            ACALL   SOUT            ;OUTPUT A SPACE
1E7D 1F             7668            DEC     R7              ;BUMP COUNTER
1E7E 80F8           7669            SJMP    SPACE7          ;LOOP
                    7670            ;
1E80 FF             7671    Z7R7:   MOV     R7,A
                    7672            ;
1E81 EF             7673    ZERO7:  MOV     A,R7            ;GET COUNTER
1E82 60F3           7674            JZ      NR1             ;EXIT IF ZERO
1E84 D196           7675            ACALL   ZOUT            ;OUTPUT A ZERO
1E86 1F             7676            DEC     R7              ;BUMP COUNTER
1E87 80F8           7677            SJMP    ZERO7           ;LOOP
                    7678            ;
1E89 D178           7679    SS7:    ACALL   SPACE7
                    7680            ;
1E8B EC             7681    SINOUT: MOV     A,R4            ;GET THE SIGN
1E8C 600C           7682            JZ      SOUT            ;OUTPUT A SPACE IF ZERO
                    7683            ;
1E8E 7D2D           7684    MOUT:   MOV     R5,#'-'
1E90 800A           7685            SJMP    SOUT1           ;OUTPUT A MINUS IF NOT
                    7686            ;
1E92 7D2E           7687    ROUT:   MOV     R5,#'.'         ;OUTPUT A RADIX
1E94 8006           7688            SJMP    SOUT1
                    7689            ;
1E96 7D30           7690    ZOUT:   MOV     R5,#'0'         ;OUTPUT A ZERO
1E98 8002           7691            SJMP    SOUT1
                    7692            ;
1E9A 7D20           7693    SOUT:   MOV     R5,#' '         ;OUTPUT A SPACE
                    7694            ;
1E9C 216C           7695    SOUT1:  AJMP    OUTPUT
                    7696            ;
                    7697            ;***************************************************************
                    7698            ;
1E9E                7699    CONVERT_ASCII_STRING_TO_BINARY:
                    7700            ;
                    7701            ;DPTR POINTS TO ASCII STRING
                    7702            ;PUT THE BINARY NUMBER IN R2:R0, ERROR IF >64K
                    7703            ;
                    7704            ;***************************************************************
                    7705            ;
1E9E 9189           7706    CASB:   ACALL   HEXSCAN         ;SEE IF HEX NUMBER
1EA0 9223           7707            MOV     ADD_IN,C        ;IF ADD_IN IS SET, THE NUMBER IS HEX
1EA2 F1EB           7708            ACALL   GET_DIGIT_CHECK
1EA4 B3             7709            CPL     C               ;FLIP FOR EXIT
1EA5 4028           7710            JC      RCASB
1EA7 7B00           7711            MOV     R3,#00H         ;ZERO R3:R1 FOR LOOP
1EA9 7900           7712            MOV     R1,#00H
1EAB 8015           7713            SJMP    CASB5
                    7714            ;
1EAD A3             7715    CASB2:  INC     DPTR
1EAE 8900           7716            MOV     R0B0,R1         ;SAVE THE PRESENT CONVERTED VALUE
1EB0 8B02           7717            MOV     R2B0,R3         ;IN R2:R0
BASIC52S                                                                                                      PAGE 135

1EB2 F1EB           7718            ACALL   GET_DIGIT_CHECK
1EB4 400C           7719            JC      CASB5
1EB6 302316         7720            JNB     ADD_IN,RCASB    ;CONVERSION COMPLETE
1EB9 91A9           7721            ACALL   HEX_CHECK       ;SEE IF HEX NUMBER
1EBB 4003           7722            JC      CASB4           ;PROCEED IF GOOD
1EBD A3             7723            INC     DPTR            ;BUMP PAST H
1EBE 800F           7724            SJMP    RCASB
                    7725            ;
1EC0 2409           7726    CASB4:  ADD     A,#9            ;ADJUST HEX ASCII BIAS
                    7727            ;
1EC2 75F00A         7728    CASB5:  MOV     B,#10
1EC5 302303         7729            JNB     ADD_IN,CASB6
1EC8 75F010         7730            MOV     B,#16           ;HEX MODE
                    7731            ;
1ECB D1D6           7732    CASB6:  ACALL   MULNUM          ;ACCUMULATE THE DIGITS
1ECD 50DE           7733            JNC     CASB2           ;LOOP IF NO CARRY
                    7734            ;
1ECF E4             7735    RCASB:  CLR     A               ;RESET ACC
1ED0 92E1           7736            MOV     ACC.OVERFLOW,C  ;IF OVERFLOW, SAY SO
1ED2 22             7737            RET                     ;EXIT
                    7738            ;
1ED3 75F00A         7739    MULNUM10:MOV    B,#10
                    7740            ;
                    7741            ;***************************************************************
                    7742            ;
1ED6                7743    MULNUM: ; Take the next digit in the acc (masked to 0FH)
                    7744            ; accumulate in R3:R1
                    7745            ;
                    7746            ;***************************************************************
                    7747            ;
1ED6 C0E0           7748            PUSH    ACC             ;SAVE ACC
1ED8 C0F0           7749            PUSH    B               ;SAVE MULTIPLIER
1EDA E9             7750            MOV     A,R1            ;PUT LOW ORDER BITS IN ACC
1EDB A4             7751            MUL     AB              ;DO THE MULTIPLY
1EDC F9             7752            MOV     R1,A            ;PUT THE RESULT BACK
1EDD EB             7753            MOV     A,R3            ;GET THE HIGH ORDER BYTE
1EDE ABF0           7754            MOV     R3,B            ;SAVE THE OVERFLOW
1EE0 D0F0           7755            POP     B               ;GET THE MULTIPLIER
1EE2 A4             7756            MUL     AB              ;DO IT
1EE3 A2D2           7757            MOV     C,OV            ;SAVE OVERFLOW IN F0
1EE5 92D5           7758            MOV     F0,C
1EE7 2B             7759            ADD     A,R3            ;ADD OVERFLOW TO HIGH RESULT
1EE8 FB             7760            MOV     R3,A            ;PUT IT BACK
1EE9 D0E0           7761            POP     ACC             ;GET THE ORIGINAL ACC BACK
1EEB 72D5           7762            ORL     C,F0            ;OR CARRY AND OVERFLOW
1EED 4007           7763            JC      MULX            ;NO GOOD IF THE CARRY IS SET
                    7764            ;
1EEF 540F           7765    MUL11:  ANL     A,#0FH          ;MASK OFF HIGH ORDER BITS
1EF1 29             7766            ADD     A,R1            ;NOW ADD THE ACC
1EF2 F9             7767            MOV     R1,A            ;PUT IT BACK
1EF3 E4             7768            CLR     A               ;PROPAGATE THE CARRY
1EF4 3B             7769            ADDC    A,R3
1EF5 FB             7770            MOV     R3,A            ;PUT IT BACK
                    7771            ;
1EF6 22             7772    MULX:   RET                     ;EXIT WITH OR WITHOUT CARRY
                    7773            ;
1EF7                7774    CONVERT_BINARY_TO_ASCII_STRING:
                    7775    ;
BASIC52S                                                                                                      PAGE 136

                    7776    ;*****************************************************************************
                    7777    ;****** Elektor 3 Patch ******************************************************
                    7778    ;****** Performance improvements *********************************************
                    7779    ;
                    7780    ;
                    7781    ;R3:R1 contains the address of the string
                    7782    ;R2:R0 contains the value to convert
                    7783    ;DPTR, R7, R6, and ACC gets clobbered
                    7784    ;
                    7785    ;***************************************************************
                    7786    ;
                    7787    ;       CLR     A               ;NO LEADING ZEROS
                    7788    ;       MOV     DPTR,#10000     ;SUBTRACT 10000
                    7789    ;       ACALL   RSUB            ;DO THE SUBTRACTION
                    7790    ;       MOV     DPTR,#1000      ;NOW 1000
                    7791    ;       ACALL   RSUB
                    7792    ;       MOV     DPTR,#100       ;NOW 100
                    7793    ;       ACALL   RSUB
                    7794    ;       MOV     DPTR,#10        ;NOW 10
                    7795    ;       ACALL   RSUB
                    7796    ;       MOV     DPTR,#1         ;NOW 1
                    7797    ;       ACALL   RSUB
                    7798    ;       JZ      RSUB2           ;JUMP OVER RET
                    7799    ;
                    7800    ;RSUB_R:        RET
                    7801    ;
                    7802    ;RSUB:  MOV     R6,#-1          ;SET UP THE COUNTER
                    7803    ;
                    7804    ;RSUB1: INC     R6              ;BUMP THE COUNTER
                    7805    ;       XCH     A,R2            ;DO A FAST COMPARE
                    7806    ;       CJNE    A,DPH,RSUB11
                    7807    ;RSUB11: XCH     A,R2
                    7808    ;       JC      FAST_DONE
                    7809    ;       XCH     A,R0            ;GET LOW BYTE
                    7810    ;       SUBB    A,DPL           ;SUBTRACT, CARRY IS CLEARED
                    7811    ;       XCH     A,R0            ;PUT IT BACK
                    7812    ;       XCH     A,R2            ;GET THE HIGH BYTE
                    7813    ;       SUBB    A,DPH           ;ADD THE HIGH BYTE
                    7814    ;       XCH     A,R2            ;PUT IT BACK
                    7815    ;       JNC     RSUB1           ;LOOP UNTIL CARRY
                    7816    ;
                    7817    ;       XCH     A,R0
                    7818    ;       ADD     A,DPL           ;RESTORE R2:R0
                    7819    ;       XCH     A,R0
                    7820    ;       XCH     A,R2
                    7821    ;       ADDC    A,DPH
                    7822    ;       XCH     A,R2
                    7823    ;
                    7824    ;FAST_DONE:
                    7825    ;
                    7826    ;       ORL     A,R6            ;OR THE COUNT VALUE
                    7827    ;       JZ      RSUB_R          ;RETURN IF ZERO
                    7828    ;
                    7829    ;RSUB2: MOV     A,#'0'          ;GET THE ASCII BIAS
                    7830    ;       ADD     A,R6            ;ADD THE COUNT
                    7831    ;
                    7832    ;RSUB4: MOV     P2,R3           ;SET UP P2
                    7833    ;       MOVX    @R1,A           ;PLACE THE VALUE IN MEMORY
BASIC52S                                                                                                      PAGE 137

                    7834    ;       INC     R1
                    7835    ;       CJNE    R1,#00H,RSUB3   ;SEE IF RAPPED AROUND
                    7836    ;       INC     R3              ;BUMP HIGH BYTE
                    7837    ;
                    7838    ;RSUB3: RET                     ;EXIT
                    7839    ;
                    7840    ;****** Faster code starts here: *********************************************
                    7841    ;
1EF7 7D00           7842            mov     R5,#0
                    7843    ;
1EF9 EA             7844    RSUB1:  mov     A, R2
1EFA 75F00A         7845            mov     B,#0AH
1EFD 84             7846            div     AB
1EFE FA             7847            mov     R2,A
1EFF E8             7848            mov     A,R0
1F00 54F0           7849            anl     A,#0F0H
1F02 45F0           7850            orl     A,B
1F04 C4             7851            swap    A
1F05 75F00A         7852            mov     B,#0AH
1F08 84             7853            div     AB
1F09 C4             7854            swap    A
1F0A FE             7855            mov     R6,A
1F0B E8             7856            mov     A,R0
1F0C 540F           7857            anl     A,#0FH
1F0E C4             7858            swap    A
1F0F 45F0           7859            orl     A,B
1F11 C4             7860            swap    A
1F12 75F00A         7861            mov     B,#0AH
1F15 84             7862            div     AB
1F16 4E             7863            orl     A,R6
1F17 F8             7864            mov     R0,A
1F18 E5F0           7865            mov     A,B
1F1A 2430           7866            add     A,#30H
1F1C 0D             7867            inc     R5
1F1D C0E0           7868            push    ACC
1F1F EA             7869            mov     A,R2
1F20 48             7870            orl     A,R0
1F21 70D6           7871            jnz     RSUB1
                    7872    ;
1F23 D0E0           7873    RSUB2:  pop     ACC
1F25 8BA0           7874            mov     P2,R3
1F27 F3             7875            movx    @R1,A
1F28 09             7876            inc     R1
1F29 B90001         7877            cjne    R1,#0,RSUB3
1F2C 0B             7878            inc     R3
                    7879    ;
1F2D DDF4           7880    RSUB3:  djnz    R5,RSUB2
1F2F 22             7881            ret
                    7882    ;
                    7883    ;****** continue with original code: *****************************************
                    7884    ;
                    7885            ;***************************************************************
                    7886            ;
1F30                7887    HEXOUT: ; Output the hex number in R3:R1, supress leading zeros, if set
                    7888            ;
                    7889            ;***************************************************************
                    7890            ;
1F30 D19A           7891            ACALL   SOUT            ;OUTPUT A SPACE
BASIC52S                                                                                                      PAGE 138

1F32 A236           7892            MOV     C,ZSURP         ;GET ZERO SUPPRESSION BIT
1F34 9223           7893            MOV     ADD_IN,C
1F36 EB             7894            MOV     A,R3            ;GET HIGH NIBBLE AND PRINT IT
1F37 F153           7895            ACALL   HOUTHI
1F39 EB             7896            MOV     A,R3
1F3A F154           7897            ACALL   HOUTLO
                    7898            ;
1F3C C223           7899    HEX2X:  CLR     ADD_IN          ;DON'T SUPPRESS ZEROS
1F3E E9             7900            MOV     A,R1            ;GET LOW NIBBLE AND PRINT IT
1F3F F153           7901            ACALL   HOUTHI
1F41 E9             7902            MOV     A,R1
1F42 F154           7903            ACALL   HOUTLO
1F44 7D48           7904            MOV     R5,#'H'         ;OUTPUT H TO INDICATE HEX MODE
                    7905            ;
1F46 C19C           7906    SOUT_1: AJMP    SOUT1
                    7907            ;
1F48 C223           7908    HOUT1:  CLR     ADD_IN          ;PRINTED SOMETHING, SO CLEAR ADD_IN
1F4A 2490           7909            ADD     A,#90H          ;CONVERT TO ASCII
1F4C D4             7910            DA      A
1F4D 3440           7911            ADDC    A,#40H
1F4F D4             7912            DA      A               ;GOT IT HERE
1F50 FD             7913            MOV     R5,A            ;OUTPUT THE BYTE
1F51 80F3           7914            SJMP    SOUT_1
                    7915            ;
1F53 C4             7916    HOUTHI: SWAP    A               ;SWAP TO OUTPUT HIGH NIBBLE
                    7917            ;
1F54 540F           7918    HOUTLO: ANL     A,#0FH          ;STRIP
1F56 70F0           7919            JNZ     HOUT1           ;PRINT IF NOT ZERO
1F58 3023ED         7920            JNB     ADD_IN,HOUT1    ;OUTPUT A ZERO IF NOT SUPRESSED
1F5B 22             7921            RET
                    7922    ;
                    7923    ;*****************************************************************************
                    7924    ;******* New baudrate detection **********************************************
                    7925    ;******* calculate r3:r1=-(Timer2 DIV 16) for serial mode ********************
                    7926    ;******* Wulf 3 alteration 2 *************************************************
                    7927    ;
                    7928    ;-- comment out for AT98LP52 -------------------------------------------------
                    7929    ;
                    7930    ;SERCALC:mov    a,#0F0h
                    7931    ;       mov     r3,a
                    7932    ;       mov     r1,TH2
                    7933    ;       anl     a,r1
                    7934    ;       swap    a
                    7935    ;       cpl     a
                    7936    ;       xch     a,r3
                    7937    ;       anl     a,TL2
                    7938    ;       xch     a,r1
                    7939    ;       anl     a,#00Fh
                    7940    ;       orl     a,r1
                    7941    ;       swap    a
                    7942    ;       cpl     a
                    7943    ;       mov     r1,ADCON        ;save BSY bit
                    7944    ;       mov     DAPR,#0         ;start A/D for 805xx test
                    7945    ;       xch     a,r1
                    7946    ;       ret
                    7947    ;
                    7948    ;-- insert for AT98LP52 -----------------------------------------------------
                    7949    ;TEST_MSG: db   'Speed OK?'
BASIC52S                                                                                                      PAGE 139

                    7950    ;       db      00h             ; Stop Code
                    7951    ;-- insert end --------------------------------------------------------------
                    7952    ;*****************************************************************************
                    7953    ;
1F78                7954            ORG     1F78H
                    7955            ;
1F78 201A03         7956    CKS_I:  JB      CKS_B,CS_I
1F7B 02401B         7957            LJMP    401BH
                    7958            ;
1F7E 022088         7959    CS_I:   LJMP    2088H
                    7960            ;
1F81 4E4F2044       7961    E14X:   DB      'NO DATA"'
1F85 41544122   
                    7962            ;
1F89 94             7963    E11X:   DB      128+20
1F8A 41524954       7964            DB      'ARITH. OVERFLOW"'
1F8E 482E204F   
1F92 56455246   
1F96 4C4F5722   
                    7965            ;
1F9A 50524F47       7966    E16X:   DB      'PROGRAMMING"'
1F9E 52414D4D   
1FA2 494E4722   
                    7967            ;
1FA6 43414E         7968    E15X:   DB      'CAN'
1FA9 27             7969            DB      27H
1FAA 5420434F       7970            DB      'T CONTINUE"'
1FAE 4E54494E   
1FB2 554522     
                    7971            ;
1FB5 494E5641       7972    E10X:   DB      'INVALID LINE NUMBER"'
1FB9 4C494420   
1FBD 4C494E45   
1FC1 204E554D   
1FC5 42455222   
                    7973            ;
1FC9 50524F4D       7974    NOROM:  DB      'PROM MODE"'
1FCD 204D4F44   
1FD1 4522       
                    7975            ;
                    7976    ;*****************************************************************************
                    7977    ;****** Set a new version message ********************************************
                    7978    ;
                    7979    ;S_N:   DB      '*MCS-51(tm) BASIC V1.1*'
                    7980    ;
1FD3 2A4D4353       7981    S_N:    DB      '*MCS-BASIC-52 V1.31*"'
1FD7 2D424153   
1FDB 49432D35   
1FDF 32205631   
1FE3 2E33312A   
1FE7 22         
                    7982    ;
                    7983    ;*****************************************************************************
                    7984    ;
1FEB                7985            ORG     1FEBH           ;FOR LINK COMPATABILITY
                    7986            ;
1FEB                7987    GET_DIGIT_CHECK:        ; Get a character, then check for digit
                    7988            ;
BASIC52S                                                                                                      PAGE 140

1FEB B15F           7989            ACALL   GET_DPTR_CHARACTER
                    7990            ;
1FED                7991    DIGIT_CHECK:    ;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
                    7992            ;
1FED B43A00         7993            CJNE    A,#'9'+1,DC10   ;SEE IF ASCII 9 OR LESS
1FF0 4001           7994    DC10:   JC      DC1
1FF2 22             7995            RET
                    7996            ;
1FF3 B43000         7997    DC1:    CJNE    A,#'0',DC11     ;SEE IF ASCII 0 OR GREATER
1FF6 B3             7998    DC11:   CPL     C
1FF7 22             7999            RET
                    8000            ;
1FF8                8001            ORG     1FF8H
                    8002            ;
1FF8 4552524F       8003    ERS:    DB      'ERROR: "'
1FFC 523A2022   
                    8004            ;
                    8005            ;***************************************************************
                    8006            ;
----                8007            XSEG    ;External Ram
                    8008            ;
                    8009            ;***************************************************************
                    8010            ;
0000                8011            DS      4
0004                8012    IBCNT:  DS      1               ;LENGTH OF A LINE
0005                8013    IBLN:   DS      2               ;THE LINE NUMBER
0007                8014    IBUF:   DS      LINLEN          ;THE INPUT BUFFER
0050                8015    CONVT:  DS      15              ;CONVERSION LOCATION FOR FPIN
                    8016            ;
0100                8017            ORG     100H
                    8018            ;
0100                8019    GTB:    DS      1               ;GET LOCATION
0101                8020    ERRLOC: DS      1               ;ERROR TYPE
0102                8021    ERRNUM: DS      2               ;WHERE TO GO ON AN ERROR
0104                8022    VARTOP: DS      2               ;TOP OF VARIABLE STORAGE
0106                8023    ST_ALL: DS      2               ;STORAGE ALLOCATION
0108                8024    MT_ALL: DS      2               ;MATRIX ALLOCATION
010A                8025    MEMTOP: DS      2               ;TOP OF MEMORY
010C                8026    RCELL:  DS      2               ;RANDOM NUMBER CELL
010E                8027            DS      FPSIZ-1
0113                8028    CXTAL:  DS      1               ;CRYSTAL
0114                8029            DS      FPSIZ-1
0119                8030    FPT1:   DS      1               ;FLOATINP POINT TEMP 1
011A                8031            DS      FPSIZ-1
011F                8032    FPT2:   DS      1               ;FLOATING POINT TEMP 2
0120                8033    INTLOC: DS      2               ;LOCATION TO GO TO ON INTERRUPT
0122                8034    STR_AL: DS      2               ;STRING ALLOCATION
0124                8035    SPV:    DS      2               ;SERIAL PORT BAUD RATE
0126                8036    TIV:    DS      2               ;TIMER INTERRUPT NUM AND LOC
0128                8037    PROGS:  DS      2               ;PROGRAM A PROM TIME OUT
                    8038    ;
                    8039    ;*****************************************************************************
                    8040    ;****** Disable Intel programming for to get room ****************************
                    8041    ;****** We don't need this, but don't remark it! *****************************
                    8042    ;
012A                8043    IPROGS: DS      2               ;INTELLIGENT PROM PROGRAMMER TIMEOUT
                    8044    ;
                    8045    ;*****************************************************************************
BASIC52S                                                                                                      PAGE 141

                    8046    ;
012C                8047    TM_TOP: DS      1
                    8048    ;
                    8049    ; ---- BASIC-52 Mainroutine End ----
                    8050    
----                8051            CSEG    ; Directive is used to select the Program Memory Space.
                    8052    
                    8053    ;****************************************************************************
                    8054    ;*                        BASIC-52 V1.31 enhancements                       *
                    8055    ;*          The following code enhanced BASIC-52 with new commands          *
                    8056    ;*               for I2C communicatin and read / write to SFR               *
                    8057    ;*--------------------------------------------------------------------------*
                    8058    ;* (C) H.-J. Boehling & D. Wulf 14.11.01                                    *
                    8059    ;*     http://home.arcor.de/h.boehling                                      *
                    8060    ;*     H-Boehling@gmx.de                                                    *
                    8061    ;****************************************************************************
                    8062    ;*
                    8063    ;* Four new I2C communication commands as I2C-bus master.
                    8064    ;*
                    8065    ;* The syntax to use is:
                    8066    ;*
                    8067    ;*     I2CSTART           Sends a start condition to I2C bus.
                    8068    ;*                        - Returns with busy, time out or status clear.  
                    8069    ;*     I2CSTOP            Sends a stop condition to I2C bus.
                    8070    ;*                        - Returns with time out or status clear.
                    8071    ;*     I2CPUT [byte]      Sends a byte to the I2C bus.
                    8072    ;*                        - Returns with time out, no acknowledge or clear.
                    8073    ;*     I2CGET [variable]  Reads a byte from I2C to a BASIC variable.
                    8074    ;*                        - Set 18H (status) to 1 to send no acknowledge:
                    8075    ;*                           DBY(18H) = 1 : I2CGET B : I2CSTOP : PRINT B
                    8076    ;*                        - Returns with time out or status clear. 
                    8077    ;*   
                    8078    ;* Register 18H is the I2C communication status register; useage is:
                    8079    ;*
                    8080    ;*     STATUS=DBY(18H)
                    8081    ;*      IF STATUS.AND.2=2 PRINT "Time out error!"
                    8082    ;*      IF STATUS.AND.4=4 PRINT "Busy error!"
                    8083    ;*      IF STATUS.AND.8=8 PRINT "No acknowlege error!"
                    8084    ;*
                    8085    ;*---------------------------------------------------------------------------
                    8086    ;*
                    8087    ;* Two new commands to read from or write to a special funkton register:
                    8088    ;*
                    8089    ;*     WRSFR ([address]) [byte]      Writes to a special funkton register.
                    8090    ;*
                    8091    ;*     RDSFR ([address]) [variable]  Reads from a special funkton register.
                    8092    ;*
                    8093    ;* [address] is the address of the SFR and had to be a value between 
                    8094    ;* 128 (080H) and 255 (0FFH).
                    8095    ;*
                    8096    ;****************************************************************************
                    8097    
                    8098    ;----- Definitions ----------------------------------------------------------
                    8099    
  0096              8100    SDA             bit     P1.6                    ;I2C serial data line.
  0095              8101    SCL             bit     P1.5                    ;I2C serial clock line.
                    8102    
  0018              8103    status          equ     018H                    ;Communication status.
BASIC52S                                                                                                      PAGE 142

                    8104    
                    8105    ;temp1          equ     11                      ;Temp. storage. ; *** alredy definition
                    8106    
                    8107    ;xbit           bit     45                      ;Command extension present. ; *** already de
                                                                               finition
                    8108     
                    8109    ; the following bits will be set in the status byte:
                    8110    
  0002              8111    tout            equ     00000010B               ;I2C time out status.
  0004              8112    busy            equ     00000100B               ;I2C bus busy status.
  0008              8113    nack            equ     00001000B               ;Slave sends no acknowledge.
                    8114                                                    
                    8115    ;----------------------------------------------------------------------------
                    8116    ; The following code is necessary to notify the new statements to BASIC.
                    8117    
2002                8118                    org     2002H                   ;5Ah at 2002h tells BASIC-52
2002 5A             8119                    db      5AH                     ;to call 2048h (see below).
2048                8120                    org     2048H                   ;Set bit 45 to tell BASIC-52
                    8121                                                    ;that custom commands or
2048 D22D           8122                    setb    xbit                    ;instructions have been
204A 22             8123                    ret                             ;added.
2070                8124                    org     2070H                   ;Store starting address of
2070 902400         8125                    mov     dptr,#vectortable       ;vector table.
2073 22             8126                    ret
2078                8127                    org     2078H                   ;Store starting address of
2078 90240C         8128                    mov     dptr,#tokentable        ;token table.
207B 22             8129                    ret
                    8130    
                    8131    ; The old code for BASIC-52 V1.3 overwrite 2090H, but this address had to be
                    8132    ; used for a user reset routine! So the code now starts at here:
                    8133    
                    8134    ;===== Here starts the code for the new BASIC statements ====================
                    8135    
2400                8136                    org     2400h                   ;use any available address
                    8137    
2400                8138    vectortable:                                    ;Vector table starts here.
                    8139                                                    ;Label to branch on:
2400 2440           8140                    dw      i2cstart                ;I2CSTART command
2402 2456           8141                    dw      i2cstop                 ;I2CSTOP command
2404 2462           8142                    dw      i2cput                  ;I2CPUT command
2406 2492           8143                    dw      i2cget                  ;I2CGET command
2408 2541           8144                    dw      wrsfr                   ;WRSFR command
240A 2519           8145                    dw      rdsfr                   ;RDSFR command
                    8146    
240C                8147    tokentable:                                     ;Token table starts here.
240C 10             8148                    db      10H                     ;1. user defined token for
240D 49324353       8149                    db      'I2CSTART'              ;command name.
2411 54415254   
2415 00             8150                    db      0                       ;End of token indicator
2416 11             8151                    db      11H                     ;2.
2417 49324353       8152                    db      'I2CSTOP'
241B 544F50     
241E 00             8153                    db      0
241F 12             8154                    db      12H                     ;3.
2420 49324350       8155                    db      'I2CPUT'
2424 5554       
2426 00             8156                    db      0
2427 13             8157                    db      13H                     ;4.
BASIC52S                                                                                                      PAGE 143

2428 49324347       8158                    db      'I2CGET'
242C 4554       
242E 00             8159                    db      0
242F 14             8160                    db      14H                     ;5.
2430 57525346       8161                    db      'WRSFR'
2434 52         
2435 00             8162                    db      0
2436 15             8163                    db      15H                     ;6.
2437 52445346       8164                    db      'RDSFR'
243B 52         
243C 00             8165                    db      0
                    8166    
                    8167    ;----- The following is necessary to get no problem with variable names -----
                    8168    
243D DF             8169                    db      0DFH                    ;Dummy token.
243E 7F             8170                    db      07FH                    ;Unused dummy char.
                    8171    
                    8172    ;----------------------------------------------------------------------------
                    8173    
243F FF             8174                    db      0FFH                    ;End of tokenlist indicator.
                    8175    
                    8176    ;----------------------------------------------------------------------------
                    8177    
                    8178    ;===== i2cstart - sends an I2C start condition to beginn communication ======
                    8179    
2440 1224BA         8180    i2cstart:       call    SCLhigh                 ;Set SCL to high.
2443 7F04           8181                    mov     R7,#4                   ;Load time out counter.
2445 D296           8182    setSDA:         setb    SDA                     ;Set SDA to high.
2447 209606         8183                    jb      SDA,ishigh              ;If not high bus is busy.
244A DFF9           8184                    djnz    R7,setSDA               ;If not try until R7 is zero.
244C 431804         8185                    orl     status,#busy            ;Set busy status.
244F 22             8186                    ret                             ;return to BASIC.
                    8187    
2450 C296           8188    ishigh:         clr     SDA                     ;Set start condition.
2452 531800         8189                    anl     status,#0               ;Clear I2C status.
2455 22             8190                    ret                             ;return to BASIC.
                    8191    
                    8192    ;===== i2cstop - sends an I2C stop condition to end communication ===========
                    8193    
2456 531800         8194    i2cstop:        anl     status,#0               ;Clear I2C status.
2459 C296           8195                    clr     SDA                     ;Get SDA ready for stop.
245B 91BA           8196                    acall   SCLhigh                 ;Set clock for stop.
245D 91B9           8197                    acall   delay                   ;Delay 4 machine cycles.
245F D296           8198                    setb    SDA                     ;Set stop condition.
2461 22             8199                    ret                             ;Return to BASIC.
                    8200    
                    8201    ;===== i2cput - sends a byte from a BASIC value out to the I2C bus ==========
                    8202    
                    8203    ;----- Get value and test for 8 bit only ------------------------------------
                    8204    
2462 7439           8205    i2cput:         mov     A,#39H                  ;Put value to send on
2464 120030         8206                    lcall   30H                     ;argument stack.
2467 7401           8207                    mov     A,#1                    ;change value to 16 bit
2469 120030         8208                    lcall   30H                     ;integer and write to R3:R1
246C BB0058         8209                    cjne    R3,#0,i2cerror          ;If R3 not zero then 
                    8210                                                    ;value bigger than 0FFH.
                    8211                                                    ;8 bit integer only error.
                    8212    
BASIC52S                                                                                                      PAGE 144

                    8213    ;----- Send byte to I2C bus -------------------------------------------------
                    8214    
246F E9             8215                    mov     A,R1                    ;Load byte to send.
2470 7E08           8216                    mov     R6,#8                   ;Load bit counter
2472 C295           8217    send:           clr     SCL                     ;Make clock low
2474 91B9           8218                    acall   delay                   ;Delay 4 machine cycles.
2476 33             8219                    rlc     A                       ;Rotate data bit to C.
2477 9296           8220                    mov     SDA,C                   ;Put data bit on pin.
2479 91BA           8221                    acall   SCLhigh                 ;Send clock.
247B 91B9           8222                    acall   delay                   ;Delay 4 machine cycles.
247D DEF3           8223                    djnz    R6,send                 ;Repeat until all bits sent.
                    8224    
                    8225    ;----- Read acknowledge from slave ------------------------------------------
                    8226            
247F C295           8227                    clr     SCL                     ;Make clock low.
2481 91B9           8228                    acall   delay                   ;Delay 4 machine cycles.
2483 D296           8229                    setb    SDA                     ;Release line for acknowledge.
2485 91BA           8230                    acall   SCLhigh                 ;Send clock for acknowlege.
2487 91B9           8231                    acall   delay                   ;Delay 4 machine cycles.
2489 309603         8232                    jnb     SDA,ackok               ;Check for valid acknowledge.
248C 431808         8233                    orl     status,#nack            ;Set no acknowledge status.
248F C295           8234    ackok:          clr     SCL                     ;Finish acknowledge bit.
2491 22             8235                    ret                             ;Return to BASIC.
                    8236    
                    8237    ;===== i2cget - Reads one byte from I2C bus to the argument stack ===========
                    8238    
2492 7E08           8239    i2cget:         mov     R6,#8                   ;Load bit counter
2494 C295           8240    read:           clr     SCL                     ;Make clock low.
2496 91B9           8241                    acall   delay                   ;Delay 4 machine cycles.
2498 91BA           8242                    acall   SCLhigh                 ;Send clock.
249A 91B9           8243                    acall   delay                   ;Delay 4 machine cycles.
249C A296           8244                    mov     C,SDA                   ;Get data bit from pin.
249E 33             8245                    rlc     A                       ;Rotate bit into result byte.
249F DEF3           8246                    djnz    R6,read                 ;Repeat until all received.
                    8247    
                    8248    ;----- Put received byte on argument stack ----------------------------------
                    8249    
24A1 F8             8250                    mov     R0,A                    ;Load R0 with reseived byte.
24A2 7A00           8251                    mov     R2,#0                   ;Set high byte to zero.
24A4 749A           8252                    mov     A,#9AH                  ;Put byte on argument stack
24A6 120030         8253                    lcall   30H                     ;with BASIC funktion.
                    8254    
                    8255    ;----- Send acknowledge to slave --------------------------------------------
                    8256    
24A9 C295           8257                    clr     SCL                     ;Set clock low.
24AB 91B9           8258                    acall   delay                   ;Delay 4 machine cycles.
24AD E518           8259                    mov     A,status                ;Load acknowledge bit
24AF 13             8260                    rrc     A                       ;into C and
24B0 9296           8261                    mov     SDA,C                   ;send acknowledge bit.
24B2 91BA           8262                    acall   SCLhigh                 ;Send acknowledge clock.
                    8263    
                    8264    ;----- Set variable to received byte ----------------------------------------
                    8265    
24B4 7443           8266                    mov     A,#43H                  ;Set next variable to value
24B6 020030         8267                    ljmp    30H                     ;on argument stack and
                    8268                                                    ;return to BASIC.
                    8269    
                    8270    ;----- delay - generates a delay of 4 machine cycles ------------------------
BASIC52S                                                                                                      PAGE 145

                    8271    
24B9 22             8272    delay:          ret                             ;4 cycles for CALL and RET.
                    8273    
                    8274    ;----- SCLhigh - sends SCL pin high and waits for any clock stretching ------
                    8275    
24BA 7F04           8276    SCLhigh:        mov     R7,#4                   ;Load time out counter.
24BC D295           8277    setSCL:         setb    SCL                     ;Set SCL to high.
24BE 209505         8278                    jb      SCL,quit                ;If SCL actually high return.
24C1 DFF9           8279                    djnz    R7,setSCL               ;If not try until R7 is zero.
24C3 431802         8280                    orl     status,#tout            ;Set status time out.
24C6 22             8281    quit:           ret
                    8282    
                    8283    ;----- error - sends an error message to the terminal -----------------------
                    8284    
24C7 7407           8285    i2cerror:       mov     A,#7                    ;Send CR/LF
24C9 120030         8286                    lcall   30H
24CC 7B24           8287                    mov     R3,#high i2cerrmsg      ;Set string address.
24CE 79DB           8288                    mov     R1,#low i2cerrmsg
                    8289    ;error:         setb    34H                     ;Read string from code memory. ; *** duplica
                                                                               te name
24D0 D234           8290    error9:         setb    34H                     ;Read string from code memory.
24D2 7406           8291                    mov     A,#6                    ;Send String to
24D4 120030         8292                    lcall   30H                     ;terminal.
24D7 E4             8293                    clr     A
24D8 020030         8294                    ljmp    30H                     ;Back to command mode.
                    8295    
24DB 4552524F       8296    i2cerrmsg:      db 'ERROR: BAD I2CPUT ARGUMENT'
24DF 523A2042   
24E3 41442049   
24E7 32435055   
24EB 54204152   
24EF 47554D45   
24F3 4E54       
24F5 22             8297                    db      22H                     ;End of text.   
                    8298    
24F6 4552524F       8299    sfrerrmsg:      db 'ERROR: BAD SFR ARGUMENT'
24FA 523A2042   
24FE 41442053   
2502 46522041   
2506 5247554D   
250A 454E54     
250D 22             8300                    db      22H                     ;End of text.
                    8301    
250E 7407           8302    sfrerror:       mov     A,#7                    ;Send CR/LF
2510 120030         8303                    lcall   30H
2513 7B24           8304                    mov     R3,#high sfrerrmsg      ;Set string address.
2515 79F6           8305                    mov     R1,#low sfrerrmsg
                    8306    ;               sjmp    error  ; *** error -> error9
2517 80B7           8307                    sjmp    error9
                    8308    
                    8309    ;===== rdsfr - read from special funtion register ==========================
                    8310    
2519 7439           8311    rdsfr:          mov     A,#39H                  ;Put address from text to
251B 120030         8312                    lcall   30H                     ;argument stack.
                    8313    
251E 7401           8314                    mov     A,#1                    ;change value to 16 bit
2520 120030         8315                    lcall   30H                     ;integer and write to R3:R1
                    8316    
BASIC52S                                                                                                      PAGE 146

2523 BB00E8         8317                    cjne    R3,#0,sfrerror          ;If R3 not zero then error.
2526 E9             8318                    mov     A,R1                    ;Address to Acc.
2527 30E7E4         8319                    jnb     Acc.7,sfrerror          ;If address less then 80H! 
252A FC             8320                    mov     R4,A                    ;Address to R4.
                    8321    
252B 758288         8322                    mov     DPL,#low sfrgettab      ;Set DPTR to jump
252E 758325         8323                    mov     DPH,#high sfrgettab     ;table.
2531 122569         8324                    call    do_sfr                  ;Read SFR.
                    8325    
2534 F8             8326                    mov     R0,A                    ;Load R0 with SFR byte.
2535 7A00           8327                    mov     R2,#0                   ;Set high byte to zero.
2537 749A           8328                    mov     A,#9AH                  ;Put byte on argument stack
2539 120030         8329                    lcall   30H
                    8330    
                    8331    ;----- Set variable to SFR byte ---------------------------------------------
                    8332    
253C 7443           8333                    mov     A,#43H                  ;Set next variable to value
253E 020030         8334                    ljmp    30H                     ;on argument stack and
                    8335                                                    ;return to BASIC.
                    8336    
                    8337    ;===== wrsfr - write to special funtion register ============================
                    8338    
2541 7439           8339    wrsfr:          mov     A,#39H                  ;Put address from text to
2543 120030         8340                    lcall   30H                     ;argument stack.
                    8341    
2546 7401           8342                    mov     A,#1                    ;change value to 16 bit
2548 120030         8343                    lcall   30H                     ;integer and write to R3:R1
254B BB00C0         8344                    cjne    R3,#0,sfrerror          ;If R3 not zero then error
254E E9             8345                    mov     A,R1                    ;or
254F 30E7BC         8346                    jnb     Acc.7,sfrerror          ;if address less then 80H! 
2552 890B           8347                    mov     temp1,R1                ;Save address.
                    8348    
2554 7439           8349                    mov     A,#39H                  ;Put value to write on
2556 120030         8350                    lcall   30H                     ;argument stack.
                    8351    
2559 7401           8352                    mov     A,#1                    ;change value to 16 bit
255B 120030         8353                    lcall   30H                     ;integer and write to R3:R1
255E BB00AD         8354                    cjne    R3,#0,sfrerror          ;If R3 not zero then 
                    8355                                                    ;8 bit integer only error.
2561 758286         8356                    mov     DPL,#low sfrputtab      ;Set DPTR to jump
2564 758325         8357                    mov     DPH,#high sfrputtab     ;table.
2567 AC0B           8358                    mov     R4,temp1                ;Address to write to R4.
                    8359    
                    8360    ;----- do_sfr - read from or wright to SFR ----------------------------------
                    8361    
                    8362    ;----- Calculate the jump ---------------------------------------------------
                    8363    
2569 EC             8364    do_sfr:         mov     A,R4                    ;Address to Acc
256A 2480           8365                    add     A,#80H
256C FC             8366                    mov     R4,A
256D 7800           8367                    mov     R0,#0
256F 25E0           8368                    add     A,ACC                   ;*2
2571 C8             8369                    xch     A,R0
2572 35E0           8370                    addc    A,ACC                   ;carry
2574 C8             8371                    xch     A,R0
2575 25E0           8372                    add     A,ACC                   ;*4
2577 C8             8373                    xch     A,R0
2578 35E0           8374                    addc    A,ACC                   ;carry
BASIC52S                                                                                                      PAGE 147

257A C8             8375                    xch     A,R0
                    8376    
                    8377    ;----- Load DPTR with offset and jump ---------------------------------------
                    8378    
257B 2582           8379                    add     A,DPL
257D F582           8380                    mov     DPL,A
257F E8             8381                    mov     A,R0
2580 3583           8382                    addc    A,DPH
2582 F583           8383                    mov     DPH,A
2584 EC             8384                    mov     A,R4
2585 73             8385                    jmp     @A+DPTR                 ;Jump into table.
                    8386    
                    8387    ;----- The direct addressing table ------------------------------------------
                    8388    
2586 8980           8389    sfrputtab:      mov     128,R1
2588 E580           8390    sfrgettab:      mov     A,128
258A 22             8391                    ret
258B 8981           8392                    mov     129,R1
258D E581           8393                    mov     A,129
258F 22             8394                    ret
2590 8982           8395                    mov     130,R1
2592 E582           8396                    mov     A,130
2594 22             8397                    ret
2595 8983           8398                    mov     131,R1
2597 E583           8399                    mov     A,131
2599 22             8400                    ret
259A 8984           8401                    mov     132,R1
259C E584           8402                    mov     A,132
259E 22             8403                    ret
259F 8985           8404                    mov     133,R1
25A1 E585           8405                    mov     A,133
25A3 22             8406                    ret
25A4 8986           8407                    mov     134,R1
25A6 E586           8408                    mov     A,134
25A8 22             8409                    ret
25A9 8987           8410                    mov     135,R1
25AB E587           8411                    mov     A,135
25AD 22             8412                    ret
25AE 8988           8413                    mov     136,R1
25B0 E588           8414                    mov     A,136
25B2 22             8415                    ret
25B3 8989           8416                    mov     137,R1
25B5 E589           8417                    mov     A,137
25B7 22             8418                    ret
25B8 898A           8419                    mov     138,R1
25BA E58A           8420                    mov     A,138
25BC 22             8421                    ret
25BD 898B           8422                    mov     139,R1
25BF E58B           8423                    mov     A,139
25C1 22             8424                    ret
25C2 898C           8425                    mov     140,R1
25C4 E58C           8426                    mov     A,140
25C6 22             8427                    ret
25C7 898D           8428                    mov     141,R1
25C9 E58D           8429                    mov     A,141
25CB 22             8430                    ret
25CC 898E           8431                    mov     142,R1
25CE E58E           8432                    mov     A,142
BASIC52S                                                                                                      PAGE 148

25D0 22             8433                    ret
25D1 898F           8434                    mov     143,R1
25D3 E58F           8435                    mov     A,143
25D5 22             8436                    ret
25D6 8990           8437                    mov     144,R1
25D8 E590           8438                    mov     A,144
25DA 22             8439                    ret
25DB 8991           8440                    mov     145,R1
25DD E591           8441                    mov     A,145
25DF 22             8442                    ret
25E0 8992           8443                    mov     146,R1
25E2 E592           8444                    mov     A,146
25E4 22             8445                    ret
25E5 8993           8446                    mov     147,R1
25E7 E593           8447                    mov     A,147
25E9 22             8448                    ret
25EA 8994           8449                    mov     148,R1
25EC E594           8450                    mov     A,148
25EE 22             8451                    ret
25EF 8995           8452                    mov     149,R1
25F1 E595           8453                    mov     A,149
25F3 22             8454                    ret
25F4 8996           8455                    mov     150,R1
25F6 E596           8456                    mov     A,150
25F8 22             8457                    ret
25F9 8997           8458                    mov     151,R1
25FB E597           8459                    mov     A,151
25FD 22             8460                    ret
25FE 8998           8461                    mov     152,R1
2600 E598           8462                    mov     A,152
2602 22             8463                    ret
2603 8999           8464                    mov     153,R1
2605 E599           8465                    mov     A,153
2607 22             8466                    ret
2608 899A           8467                    mov     154,R1
260A E59A           8468                    mov     A,154
260C 22             8469                    ret
260D 899B           8470                    mov     155,R1
260F E59B           8471                    mov     A,155
2611 22             8472                    ret
2612 899C           8473                    mov     156,R1
2614 E59C           8474                    mov     A,156
2616 22             8475                    ret
2617 899D           8476                    mov     157,R1
2619 E59D           8477                    mov     A,157
261B 22             8478                    ret
261C 899E           8479                    mov     158,R1
261E E59E           8480                    mov     A,158
2620 22             8481                    ret
2621 899F           8482                    mov     159,R1
2623 E59F           8483                    mov     A,159
2625 22             8484                    ret
2626 89A0           8485                    mov     160,R1
2628 E5A0           8486                    mov     A,160
262A 22             8487                    ret
262B 89A1           8488                    mov     161,R1
262D E5A1           8489                    mov     A,161
262F 22             8490                    ret
BASIC52S                                                                                                      PAGE 149

2630 89A2           8491                    mov     162,R1
2632 E5A2           8492                    mov     A,162
2634 22             8493                    ret
2635 89A3           8494                    mov     163,R1
2637 E5A3           8495                    mov     A,163
2639 22             8496                    ret
263A 89A4           8497                    mov     164,R1
263C E5A4           8498                    mov     A,164
263E 22             8499                    ret
263F 89A5           8500                    mov     165,R1
2641 E5A5           8501                    mov     A,165
2643 22             8502                    ret
2644 89A6           8503                    mov     166,R1
2646 E5A6           8504                    mov     A,166
2648 22             8505                    ret
2649 89A7           8506                    mov     167,R1
264B E5A7           8507                    mov     A,167
264D 22             8508                    ret
264E 89A8           8509                    mov     168,R1
2650 E5A8           8510                    mov     A,168
2652 22             8511                    ret
2653 89A9           8512                    mov     169,R1
2655 E5A9           8513                    mov     A,169
2657 22             8514                    ret
2658 89AA           8515                    mov     170,R1
265A E5AA           8516                    mov     A,170
265C 22             8517                    ret
265D 89AB           8518                    mov     171,R1
265F E5AB           8519                    mov     A,171
2661 22             8520                    ret
2662 89AC           8521                    mov     172,R1
2664 E5AC           8522                    mov     A,172
2666 22             8523                    ret
2667 89AD           8524                    mov     173,R1
2669 E5AD           8525                    mov     A,173
266B 22             8526                    ret
266C 89AE           8527                    mov     174,R1
266E E5AE           8528                    mov     A,174
2670 22             8529                    ret
2671 89AF           8530                    mov     175,R1
2673 E5AF           8531                    mov     A,175
2675 22             8532                    ret
2676 89B0           8533                    mov     176,R1
2678 E5B0           8534                    mov     A,176
267A 22             8535                    ret
267B 89B1           8536                    mov     177,R1
267D E5B1           8537                    mov     A,177
267F 22             8538                    ret
2680 89B2           8539                    mov     178,R1
2682 E5B2           8540                    mov     A,178
2684 22             8541                    ret
2685 89B3           8542                    mov     179,R1
2687 E5B3           8543                    mov     A,179
2689 22             8544                    ret
268A 89B4           8545                    mov     180,R1
268C E5B4           8546                    mov     A,180
268E 22             8547                    ret
268F 89B5           8548                    mov     181,R1
BASIC52S                                                                                                      PAGE 150

2691 E5B5           8549                    mov     A,181
2693 22             8550                    ret
2694 89B6           8551                    mov     182,R1
2696 E5B6           8552                    mov     A,182
2698 22             8553                    ret
2699 89B7           8554                    mov     183,R1
269B E5B7           8555                    mov     A,183
269D 22             8556                    ret
269E 89B8           8557                    mov     184,R1
26A0 E5B8           8558                    mov     A,184
26A2 22             8559                    ret
26A3 89B9           8560                    mov     185,R1
26A5 E5B9           8561                    mov     A,185
26A7 22             8562                    ret
26A8 89BA           8563                    mov     186,R1
26AA E5BA           8564                    mov     A,186
26AC 22             8565                    ret
26AD 89BB           8566                    mov     187,R1
26AF E5BB           8567                    mov     A,187
26B1 22             8568                    ret
26B2 89BC           8569                    mov     188,R1
26B4 E5BC           8570                    mov     A,188
26B6 22             8571                    ret
26B7 89BD           8572                    mov     189,R1
26B9 E5BD           8573                    mov     A,189
26BB 22             8574                    ret
26BC 89BE           8575                    mov     190,R1
26BE E5BE           8576                    mov     A,190
26C0 22             8577                    ret
26C1 89BF           8578                    mov     191,R1
26C3 E5BF           8579                    mov     A,191
26C5 22             8580                    ret
26C6 89C0           8581                    mov     192,R1
26C8 E5C0           8582                    mov     A,192
26CA 22             8583                    ret
26CB 89C1           8584                    mov     193,R1
26CD E5C1           8585                    mov     A,193
26CF 22             8586                    ret
26D0 89C2           8587                    mov     194,R1
26D2 E5C2           8588                    mov     A,194
26D4 22             8589                    ret
26D5 89C3           8590                    mov     195,R1
26D7 E5C3           8591                    mov     A,195
26D9 22             8592                    ret
26DA 89C4           8593                    mov     196,R1
26DC E5C4           8594                    mov     A,196
26DE 22             8595                    ret
26DF 89C5           8596                    mov     197,R1
26E1 E5C5           8597                    mov     A,197
26E3 22             8598                    ret
26E4 89C6           8599                    mov     198,R1
26E6 E5C6           8600                    mov     A,198
26E8 22             8601                    ret
26E9 89C7           8602                    mov     199,R1
26EB E5C7           8603                    mov     A,199
26ED 22             8604                    ret
26EE 89C8           8605                    mov     200,R1
26F0 E5C8           8606                    mov     A,200
BASIC52S                                                                                                      PAGE 151

26F2 22             8607                    ret
26F3 89C9           8608                    mov     201,R1
26F5 E5C9           8609                    mov     A,201
26F7 22             8610                    ret
26F8 89CA           8611                    mov     202,R1
26FA E5CA           8612                    mov     A,202
26FC 22             8613                    ret
26FD 89CB           8614                    mov     203,R1
26FF E5CB           8615                    mov     A,203
2701 22             8616                    ret
2702 89CC           8617                    mov     204,R1
2704 E5CC           8618                    mov     A,204
2706 22             8619                    ret
2707 89CD           8620                    mov     205,R1
2709 E5CD           8621                    mov     A,205
270B 22             8622                    ret
270C 89CE           8623                    mov     206,R1
270E E5CE           8624                    mov     A,206
2710 22             8625                    ret
2711 89CF           8626                    mov     207,R1
2713 E5CF           8627                    mov     A,207
2715 22             8628                    ret
2716 89D0           8629                    mov     208,R1
2718 E5D0           8630                    mov     A,208
271A 22             8631                    ret
271B 89D1           8632                    mov     209,R1
271D E5D1           8633                    mov     A,209
271F 22             8634                    ret
2720 89D2           8635                    mov     210,R1
2722 E5D2           8636                    mov     A,210
2724 22             8637                    ret
2725 89D3           8638                    mov     211,R1
2727 E5D3           8639                    mov     A,211
2729 22             8640                    ret
272A 89D4           8641                    mov     212,R1
272C E5D4           8642                    mov     A,212
272E 22             8643                    ret
272F 89D5           8644                    mov     213,R1
2731 E5D5           8645                    mov     A,213
2733 22             8646                    ret
2734 89D6           8647                    mov     214,R1
2736 E5D6           8648                    mov     A,214
2738 22             8649                    ret
2739 89D7           8650                    mov     215,R1
273B E5D7           8651                    mov     A,215
273D 22             8652                    ret
273E 89D8           8653                    mov     216,R1
2740 E5D8           8654                    mov     A,216
2742 22             8655                    ret
2743 89D9           8656                    mov     217,R1
2745 E5D9           8657                    mov     A,217
2747 22             8658                    ret
2748 89DA           8659                    mov     218,R1
274A E5DA           8660                    mov     A,218
274C 22             8661                    ret
274D 89DB           8662                    mov     219,R1
274F E5DB           8663                    mov     A,219
2751 22             8664                    ret
BASIC52S                                                                                                      PAGE 152

2752 89DC           8665                    mov     220,R1
2754 E5DC           8666                    mov     A,220
2756 22             8667                    ret
2757 89DD           8668                    mov     221,R1
2759 E5DD           8669                    mov     A,221
275B 22             8670                    ret
275C 89DE           8671                    mov     222,R1
275E E5DE           8672                    mov     A,222
2760 22             8673                    ret
2761 89DF           8674                    mov     223,R1
2763 E5DF           8675                    mov     A,223
2765 22             8676                    ret
2766 89E0           8677                    mov     224,R1
2768 E5E0           8678                    mov     A,224
276A 22             8679                    ret
276B 89E1           8680                    mov     225,R1
276D E5E1           8681                    mov     A,225
276F 22             8682                    ret
2770 89E2           8683                    mov     226,R1
2772 E5E2           8684                    mov     A,226
2774 22             8685                    ret
2775 89E3           8686                    mov     227,R1
2777 E5E3           8687                    mov     A,227
2779 22             8688                    ret
277A 89E4           8689                    mov     228,R1
277C E5E4           8690                    mov     A,228
277E 22             8691                    ret
277F 89E5           8692                    mov     229,R1
2781 E5E5           8693                    mov     A,229
2783 22             8694                    ret
2784 89E6           8695                    mov     230,R1
2786 E5E6           8696                    mov     A,230
2788 22             8697                    ret
2789 89E7           8698                    mov     231,R1
278B E5E7           8699                    mov     A,231
278D 22             8700                    ret
278E 89E8           8701                    mov     232,R1
2790 E5E8           8702                    mov     A,232
2792 22             8703                    ret
2793 89E9           8704                    mov     233,R1
2795 E5E9           8705                    mov     A,233
2797 22             8706                    ret
2798 89EA           8707                    mov     234,R1
279A E5EA           8708                    mov     A,234
279C 22             8709                    ret
279D 89EB           8710                    mov     235,R1
279F E5EB           8711                    mov     A,235
27A1 22             8712                    ret
27A2 89EC           8713                    mov     236,R1
27A4 E5EC           8714                    mov     A,236
27A6 22             8715                    ret
27A7 89ED           8716                    mov     237,R1
27A9 E5ED           8717                    mov     A,237
27AB 22             8718                    ret
27AC 89EE           8719                    mov     238,R1
27AE E5EE           8720                    mov     A,238
27B0 22             8721                    ret
27B1 89EF           8722                    mov     239,R1
BASIC52S                                                                                                      PAGE 153

27B3 E5EF           8723                    mov     A,239
27B5 22             8724                    ret
27B6 89F0           8725                    mov     240,R1
27B8 E5F0           8726                    mov     A,240
27BA 22             8727                    ret
27BB 89F1           8728                    mov     241,R1
27BD E5F1           8729                    mov     A,241
27BF 22             8730                    ret
27C0 89F2           8731                    mov     242,R1
27C2 E5F2           8732                    mov     A,242
27C4 22             8733                    ret
27C5 89F3           8734                    mov     243,R1
27C7 E5F3           8735                    mov     A,243
27C9 22             8736                    ret
27CA 89F4           8737                    mov     244,R1
27CC E5F4           8738                    mov     A,244
27CE 22             8739                    ret
27CF 89F5           8740                    mov     245,R1
27D1 E5F5           8741                    mov     A,245
27D3 22             8742                    ret
27D4 89F6           8743                    mov     246,R1
27D6 E5F6           8744                    mov     A,246
27D8 22             8745                    ret
27D9 89F7           8746                    mov     247,R1
27DB E5F7           8747                    mov     A,247
27DD 22             8748                    ret
27DE 89F8           8749                    mov     248,R1
27E0 E5F8           8750                    mov     A,248
27E2 22             8751                    ret
27E3 89F9           8752                    mov     249,R1
27E5 E5F9           8753                    mov     A,249
27E7 22             8754                    ret
27E8 89FA           8755                    mov     250,R1
27EA E5FA           8756                    mov     A,250
27EC 22             8757                    ret
27ED 89FB           8758                    mov     251,R1
27EF E5FB           8759                    mov     A,251
27F1 22             8760                    ret
27F2 89FC           8761                    mov     252,R1
27F4 E5FC           8762                    mov     A,252
27F6 22             8763                    ret
27F7 89FD           8764                    mov     253,R1
27F9 E5FD           8765                    mov     A,253
27FB 22             8766                    ret
27FC 89FE           8767                    mov     254,R1
27FE E5FE           8768                    mov     A,254
2800 22             8769                    ret
2801 89FF           8770                    mov     255,R1
2803 E5FF           8771                    mov     A,255
2805 22             8772                    ret
                    8773    
                    8774    ;----------------------------------------------------------------------------
                    8775    
                    8776                    end
                    8777    

VERSION 1.2h ASSEMBLY COMPLETE, 0 ERRORS FOUND
BASIC52S                                                                                                      PAGE 154

AABS . . . . . . . . . . . . . .  C ADDR  138FH  
AADD . . . . . . . . . . . . . .  C ADDR  1741H  
AANL . . . . . . . . . . . . . .  C ADDR  1484H  
AATAN. . . . . . . . . . . . . .  C ADDR  11E0H  
AATAN1 . . . . . . . . . . . . .  C ADDR  11EEH  
AC1. . . . . . . . . . . . . . .  C ADDR  096CH  
ACBYTE . . . . . . . . . . . . .  C ADDR  13ADH  
ACC. . . . . . . . . . . . . . .  D ADDR  00E0H  PREDEFINED  
ACKOK. . . . . . . . . . . . . .  C ADDR  248FH  
ACOS . . . . . . . . . . . . . .  C ADDR  116DH  
ADBYTE . . . . . . . . . . . . .  C ADDR  13B6H  
ADCON. . . . . . . . . . . . . .    NUMB  00D8H  NOT USED  
ADDLP. . . . . . . . . . . . . .  C ADDR  19F2H  
ADDPTR . . . . . . . . . . . . .  C ADDR  05DEH  
ADDPTR1. . . . . . . . . . . . .  C ADDR  05E6H  
ADD_IN . . . . . . . . . . . . .  B ADDR  0023H  
ADD_R. . . . . . . . . . . . . .  C ADDR  19F0H  
ADIV . . . . . . . . . . . . . .  C ADDR  140AH  
AEL1 . . . . . . . . . . . . . .  C ADDR  1282H  
AELP . . . . . . . . . . . . . .  C ADDR  1270H  
AEQ. . . . . . . . . . . . . . .  C ADDR  13DBH  
AEQ1 . . . . . . . . . . . . . .  C ADDR  13DDH  
AETOX. . . . . . . . . . . . . .  C ADDR  1327H  
AEXL . . . . . . . . . . . . . .  C ADDR  134EH  
AEXP . . . . . . . . . . . . . .  C ADDR  132BH  
AEXP1. . . . . . . . . . . . . .  C ADDR  133DH  
AFREE. . . . . . . . . . . . . .  C ADDR  1711H  
AGE. . . . . . . . . . . . . . .  C ADDR  13E7H  
AGET . . . . . . . . . . . . . .  C ADDR  14A9H  
AGT. . . . . . . . . . . . . . .  C ADDR  13C5H  
AGT1 . . . . . . . . . . . . . .  C ADDR  13C9H  
AI1. . . . . . . . . . . . . . .  C ADDR  137AH  
AI11 . . . . . . . . . . . . . .  C ADDR  1381H  
AI2. . . . . . . . . . . . . . .  C ADDR  1382H  
AI21 . . . . . . . . . . . . . .  C ADDR  138AH  
AI3. . . . . . . . . . . . . . .  C ADDR  138EH  
AINT . . . . . . . . . . . . . .  C ADDR  136DH  
AL . . . . . . . . . . . . . . .  C ADDR  0D4FH  
AL1. . . . . . . . . . . . . . .  C ADDR  0D52H  
AL2. . . . . . . . . . . . . . .  C ADDR  0D57H  
AL3. . . . . . . . . . . . . . .  C ADDR  0D58H  
ALE. . . . . . . . . . . . . . .  C ADDR  13EBH  
ALEN . . . . . . . . . . . . . .  C ADDR  1721H  
ALN. . . . . . . . . . . . . . .  C ADDR  12C0H  
ALN1 . . . . . . . . . . . . . .  C ADDR  12CDH  
ALN11. . . . . . . . . . . . . .  C ADDR  12EFH  
ALNE . . . . . . . . . . . . . .  C ADDR  12E5H  
ALNL . . . . . . . . . . . . . .  C ADDR  12D3H  
ALNO . . . . . . . . . . . . . .  C ADDR  12F8H  
ALPAR. . . . . . . . . . . . . .  C ADDR  13ACH  
ALT. . . . . . . . . . . . . . .  C ADDR  13D6H  
ALT1 . . . . . . . . . . . . . .  C ADDR  13D8H  
AMUL . . . . . . . . . . . . . .  C ADDR  11B0H  
ANE. . . . . . . . . . . . . . .  C ADDR  13E1H  
ANEG . . . . . . . . . . . . . .  C ADDR  13A1H  
ANOT . . . . . . . . . . . . . .  C ADDR  1496H  
ANU. . . . . . . . . . . . . . .  C ADDR  0D44H  
AORL . . . . . . . . . . . . . .  C ADDR  148DH  
BASIC52S                                                                                                      PAGE 155

AP1. . . . . . . . . . . . . . .  C ADDR  14E5H  
APCON. . . . . . . . . . . . . .  C ADDR  14E9H  
ARCAP2 . . . . . . . . . . . . .  C ADDR  14DFH  
ARG1_EXP_IS_LARGER . . . . . . .  C ADDR  1A56H  
ARG1_EXP_IS_LARGER1. . . . . . .  C ADDR  1A57H  
ARG1_EXP_IS_LARGER2. . . . . . .  C ADDR  1A5AH  
ARGF . . . . . . . . . . . . . .  B ADDR  0024H  
ARG_STACK. . . . . . . . . . . .    NUMB  0009H  
ARG_STACK_PAGE . . . . . . . . .    NUMB  0001H  
ARND . . . . . . . . . . . . . .  C ADDR  13F1H  
ASGN . . . . . . . . . . . . . .  C ADDR  1395H  
ASIN . . . . . . . . . . . . . .  C ADDR  1171H  
ASIN1. . . . . . . . . . . . . .  C ADDR  1187H  
ASQR . . . . . . . . . . . . . .  C ADDR  128DH  
ASTKA. . . . . . . . . . . . . .    NUMB  0009H  
ASTKAH . . . . . . . . . . . . .    NUMB  0001H  
ASUB . . . . . . . . . . . . . .  C ADDR  171CH  
AT2CON . . . . . . . . . . . . .  C ADDR  14D3H  
ATAN . . . . . . . . . . . . . .  C ADDR  11D0H  
ATCON. . . . . . . . . . . . . .  C ADDR  14D7H  
ATIM0. . . . . . . . . . . . . .  C ADDR  14C1H  
ATIM1. . . . . . . . . . . . . .  C ADDR  14C7H  
ATIM2. . . . . . . . . . . . . .  C ADDR  14CDH  
ATIME. . . . . . . . . . . . . .  C ADDR  1729H  
ATMOD. . . . . . . . . . . . . .  C ADDR  14DBH  
ATTAB. . . . . . . . . . . . . .  C ADDR  112AH  
AXBYTE . . . . . . . . . . . . .  C ADDR  13BEH  
AXBYTE1. . . . . . . . . . . . .  C ADDR  13C0H  
AXRL . . . . . . . . . . . . . .  C ADDR  1498H  
AXTAL. . . . . . . . . . . . . .  C ADDR  0FD9H  
AXTAL0 . . . . . . . . . . . . .  C ADDR  1657H  
AXTAL1 . . . . . . . . . . . . .  C ADDR  165CH  
AXTAL2 . . . . . . . . . . . . .  C ADDR  1679H  
AXTAL3 . . . . . . . . . . . . .  C ADDR  121FH  
A_D. . . . . . . . . . . . . . .  C ADDR  1260H  
A_IE . . . . . . . . . . . . . .  C ADDR  14B9H  
A_IP . . . . . . . . . . . . . .  C ADDR  14BDH  
B. . . . . . . . . . . . . . . .  D ADDR  00F0H  PREDEFINED  
B4800. . . . . . . . . . . . . .    NUMB  00B2H  NOT USED  
B9600. . . . . . . . . . . . . .    NUMB  00D9H  NOT USED  
BABC . . . . . . . . . . . . . .    NUMB  0027H  NOT USED  
BAUD19K. . . . . . . . . . . . .    NUMB  FFB2H  
BCHR . . . . . . . . . . . . . .  C ADDR  082FH  
BCHR1. . . . . . . . . . . . . .  C ADDR  0835H  
BCK. . . . . . . . . . . . . . .  C ADDR  078DH  
BD . . . . . . . . . . . . . . .  B ADDR  00DFH  NOT USED  
BELL . . . . . . . . . . . . . .    NUMB  0007H  
BG1. . . . . . . . . . . . . . .  C ADDR  0428H  
BG3. . . . . . . . . . . . . . .  C ADDR  0467H  
BI . . . . . . . . . . . . . . .  B ADDR  0032H  
BO . . . . . . . . . . . . . . .  B ADDR  002CH  
BOFAH. . . . . . . . . . . . . .    NUMB  0013H  
BOFAL. . . . . . . . . . . . . .    NUMB  0014H  
BOTH_PLUS. . . . . . . . . . . .  C ADDR  1A5EH  NOT USED  
BR0. . . . . . . . . . . . . . .  C ADDR  07F1H  
BR2. . . . . . . . . . . . . . .  C ADDR  083EH  
BS . . . . . . . . . . . . . . .    NUMB  0008H  
BUSY . . . . . . . . . . . . . .    NUMB  0004H  
BASIC52S                                                                                                      PAGE 156

B_C. . . . . . . . . . . . . . .  C ADDR  0AA4H  
B_TXA. . . . . . . . . . . . . .  C ADDR  0F23H  
B_TXA1 . . . . . . . . . . . . .  C ADDR  0F2DH  
C0 . . . . . . . . . . . . . . .  C ADDR  0CF6H  
C0C. . . . . . . . . . . . . . .  C ADDR  1025H  
C0ORX1 . . . . . . . . . . . . .  B ADDR  0034H  
C1 . . . . . . . . . . . . . . .  C ADDR  0CFDH  
C1C. . . . . . . . . . . . . . .  C ADDR  1030H  
C2 . . . . . . . . . . . . . . .  C ADDR  0D06H  
C2C. . . . . . . . . . . . . . .  C ADDR  102FH  
C2_T2. . . . . . . . . . . . . .  C ADDR  146CH  
C3C. . . . . . . . . . . . . . .  C ADDR  1035H  
CASB . . . . . . . . . . . . . .  C ADDR  1E9EH  NOT USED  
CASB2. . . . . . . . . . . . . .  C ADDR  1EADH  
CASB4. . . . . . . . . . . . . .  C ADDR  1EC0H  
CASB5. . . . . . . . . . . . . .  C ADDR  1EC2H  
CASB6. . . . . . . . . . . . . .  C ADDR  1ECBH  
CBIAS. . . . . . . . . . . . . .  C ADDR  167BH  
CC1. . . . . . . . . . . . . . .  C ADDR  1844H  
CCAL . . . . . . . . . . . . . .  C ADDR  051CH  
CCAL1. . . . . . . . . . . . . .  C ADDR  052CH  
CCLR3. . . . . . . . . . . . . .  C ADDR  068CH  
CCONT. . . . . . . . . . . . . .  C ADDR  183EH  
CERASE . . . . . . . . . . . . .  C ADDR  0500H  
CILOOP . . . . . . . . . . . . .  C ADDR  080FH  
CILOOP1. . . . . . . . . . . . .  C ADDR  0811H  
CIUB . . . . . . . . . . . . . .  B ADDR  001EH  
CI_RET . . . . . . . . . . . . .  C ADDR  07BEH  
CI_RET1. . . . . . . . . . . . .  C ADDR  07BFH  
CKS_B. . . . . . . . . . . . . .  B ADDR  001AH  
CKS_I. . . . . . . . . . . . . .  C ADDR  1F78H  
CL1. . . . . . . . . . . . . . .  C ADDR  106FH  
CL2. . . . . . . . . . . . . . .  C ADDR  1074H  
CL3. . . . . . . . . . . . . . .  C ADDR  1092H  
CL6. . . . . . . . . . . . . . .  C ADDR  1094H  
CL7. . . . . . . . . . . . . . .  C ADDR  109DH  
CLIST. . . . . . . . . . . . . .  C ADDR  104EH  
CLIST1 . . . . . . . . . . . . .  C ADDR  106BH  
CLN_UP . . . . . . . . . . . . .  C ADDR  0F17H  
CLOCK_CFG. . . . . . . . . . . .    NUMB  00B9H  
CLOOP. . . . . . . . . . . . . .  C ADDR  1A66H  
CL_1 . . . . . . . . . . . . . .  C ADDR  067DH  
CL_2 . . . . . . . . . . . . . .  C ADDR  068BH  NOT USED  
CMND1. . . . . . . . . . . . . .  C ADDR  1787H  
CMND11 . . . . . . . . . . . . .  C ADDR  17EBH  
CMND3. . . . . . . . . . . . . .  C ADDR  17C4H  
CMND31 . . . . . . . . . . . . .  C ADDR  17D1H  
CMND5. . . . . . . . . . . . . .  C ADDR  17DDH  
CMNDD. . . . . . . . . . . . . .  C ADDR  010FH  
CMNDLK . . . . . . . . . . . . .  C ADDR  0855H  
CMNDR. . . . . . . . . . . . . .  C ADDR  1794H  
CMNDSP . . . . . . . . . . . . .    NUMB  004DH  
CMNX . . . . . . . . . . . . . .  C ADDR  179BH  
CMNX1. . . . . . . . . . . . . .  C ADDR  17A8H  
CMPLK. . . . . . . . . . . . . .  C ADDR  1208H  
CN0. . . . . . . . . . . . . . .  C ADDR  0FFEH  
CN0T . . . . . . . . . . . . . .  C ADDR  101CH  
CN0T1. . . . . . . . . . . . . .  C ADDR  1005H  
BASIC52S                                                                                                      PAGE 157

CN0T2. . . . . . . . . . . . . .  C ADDR  1010H  
CN0T3. . . . . . . . . . . . . .  C ADDR  1012H  
CN0T4. . . . . . . . . . . . . .  C ADDR  101BH  
CNEW . . . . . . . . . . . . . .  C ADDR  065CH  
CNEW1. . . . . . . . . . . . . .  C ADDR  0662H  
CNTRLC . . . . . . . . . . . . .    NUMB  0003H  
CNTRLD . . . . . . . . . . . . .    NUMB  0004H  
CNT_S. . . . . . . . . . . . . .  B ADDR  0035H  
CNULL. . . . . . . . . . . . . .  C ADDR  0B08H  
CNX. . . . . . . . . . . . . . .  C ADDR  0FF9H  
COB. . . . . . . . . . . . . . .  B ADDR  001BH  
CONB . . . . . . . . . . . . . .  B ADDR  0017H  
CONST. . . . . . . . . . . . . .  C ADDR  0FEFH  
CONVERT. . . . . . . . . . . . .    NUMB  0058H  
CONVERT_ASCII_STRING_TO_BINARY .  C ADDR  1E9EH  
CONVERT_BINARY_TO_ASCII_STRING .  C ADDR  1EF7H  
CONVT. . . . . . . . . . . . . .  X ADDR  0050H  
COUB . . . . . . . . . . . . . .  B ADDR  001CH  
CPROG. . . . . . . . . . . . . .  C ADDR  048AH  
CPROG1 . . . . . . . . . . . . .  C ADDR  048DH  NOT USED  
CPROG2 . . . . . . . . . . . . .  C ADDR  04B1H  NOT USED  
CPS. . . . . . . . . . . . . . .  C ADDR  0EA9H  
CR . . . . . . . . . . . . . . .    NUMB  000DH  
CR0. . . . . . . . . . . . . . .  C ADDR  03ECH  
CR1. . . . . . . . . . . . . . .  C ADDR  0400H  
CR11 . . . . . . . . . . . . . .  C ADDR  0403H  
CR2. . . . . . . . . . . . . . .  C ADDR  040CH  
CR20 . . . . . . . . . . . . . .  C ADDR  0419H  
CRAM . . . . . . . . . . . . . .  C ADDR  177FH  
CRLF . . . . . . . . . . . . . .  C ADDR  06A5H  
CRLF2. . . . . . . . . . . . . .  C ADDR  06A3H  
CROM . . . . . . . . . . . . . .  C ADDR  053CH  
CRP. . . . . . . . . . . . . . .  C ADDR  06ADH  
CRS. . . . . . . . . . . . . . .  C ADDR  03E0H  
CRS1 . . . . . . . . . . . . . .  C ADDR  03E5H  
CRS2 . . . . . . . . . . . . . .  C ADDR  03E8H  
CRST . . . . . . . . . . . . . .  C ADDR  038BH  
CRST1. . . . . . . . . . . . . .  C ADDR  03A4H  
CRST2. . . . . . . . . . . . . .  C ADDR  03A7H  
CRUN . . . . . . . . . . . . . .  C ADDR  0802H  
CS1. . . . . . . . . . . . . . .  C ADDR  0B47H  
CSC. . . . . . . . . . . . . . .  C ADDR  0BBDH  
CSETUP . . . . . . . . . . . . .  C ADDR  0B4BH  
CSETUP1. . . . . . . . . . . . .  C ADDR  0B56H  
CSTAKA . . . . . . . . . . . . .  C ADDR  142CH  
CSTAKA2. . . . . . . . . . . . .  C ADDR  142AH  
CSTKA. . . . . . . . . . . . . .    NUMB  0011H  
CSTKAH . . . . . . . . . . . . .    NUMB  0000H  
CSTS . . . . . . . . . . . . . .  C ADDR  07C8H  
CSTS1. . . . . . . . . . . . . .  C ADDR  07CEH  
CSTS2. . . . . . . . . . . . . .  C ADDR  07D4H  
CSY. . . . . . . . . . . . . . .  C ADDR  0A1EH  
CSY1 . . . . . . . . . . . . . .  C ADDR  0A2EH  
CSY2 . . . . . . . . . . . . . .  C ADDR  0A3AH  
CS_I . . . . . . . . . . . . . .  C ADDR  1F7EH  
CXFER. . . . . . . . . . . . . .  C ADDR  1773H  
CXTAL. . . . . . . . . . . . . .  X ADDR  0113H  
CY . . . . . . . . . . . . . . .  B ADDR  00D7H  PREDEFINED  
BASIC52S                                                                                                      PAGE 158

C_1. . . . . . . . . . . . . . .  C ADDR  0F12H  
C_2. . . . . . . . . . . . . . .  C ADDR  0F0DH  
C_BIT. . . . . . . . . . . . . .  B ADDR  002EH  
C_EX . . . . . . . . . . . . . .  C ADDR  07D7H  
C_K. . . . . . . . . . . . . . .  C ADDR  0540H  
C_TST. . . . . . . . . . . . . .  C ADDR  0EC6H  
D1 . . . . . . . . . . . . . . .  C ADDR  05DCH  
DACK . . . . . . . . . . . . . .  B ADDR  0096H  
DAPR . . . . . . . . . . . . . .    NUMB  00DAH  NOT USED  
DBTWO. . . . . . . . . . . . . .  C ADDR  1194H  
DC1. . . . . . . . . . . . . . .  C ADDR  1FF3H  
DC10 . . . . . . . . . . . . . .  C ADDR  1FF0H  
DC11 . . . . . . . . . . . . . .  C ADDR  1FF6H  
DCMPX. . . . . . . . . . . . . .  C ADDR  05CCH  
DEC3210. . . . . . . . . . . . .  C ADDR  158BH  
DEC3211. . . . . . . . . . . . .  C ADDR  158FH  NOT USED  
DEC3212. . . . . . . . . . . . .  C ADDR  1590H  
DEC76. . . . . . . . . . . . . .  C ADDR  1647H  
DEC77. . . . . . . . . . . . . .  C ADDR  164CH  
DECDP. . . . . . . . . . . . . .  C ADDR  05C2H  
DECDP1 . . . . . . . . . . . . .  C ADDR  05C8H  
DECDP2 . . . . . . . . . . . . .  C ADDR  05C0H  
DECX . . . . . . . . . . . . . .  C ADDR  1D42H  
DEC_ASTKA. . . . . . . . . . . .  C ADDR  120BH  
DEC_ASTKA1 . . . . . . . . . . .  C ADDR  1212H  
DEC_R. . . . . . . . . . . . . .  C ADDR  1589H  
DELAY. . . . . . . . . . . . . .  C ADDR  24B9H  
DELTST . . . . . . . . . . . . .  C ADDR  0EE1H  
DELTST1. . . . . . . . . . . . .  C ADDR  0EE3H  
DIGIT. . . . . . . . . . . . . .    NUMB  0004H  
DIGIT_CHECK. . . . . . . . . . .  C ADDR  1FEDH  
DIRF . . . . . . . . . . . . . .  B ADDR  002FH  
DIV0 . . . . . . . . . . . . . .  C ADDR  1ABDH  
DIV3 . . . . . . . . . . . . . .  C ADDR  1ACAH  
DIV4 . . . . . . . . . . . . . .  C ADDR  1AD7H  
DIV5 . . . . . . . . . . . . . .  C ADDR  1ADAH  
DIV6 . . . . . . . . . . . . . .  C ADDR  1AE2H  
DIV7 . . . . . . . . . . . . . .  C ADDR  1AF9H  
DIV8 . . . . . . . . . . . . . .  C ADDR  1B0EH  
DLD. . . . . . . . . . . . . . .  C ADDR  062BH  
DONE_LOAD. . . . . . . . . . . .  B ADDR  0053H  
DO_SFR . . . . . . . . . . . . .  C ADDR  2569H  
DPH. . . . . . . . . . . . . . .  D ADDR  0083H  PREDEFINED  
DPL. . . . . . . . . . . . . . .  D ADDR  0082H  PREDEFINED  
DP_B . . . . . . . . . . . . . .  C ADDR  0E9BH  
DP_T . . . . . . . . . . . . . .  C ADDR  0EA2H  
DRQ. . . . . . . . . . . . . . .  B ADDR  0031H  
DT1. . . . . . . . . . . . . . .  C ADDR  0EE8H  
DTEMP. . . . . . . . . . . . . .  C ADDR  184DH  
DTYPE. . . . . . . . . . . . . .    NUMB  0003H  
DUBSUB . . . . . . . . . . . . .  C ADDR  0A02H  
D_CHK. . . . . . . . . . . . . .  C ADDR  0DCCH  
D_L1 . . . . . . . . . . . . . .  C ADDR  0AF8H  
D_UNDER. . . . . . . . . . . . .  C ADDR  1AC8H  
E10X . . . . . . . . . . . . . .  C ADDR  1FB5H  
E11X . . . . . . . . . . . . . .  C ADDR  1F89H  
E14X . . . . . . . . . . . . . .  C ADDR  1F81H  
E15X . . . . . . . . . . . . . .  C ADDR  1FA6H  
BASIC52S                                                                                                      PAGE 159

E16X . . . . . . . . . . . . . .  C ADDR  1F9AH  
E1X. . . . . . . . . . . . . . .  C ADDR  1746H  
E1XX . . . . . . . . . . . . . .  C ADDR  1885H  
E1XX1. . . . . . . . . . . . . .  C ADDR  1887H  
E1XX2. . . . . . . . . . . . . .  C ADDR  188CH  
E2X. . . . . . . . . . . . . . .  C ADDR  1751H  
E3X. . . . . . . . . . . . . . .  C ADDR  1828H  
E3XX . . . . . . . . . . . . . .  C ADDR  09BDH  
E4XX . . . . . . . . . . . . . .  C ADDR  0BC1H  
E4YY . . . . . . . . . . . . . .  C ADDR  121AH  
E5X. . . . . . . . . . . . . . .  C ADDR  1816H  
E6X. . . . . . . . . . . . . . .  C ADDR  1761H  
E7X. . . . . . . . . . . . . . .  C ADDR  1804H  
EA . . . . . . . . . . . . . . .  B ADDR  00AFH  PREDEFINED  
EATC . . . . . . . . . . . . . .  C ADDR  0CE5H  
EBIAS. . . . . . . . . . . . . .  C ADDR  1261H  
EIG. . . . . . . . . . . . . . .  C ADDR  036DH  
EIGP . . . . . . . . . . . . . .  C ADDR  0E4EH  
EK . . . . . . . . . . . . . . .  C ADDR  0C0EH  
ENDBIT . . . . . . . . . . . . .  B ADDR  0029H  
EOF. . . . . . . . . . . . . . .    NUMB  0001H  
EP1. . . . . . . . . . . . . . .  C ADDR  0F45H  
EP2. . . . . . . . . . . . . . .  C ADDR  0F49H  
EP21 . . . . . . . . . . . . . .  C ADDR  0F52H  
EP22 . . . . . . . . . . . . . .  C ADDR  0F5BH  
EP3. . . . . . . . . . . . . . .  C ADDR  0F6FH  
EP4. . . . . . . . . . . . . . .  C ADDR  0F71H  
EP41 . . . . . . . . . . . . . .  C ADDR  0F76H  
EP42 . . . . . . . . . . . . . .  C ADDR  0F7BH  
EP5. . . . . . . . . . . . . . .  C ADDR  0F82H  
ER0. . . . . . . . . . . . . . .  C ADDR  1874H  
ER1. . . . . . . . . . . . . . .  C ADDR  18B8H  
ER2. . . . . . . . . . . . . . .  C ADDR  18C2H  
ER3. . . . . . . . . . . . . . .  C ADDR  18D1H  
ER31 . . . . . . . . . . . . . .  C ADDR  18EEH  
ER4. . . . . . . . . . . . . . .  C ADDR  18FBH  
ERA1 . . . . . . . . . . . . . .  C ADDR  050DH  
ERAMEND. . . . . . . . . . . . .    NUMB  03FFH  
ERL4 . . . . . . . . . . . . . .  C ADDR  0844H  
ERPAR. . . . . . . . . . . . . .  C ADDR  0CE3H  
ERRLK. . . . . . . . . . . . . .  C ADDR  04D6H  
ERRLOC . . . . . . . . . . . . .  X ADDR  0101H  
ERRNUM . . . . . . . . . . . . .  X ADDR  0102H  
ERROR. . . . . . . . . . . . . .  C ADDR  188FH  
ERROR0 . . . . . . . . . . . . .  C ADDR  189BH  
ERROR01. . . . . . . . . . . . .  C ADDR  18A2H  
ERROR1 . . . . . . . . . . . . .  C ADDR  1890H  
ERROR9 . . . . . . . . . . . . .  C ADDR  24D0H  
ERRS . . . . . . . . . . . . . .  C ADDR  18ADH  
ERS. . . . . . . . . . . . . . .  C ADDR  1FF8H  
ET0. . . . . . . . . . . . . . .  B ADDR  00A9H  PREDEFINED  
EX1. . . . . . . . . . . . . . .  B ADDR  00AAH  PREDEFINED  
EXA. . . . . . . . . . . . . . .  C ADDR  037BH  
EXC. . . . . . . . . . . . . . .  C ADDR  0383H  
EXI. . . . . . . . . . . . . . .  C ADDR  1836H  
EXP1 . . . . . . . . . . . . . .  C ADDR  17F8H  
EXP11. . . . . . . . . . . . . .  C ADDR  17F2H  
EXPONENTS_EQUAL. . . . . . . . .  C ADDR  1A5BH  
BASIC52S                                                                                                      PAGE 160

EXPOT4 . . . . . . . . . . . . .  C ADDR  1E16H  
EXPOT5 . . . . . . . . . . . . .  C ADDR  1E41H  
EXPOTX . . . . . . . . . . . . .  C ADDR  1E14H  
EXPOUT . . . . . . . . . . . . .  C ADDR  1E01H  
EXPRB. . . . . . . . . . . . . .  C ADDR  0F43H  
E_FIND . . . . . . . . . . . . .  C ADDR  0A93H  
F0 . . . . . . . . . . . . . . .  B ADDR  00D5H  PREDEFINED  
FCMP . . . . . . . . . . . . . .  C ADDR  1202H  
FDT1 . . . . . . . . . . . . . .  C ADDR  1D53H  
FDT2 . . . . . . . . . . . . . .  C ADDR  1D5BH  
FDTEST . . . . . . . . . . . . .  C ADDR  1D4FH  NOT USED  
FINDC. . . . . . . . . . . . . .  C ADDR  0EEEH  
FINDCR . . . . . . . . . . . . .  C ADDR  0EECH  
FINISH1. . . . . . . . . . . . .  C ADDR  1D14H  
FINISH2. . . . . . . . . . . . .  C ADDR  1D27H  
FINISH_UP. . . . . . . . . . . .  C ADDR  1D28H  
FINISH_UP1 . . . . . . . . . . .  C ADDR  1D2FH  
FIRST_RADIX. . . . . . . . . . .  B ADDR  0052H  
FL1. . . . . . . . . . . . . . .  C ADDR  0AD3H  
FL11 . . . . . . . . . . . . . .  C ADDR  0AD7H  
FL2. . . . . . . . . . . . . . .  C ADDR  0AECH  
FL3. . . . . . . . . . . . . . .  C ADDR  0ADCH  
FLOATING_ADD . . . . . . . . . .  C ADDR  1993H  
FLOATING_COMP. . . . . . . . . .  C ADDR  1A43H  
FLOATING_DIV . . . . . . . . . .  C ADDR  1AB0H  
FLOATING_MUL . . . . . . . . . .  C ADDR  1A73H  
FLOATING_POINT_INPUT . . . . . .  C ADDR  1CC2H  
FLOATING_POINT_OUTPUT. . . . . .  C ADDR  1D7AH  
FLOATING_SUB . . . . . . . . . .  C ADDR  1989H  
FMUL0. . . . . . . . . . . . . .  C ADDR  1A78H  
FMUL1. . . . . . . . . . . . . .  C ADDR  1A7AH  
FMUL2. . . . . . . . . . . . . .  C ADDR  1A8CH  
FMUL21 . . . . . . . . . . . . .  C ADDR  1A8EH  
FMUL3. . . . . . . . . . . . . .  C ADDR  1A9DH  
FMUL_OVER. . . . . . . . . . . .  C ADDR  1A88H  
FNDCL2 . . . . . . . . . . . . .  C ADDR  0EF6H  
FNDCL3 . . . . . . . . . . . . .  C ADDR  0EFAH  
FORMAT . . . . . . . . . . . . .    NUMB  0017H  
FOUND_RADIX. . . . . . . . . . .  B ADDR  0051H  
FOV. . . . . . . . . . . . . . .  C ADDR  1A8AH  
FPC1 . . . . . . . . . . . . . .  C ADDR  1BB5H  
FPO1 . . . . . . . . . . . . . .  C ADDR  1D8CH  
FPO2 . . . . . . . . . . . . . .  C ADDR  1D93H  
FPO3 . . . . . . . . . . . . . .  C ADDR  1DA6H  
FPONE. . . . . . . . . . . . . .  C ADDR  16F2H  
FPSIZ. . . . . . . . . . . . . .    NUMB  0006H  
FPT1 . . . . . . . . . . . . . .  X ADDR  0119H  
FPT2 . . . . . . . . . . . . . .  X ADDR  011FH  
FPTS . . . . . . . . . . . . . .  C ADDR  104BH  
FPTST. . . . . . . . . . . . . .  C ADDR  1038H  
FPTST1 . . . . . . . . . . . . .  C ADDR  1045H  
FP_ACC1. . . . . . . . . . . . .    NUMB  0035H  NOT USED  
FP_ACC2. . . . . . . . . . . . .    NUMB  0036H  NOT USED  
FP_ACC3. . . . . . . . . . . . .    NUMB  0037H  NOT USED  
FP_ACC4. . . . . . . . . . . . .    NUMB  0038H  NOT USED  
FP_ACC5. . . . . . . . . . . . .    NUMB  0039H  NOT USED  
FP_ACC6. . . . . . . . . . . . .    NUMB  003AH  NOT USED  
FP_ACC7. . . . . . . . . . . . .    NUMB  003BH  NOT USED  
BASIC52S                                                                                                      PAGE 161

FP_ACC8. . . . . . . . . . . . .    NUMB  003CH  
FP_ACCC. . . . . . . . . . . . .    NUMB  0034H  
FP_ACCS. . . . . . . . . . . . .    NUMB  003DH  NOT USED  
FP_ACCX. . . . . . . . . . . . .    NUMB  0033H  
FP_BASE. . . . . . . . . . . . .  C ADDR  196FH  
FP_BASE1 . . . . . . . . . . . .  C ADDR  1971H  
FP_BASE10. . . . . . . . . . . .  C ADDR  1983H  
FP_BASE11. . . . . . . . . . . .  C ADDR  1985H  
FP_BASE12. . . . . . . . . . . .  C ADDR  1987H  
FP_BASE2 . . . . . . . . . . . .  C ADDR  1973H  
FP_BASE3 . . . . . . . . . . . .  C ADDR  1975H  
FP_BASE4 . . . . . . . . . . . .  C ADDR  1977H  
FP_BASE5 . . . . . . . . . . . .  C ADDR  1979H  
FP_BASE6 . . . . . . . . . . . .  C ADDR  197BH  
FP_BASE7 . . . . . . . . . . . .  C ADDR  197DH  
FP_BASE8 . . . . . . . . . . . .  C ADDR  197FH  
FP_BASE9 . . . . . . . . . . . .  C ADDR  1981H  
FP_CARRY . . . . . . . . . . . .    NUMB  002AH  
FP_CLEAR . . . . . . . . . . . .  C ADDR  1BB2H  
FP_DIG12 . . . . . . . . . . . .    NUMB  002BH  
FP_DIG34 . . . . . . . . . . . .    NUMB  002CH  
FP_DIG56 . . . . . . . . . . . .    NUMB  002DH  
FP_DIG78 . . . . . . . . . . . .    NUMB  002EH  
FP_EXP . . . . . . . . . . . . .    NUMB  0030H  
FP_NIB1. . . . . . . . . . . . .    NUMB  002BH  
FP_NIB2. . . . . . . . . . . . .    NUMB  002CH  NOT USED  
FP_NIB3. . . . . . . . . . . . .    NUMB  002DH  NOT USED  
FP_NIB4. . . . . . . . . . . . .    NUMB  002EH  NOT USED  
FP_NIB5. . . . . . . . . . . . .    NUMB  002FH  NOT USED  
FP_NIB6. . . . . . . . . . . . .    NUMB  0030H  NOT USED  
FP_NIB7. . . . . . . . . . . . .    NUMB  0031H  NOT USED  
FP_NIB8. . . . . . . . . . . . .    NUMB  0032H  
FP_NUMBER_SIZE . . . . . . . . .    NUMB  0006H  
FP_SIGN. . . . . . . . . . . . .    NUMB  002FH  
FP_STATUS. . . . . . . . . . . .    NUMB  0028H  
FP_TEMP. . . . . . . . . . . . .    NUMB  0029H  
FREE . . . . . . . . . . . . . .  C ADDR  1DD2H  
FREE1. . . . . . . . . . . . . .  C ADDR  1DD9H  
FREE2. . . . . . . . . . . . . .  C ADDR  1DF5H  
FREE4. . . . . . . . . . . . . .  C ADDR  1DEDH  
FRTEST . . . . . . . . . . . . .  C ADDR  1D4CH  
FS . . . . . . . . . . . . . . .  C ADDR  13D0H  
FSIZE. . . . . . . . . . . . . .    NUMB  0011H  
FSTK . . . . . . . . . . . . . .  C ADDR  13CBH  
FSUB10 . . . . . . . . . . . . .  C ADDR  1A41H  
FSUB5. . . . . . . . . . . . . .  C ADDR  1A10H  
FSUB6. . . . . . . . . . . . . .  C ADDR  1A1BH  
FSUB7. . . . . . . . . . . . . .  C ADDR  1A1FH  
FSUB8. . . . . . . . . . . . . .  C ADDR  1A2AH  
FSUB81 . . . . . . . . . . . . .  C ADDR  1A2DH  
FSUB9. . . . . . . . . . . . . .  C ADDR  1A30H  
FTYPE. . . . . . . . . . . . . .    NUMB  0001H  
FUL1 . . . . . . . . . . . . . .  C ADDR  15B0H  
FULL . . . . . . . . . . . . . .  C ADDR  15A8H  
F_VAR. . . . . . . . . . . . . .  C ADDR  0619H  
F_VAR0 . . . . . . . . . . . . .  C ADDR  0620H  
F_VAR1 . . . . . . . . . . . . .  C ADDR  0636H  
F_VAR2 . . . . . . . . . . . . .  C ADDR  0643H  
BASIC52S                                                                                                      PAGE 162

G1 . . . . . . . . . . . . . . .  C ADDR  058FH  
G2 . . . . . . . . . . . . . . .  C ADDR  05A2H  
G3 . . . . . . . . . . . . . . .  C ADDR  05A6H  
G4 . . . . . . . . . . . . . . .  C ADDR  05A9H  
G5 . . . . . . . . . . . . . . .  C ADDR  05ACH  
GC . . . . . . . . . . . . . . .  C ADDR  0ECDH  
GCI. . . . . . . . . . . . . . .  C ADDR  0ED5H  
GCI1 . . . . . . . . . . . . . .  C ADDR  0ED7H  
GCI11. . . . . . . . . . . . . .  C ADDR  0EDEH  
GETEND . . . . . . . . . . . . .  C ADDR  058AH  
GETLIN . . . . . . . . . . . . .  C ADDR  058CH  
GET_DIGIT_CHECK. . . . . . . . .  C ADDR  1FEBH  
GET_DPTR_CHARACTER . . . . . . .  C ADDR  1D5FH  
GET_NUM. . . . . . . . . . . . .  C ADDR  1957H  
GLN. . . . . . . . . . . . . . .  C ADDR  0AD1H  
GT1. . . . . . . . . . . . . . .  C ADDR  1CEAH  
GT11 . . . . . . . . . . . . . .  C ADDR  1CF2H  
GT12 . . . . . . . . . . . . . .  C ADDR  1CF5H  
GT2. . . . . . . . . . . . . . .  C ADDR  1D02H  
GTB. . . . . . . . . . . . . . .  X ADDR  0100H  
GTEST. . . . . . . . . . . . . .  C ADDR  1CDBH  
GTRD . . . . . . . . . . . . . .  B ADDR  0018H  
GTX. . . . . . . . . . . . . . .  C ADDR  1547H  
GTX1 . . . . . . . . . . . . . .  C ADDR  155AH  
GTYPE. . . . . . . . . . . . . .    NUMB  0002H  
HC1. . . . . . . . . . . . . . .  C ADDR  1CB1H  
HC11 . . . . . . . . . . . . . .  C ADDR  1CB4H  
HEX2X. . . . . . . . . . . . . .  C ADDR  1F3CH  NOT USED  
HEXDO1 . . . . . . . . . . . . .  C ADDR  1CA1H  
HEXDON . . . . . . . . . . . . .  C ADDR  1CA0H  
HEXOUT . . . . . . . . . . . . .  C ADDR  1F30H  
HEXSC1 . . . . . . . . . . . . .  C ADDR  1C8FH  
HEXSCAN. . . . . . . . . . . . .  C ADDR  1C89H  
HEX_CHECK. . . . . . . . . . . .  C ADDR  1CA9H  
HEX_CHECK1 . . . . . . . . . . .  C ADDR  1CAEH  
HMODE. . . . . . . . . . . . . .  B ADDR  0037H  
HOUT1. . . . . . . . . . . . . .  C ADDR  1F48H  
HOUTHI . . . . . . . . . . . . .  C ADDR  1F53H  
HOUTLO . . . . . . . . . . . . .  C ADDR  1F54H  
HS1. . . . . . . . . . . . . . .  C ADDR  1CA6H  
H_RET. . . . . . . . . . . . . .  C ADDR  196BH  
I2 . . . . . . . . . . . . . . .  C ADDR  123BH  
I21. . . . . . . . . . . . . . .  C ADDR  1247H  
I2CERRMSG. . . . . . . . . . . .  C ADDR  24DBH  
I2CERROR . . . . . . . . . . . .  C ADDR  24C7H  
I2CGET . . . . . . . . . . . . .  C ADDR  2492H  
I2CPUT . . . . . . . . . . . . .  C ADDR  2462H  
I2CSTART . . . . . . . . . . . .  C ADDR  2440H  
I2CSTOP. . . . . . . . . . . . .  C ADDR  2456H  
IAN. . . . . . . . . . . . . . .  C ADDR  00F3H  
IAT. . . . . . . . . . . . . . .  C ADDR  090BH  
IAT1 . . . . . . . . . . . . . .  C ADDR  090EH  
IBCNT. . . . . . . . . . . . . .  X ADDR  0004H  
IBLK . . . . . . . . . . . . . .  C ADDR  193FH  
IBLK1. . . . . . . . . . . . . .  C ADDR  194EH  
IBLN . . . . . . . . . . . . . .  X ADDR  0005H  
IBUF . . . . . . . . . . . . . .  X ADDR  0007H  
ICLR . . . . . . . . . . . . . .  C ADDR  069AH  
BASIC52S                                                                                                      PAGE 163

ICLR1. . . . . . . . . . . . . .  C ADDR  069FH  
IE . . . . . . . . . . . . . . .  D ADDR  00A8H  PREDEFINED  
IFIX . . . . . . . . . . . . . .  C ADDR  1223H  
IFIXL. . . . . . . . . . . . . .  C ADDR  0E90H  
IGC. . . . . . . . . . . . . . .  C ADDR  0ECBH  
ILOOP. . . . . . . . . . . . . .  C ADDR  0813H  
ILOOP1 . . . . . . . . . . . . .  C ADDR  081FH  
IMOV . . . . . . . . . . . . . .  C ADDR  1566H  
IN2. . . . . . . . . . . . . . .  C ADDR  0DFDH  
IN2A . . . . . . . . . . . . . .  C ADDR  0E02H  
IN3. . . . . . . . . . . . . . .  C ADDR  0E0FH  
IN3A . . . . . . . . . . . . . .  C ADDR  0E20H  
IN5. . . . . . . . . . . . . . .  C ADDR  0E40H  
IN6. . . . . . . . . . . . . . .  C ADDR  0E49H  
INBIT. . . . . . . . . . . . . .  B ADDR  001DH  
INC3210. . . . . . . . . . . . .  C ADDR  1576H  
INC3211. . . . . . . . . . . . .  C ADDR  157BH  
INC3212. . . . . . . . . . . . .  C ADDR  1580H  
INCH1. . . . . . . . . . . . . .  C ADDR  07AAH  
INCH11 . . . . . . . . . . . . .  C ADDR  07AFH  
INCH12 . . . . . . . . . . . . .  C ADDR  07B4H  
INCH13 . . . . . . . . . . . . .  C ADDR  07BBH  
INCHAR . . . . . . . . . . . . .  C ADDR  0791H  
INCHAR1. . . . . . . . . . . . .  C ADDR  0799H  
INCHAR2. . . . . . . . . . . . .  C ADDR  07A1H  
INC_AND_GET_DPTR_CHARACTER . . .  C ADDR  1D5EH  
INC_ASTKA. . . . . . . . . . . .  C ADDR  124FH  
INC_FP_EXP . . . . . . . . . . .  C ADDR  1B72H  
INERR. . . . . . . . . . . . . .  C ADDR  1D44H  
INL0 . . . . . . . . . . . . . .  C ADDR  06D6H  NOT USED  
INL1 . . . . . . . . . . . . . .  C ADDR  06DDH  
INL11. . . . . . . . . . . . . .  C ADDR  06E6H  
INL2 . . . . . . . . . . . . . .  C ADDR  06D3H  
INL2B. . . . . . . . . . . . . .  C ADDR  06ECH  
INL2B1 . . . . . . . . . . . . .  C ADDR  06F2H  
INL2B2 . . . . . . . . . . . . .  C ADDR  06F5H  
INL6 . . . . . . . . . . . . . .  C ADDR  06FEH  
INLINE . . . . . . . . . . . . .  C ADDR  06D8H  
INLOOP . . . . . . . . . . . . .  C ADDR  1CD0H  
INLPIK . . . . . . . . . . . . .  C ADDR  1CD8H  
INLX . . . . . . . . . . . . . .  C ADDR  06E8H  
INPROG . . . . . . . . . . . . .  B ADDR  0011H  
INP_B. . . . . . . . . . . . . .  B ADDR  0022H  
INS. . . . . . . . . . . . . . .  C ADDR  0103H  
INSR . . . . . . . . . . . . . .  C ADDR  1517H  
INSR1. . . . . . . . . . . . . .  C ADDR  1523H  
INTBIT . . . . . . . . . . . . .  B ADDR  0012H  
INTERR . . . . . . . . . . . . .  C ADDR  0F30H  
INTERR1. . . . . . . . . . . . .  C ADDR  0F32H  
INTERX . . . . . . . . . . . . .  C ADDR  0938H  
INTERX1. . . . . . . . . . . . .  C ADDR  093BH  
INTERX2. . . . . . . . . . . . .  C ADDR  0941H  
INTERX3. . . . . . . . . . . . .  C ADDR  0948H  
INTERX4. . . . . . . . . . . . .  C ADDR  094DH  
INTGER . . . . . . . . . . . . .  C ADDR  0F35H  
INTGRC . . . . . . . . . . . . .  B ADDR  0019H  NOT USED  
INTLOC . . . . . . . . . . . . .  X ADDR  0120H  
INTPEN . . . . . . . . . . . . .  B ADDR  0016H  
BASIC52S                                                                                                      PAGE 164

INTXAH . . . . . . . . . . . . .    NUMB  0042H  
INTXAL . . . . . . . . . . . . .    NUMB  0043H  
IP . . . . . . . . . . . . . . .  D ADDR  00B8H  PREDEFINED  
IPROGS . . . . . . . . . . . . .  X ADDR  012AH  NOT USED  
IRAMTOP. . . . . . . . . . . . .    NUMB  00FFH  
ISAV . . . . . . . . . . . . . .  B ADDR  002BH  
ISHIGH . . . . . . . . . . . . .  C ADDR  2450H  
ISTA0. . . . . . . . . . . . . .  C ADDR  0950H  
ISTA01 . . . . . . . . . . . . .  C ADDR  095AH  
ISTA1. . . . . . . . . . . . . .  C ADDR  095CH  
ISTAT. . . . . . . . . . . . . .  C ADDR  08F8H  
ISTAT1 . . . . . . . . . . . . .  C ADDR  0900H  
ISTAX. . . . . . . . . . . . . .  C ADDR  091CH  
ISTAX1 . . . . . . . . . . . . .  C ADDR  0921H  
ISTAY. . . . . . . . . . . . . .  C ADDR  0925H  
ISTAY1 . . . . . . . . . . . . .  C ADDR  0928H  
ISTAY2 . . . . . . . . . . . . .  C ADDR  092DH  
IST_CAL. . . . . . . . . . . . .  C ADDR  09E7H  
ITRAP. . . . . . . . . . . . . .  C ADDR  086AH  
ITRAP1 . . . . . . . . . . . . .  C ADDR  0872H  
ITRAP2 . . . . . . . . . . . . .  C ADDR  087AH  
ITRAP21. . . . . . . . . . . . .  C ADDR  087DH  NOT USED  
ITRAP3 . . . . . . . . . . . . .  C ADDR  0882H  
ITRET. . . . . . . . . . . . . .  C ADDR  0F40H  
I_DL . . . . . . . . . . . . . .  C ADDR  185BH  
I_DR . . . . . . . . . . . . . .  C ADDR  1902H  
I_L. . . . . . . . . . . . . . .  C ADDR  0849H  
I_PI . . . . . . . . . . . . . .  C ADDR  0E95H  
I_RET. . . . . . . . . . . . . .  C ADDR  1871H  
I_S. . . . . . . . . . . . . . .  C ADDR  0933H  
I_S1 . . . . . . . . . . . . . .  C ADDR  0936H  
I_T0 . . . . . . . . . . . . . .  B ADDR  0026H  
L20DPI . . . . . . . . . . . . .  C ADDR  0573H  
L31DPI . . . . . . . . . . . . .  C ADDR  05BAH  
LCLR . . . . . . . . . . . . . .  C ADDR  05E7H  
LDPTRI . . . . . . . . . . . . .  C ADDR  05B0H  
LD_A . . . . . . . . . . . . . .  C ADDR  0FE9H  
LD_T . . . . . . . . . . . . . .  C ADDR  0582H  
LEFT . . . . . . . . . . . . . .  C ADDR  1BF3H  
LEFT1. . . . . . . . . . . . . .  C ADDR  1BF5H  
LEFT2. . . . . . . . . . . . . .  C ADDR  1BF6H  
LEFT3. . . . . . . . . . . . . .  C ADDR  1BFDH  NOT USED  
LEFT5. . . . . . . . . . . . . .  C ADDR  1C1CH  
LEFTL. . . . . . . . . . . . . .  C ADDR  1C08H  
LEFTL1 . . . . . . . . . . . . .  C ADDR  1C1BH  
LF . . . . . . . . . . . . . . .    NUMB  000AH  
LIN1 . . . . . . . . . . . . . .  C ADDR  155CH  
LINE . . . . . . . . . . . . . .  C ADDR  14F0H  
LINE0. . . . . . . . . . . . . .  C ADDR  14EDH  
LINE1. . . . . . . . . . . . . .  C ADDR  150BH  
LINEB. . . . . . . . . . . . . .  B ADDR  0015H  
LINLEN . . . . . . . . . . . . .    NUMB  0049H  
LMOV . . . . . . . . . . . . . .  C ADDR  156DH  
LNTAB. . . . . . . . . . . . . .  C ADDR  16A9H  
LN_D . . . . . . . . . . . . . .  C ADDR  131BH  
LOAD1. . . . . . . . . . . . . .  C ADDR  19ADH  
LOAD2. . . . . . . . . . . . . .  C ADDR  19BDH  
LOAD21 . . . . . . . . . . . . .  C ADDR  19C5H  
BASIC52S                                                                                                      PAGE 165

LOAD22 . . . . . . . . . . . . .  C ADDR  19CAH  
LOAD23 . . . . . . . . . . . . .  C ADDR  19CEH  
LOAD25 . . . . . . . . . . . . .  C ADDR  19E3H  
LOAD7. . . . . . . . . . . . . .  C ADDR  1B93H  NOT USED  
LOADR1 . . . . . . . . . . . . .  C ADDR  1C7FH  
LOADR1_MANTISSA. . . . . . . . .  C ADDR  1C7BH  
LOAD_POINTERS. . . . . . . . . .  C ADDR  1C5EH  
LP . . . . . . . . . . . . . . .  B ADDR  0097H  
LPB. . . . . . . . . . . . . . .  B ADDR  0019H  
LTOUT1 . . . . . . . . . . . . .  C ADDR  074AH  
LTX. . . . . . . . . . . . . . .  C ADDR  1528H  
LTX1 . . . . . . . . . . . . . .  C ADDR  152FH  
LTX2 . . . . . . . . . . . . . .  C ADDR  1543H  
L_RET. . . . . . . . . . . . . .  C ADDR  0EEBH  
MDES1. . . . . . . . . . . . . .  C ADDR  1C6AH  
MEMTOP . . . . . . . . . . . . .  X ADDR  010AH  
MILLIV . . . . . . . . . . . . .    NUMB  0047H  
MNL0 . . . . . . . . . . . . . .  C ADDR  1C3EH  
MNL1 . . . . . . . . . . . . . .  C ADDR  1C50H  
MNLOOP . . . . . . . . . . . . .  C ADDR  1C35H  
MOUT . . . . . . . . . . . . . .  C ADDR  1E8EH  
MSIGN. . . . . . . . . . . . . .  B ADDR  0078H  
MT1. . . . . . . . . . . . . . .    NUMB  0045H  
MT2. . . . . . . . . . . . . . .    NUMB  0046H  
MT_ALL . . . . . . . . . . . . .  X ADDR  0108H  
MU1. . . . . . . . . . . . . . .  C ADDR  136BH  NOT USED  
MUL11. . . . . . . . . . . . . .  C ADDR  1EEFH  NOT USED  
MULNUM . . . . . . . . . . . . .  C ADDR  1ED6H  
MULNUM10 . . . . . . . . . . . .  C ADDR  1ED3H  
MULX . . . . . . . . . . . . . .  C ADDR  1EF6H  
MUL_DIV_EXP_AND_SIGN . . . . . .  C ADDR  1C68H  
MUL_NIBBLE . . . . . . . . . . .  C ADDR  1C2BH  
MUL_UNDERFLOW. . . . . . . . . .  B ADDR  0028H  
N4 . . . . . . . . . . . . . . .  C ADDR  0BC6H  
NACK . . . . . . . . . . . . . .    NUMB  0008H  
NL1. . . . . . . . . . . . . . .  C ADDR  1E6EH  
NLC. . . . . . . . . . . . . . .  C ADDR  077AH  
NLC1 . . . . . . . . . . . . . .  C ADDR  077FH  
NLC2 . . . . . . . . . . . . . .  C ADDR  0782H  
NLC3 . . . . . . . . . . . . . .  C ADDR  0786H  
NMARK_L. . . . . . . . . . . . .  C ADDR  1A96H  
NMOV . . . . . . . . . . . . . .  C ADDR  159DH  
NMOV1. . . . . . . . . . . . . .  C ADDR  15A7H  
NOGO . . . . . . . . . . . . . .  C ADDR  056EH  
NOPASS . . . . . . . . . . . . .  C ADDR  0F21H  
NOROM. . . . . . . . . . . . . .  C ADDR  1FC9H  
NO_C . . . . . . . . . . . . . .  B ADDR  0030H  
NR1. . . . . . . . . . . . . . .  C ADDR  1E77H  
NTWO . . . . . . . . . . . . . .  C ADDR  1161H  
NULL . . . . . . . . . . . . . .    NUMB  0000H  
NULLCT . . . . . . . . . . . . .    NUMB  0015H  
NUMC . . . . . . . . . . . . . .  C ADDR  0C19H  
NUMC1. . . . . . . . . . . . . .  C ADDR  0C22H  
NUM_LT . . . . . . . . . . . . .  C ADDR  1E67H  
NUM_RT . . . . . . . . . . . . .  C ADDR  1E70H  
ONE. . . . . . . . . . . . . . .  C ADDR  0E8EH  
ON_ERR . . . . . . . . . . . . .  B ADDR  0013H  
OOPS . . . . . . . . . . . . . .  C ADDR  0D3AH  
BASIC52S                                                                                                      PAGE 166

OPBOL. . . . . . . . . . . . . .  C ADDR  00CFH  
OPTAB. . . . . . . . . . . . . .  C ADDR  0057H  
OTI. . . . . . . . . . . . . . .  B ADDR  0014H  
OTS. . . . . . . . . . . . . . .  B ADDR  0010H  
OTST . . . . . . . . . . . . . .  C ADDR  1938H  
OTST1. . . . . . . . . . . . . .  C ADDR  193EH  
OUTPUT . . . . . . . . . . . . .  C ADDR  196CH  
OUTR . . . . . . . . . . . . . .  C ADDR  1E5CH  
OUTR0. . . . . . . . . . . . . .  C ADDR  1E4BH  
OV . . . . . . . . . . . . . . .  B ADDR  00D2H  PREDEFINED  
OVE1 . . . . . . . . . . . . . .  C ADDR  1B98H  
OVERFLOW . . . . . . . . . . . .    NUMB  0001H  
OVERFLOW_AND_EXIT. . . . . . . .  C ADDR  1B94H  
P1 . . . . . . . . . . . . . . .  D ADDR  0090H  PREDEFINED  
P2 . . . . . . . . . . . . . . .  D ADDR  00A0H  PREDEFINED  
P3 . . . . . . . . . . . . . . .  D ADDR  00B0H  PREDEFINED  
PACK . . . . . . . . . . . . . .  C ADDR  1B11H  
PACK0. . . . . . . . . . . . . .  C ADDR  1B1AH  
PACK1. . . . . . . . . . . . . .  C ADDR  1B1BH  NOT USED  
PACK11 . . . . . . . . . . . . .  C ADDR  1B23H  
PACK2. . . . . . . . . . . . . .  C ADDR  1B25H  
PACK3. . . . . . . . . . . . . .  C ADDR  1B37H  
PACK31 . . . . . . . . . . . . .  C ADDR  1B38H  
PACK4. . . . . . . . . . . . . .  C ADDR  1B4FH  
PAREN_INT. . . . . . . . . . . .  C ADDR  0E97H  
PCL. . . . . . . . . . . . . . .  C ADDR  1439H  
PCON . . . . . . . . . . . . . .  D ADDR  0087H  PREDEFINED  
PCON0. . . . . . . . . . . . . .    NUMB  0087H  NOT USED  
PG1. . . . . . . . . . . . . . .  C ADDR  04BDH  
PG10 . . . . . . . . . . . . . .  C ADDR  04BCH  
PG101. . . . . . . . . . . . . .  C ADDR  04B5H  
PG2. . . . . . . . . . . . . . .  C ADDR  04C3H  
PG31 . . . . . . . . . . . . . .  C ADDR  04F7H  
PG4. . . . . . . . . . . . . . .  C ADDR  04C0H  
PG5. . . . . . . . . . . . . . .  C ADDR  04CBH  
PG6. . . . . . . . . . . . . . .  C ADDR  04D0H  
PG7. . . . . . . . . . . . . . .  C ADDR  04D9H  
PG8. . . . . . . . . . . . . . .  C ADDR  046FH  
PGR. . . . . . . . . . . . . . .  C ADDR  04B3H  
PGU. . . . . . . . . . . . . . .  C ADDR  04F8H  
PHEAD. . . . . . . . . . . . . .    NUMB  0016H  
PIE. . . . . . . . . . . . . . .  C ADDR  17FEH  
PIPI . . . . . . . . . . . . . .  C ADDR  147FH  
PLNEXP . . . . . . . . . . . . .  C ADDR  1430H  
PLOOP. . . . . . . . . . . . . .  C ADDR  1B51H  
PLUS_MINUS_TEST. . . . . . . . .  C ADDR  1D65H  
PMT1 . . . . . . . . . . . . . .  C ADDR  1D79H  
PMT11. . . . . . . . . . . . . .  C ADDR  1D6AH  
PMT12. . . . . . . . . . . . . .  C ADDR  1D6FH  
PMT13. . . . . . . . . . . . . .  C ADDR  1D74H  
PMT2 . . . . . . . . . . . . . .  C ADDR  1D77H  
PMT3 . . . . . . . . . . . . . .  C ADDR  1D78H  
PMTOP. . . . . . . . . . . . . .  C ADDR  164FH  
PMTOP1 . . . . . . . . . . . . .  C ADDR  1652H  
PN0. . . . . . . . . . . . . . .  C ADDR  06C3H  
PN01 . . . . . . . . . . . . . .  C ADDR  06CCH  
PN02 . . . . . . . . . . . . . .  C ADDR  06CDH  
PN1. . . . . . . . . . . . . . .  C ADDR  06B9H  
BASIC52S                                                                                                      PAGE 167

POLY1. . . . . . . . . . . . . .  C ADDR  11A3H  
POLYC. . . . . . . . . . . . . .  C ADDR  119BH  
POPAS. . . . . . . . . . . . . .  C ADDR  0FD3H  
POP_AND_EXIT . . . . . . . . . .  C ADDR  19A5H  
POP_T1 . . . . . . . . . . . . .  C ADDR  1448H  
POSNM1 . . . . . . . . . . . . .  C ADDR  1D24H  NOT USED  
POSNUM . . . . . . . . . . . . .  C ADDR  1D21H  
POTWO. . . . . . . . . . . . . .  C ADDR  1192H  
PP . . . . . . . . . . . . . . .  C ADDR  15BAH  
PPL. . . . . . . . . . . . . . .  C ADDR  15CDH  
PPL1 . . . . . . . . . . . . . .  C ADDR  15D2H  
PPL2 . . . . . . . . . . . . . .  C ADDR  15D7H  
PPL21. . . . . . . . . . . . . .  C ADDR  15DCH  
PPL22. . . . . . . . . . . . . .  C ADDR  15E1H  
PPL3 . . . . . . . . . . . . . .  C ADDR  15F0H  
PPL4 . . . . . . . . . . . . . .  C ADDR  15F5H  
PPL41. . . . . . . . . . . . . .  C ADDR  15FEH  
PPL6 . . . . . . . . . . . . . .  C ADDR  1622H  
PPL61. . . . . . . . . . . . . .  C ADDR  162BH  
PPL7 . . . . . . . . . . . . . .  C ADDR  162FH  
PPL71. . . . . . . . . . . . . .  C ADDR  1630H  
PPL9 . . . . . . . . . . . . . .  C ADDR  1643H  
PPL91. . . . . . . . . . . . . .  C ADDR  1644H  
PPLX . . . . . . . . . . . . . .  C ADDR  1609H  
PPLY . . . . . . . . . . . . . .  C ADDR  1616H  
PPLY1. . . . . . . . . . . . . .  C ADDR  161BH  
PPX. . . . . . . . . . . . . . .  C ADDR  15E5H  
PRET . . . . . . . . . . . . . .  C ADDR  1B71H  
PRNTCR . . . . . . . . . . . . .  C ADDR  06C1H  
PROGS. . . . . . . . . . . . . .  X ADDR  0128H  
PSTART . . . . . . . . . . . . .    NUMB  0200H  
PSW. . . . . . . . . . . . . . .  D ADDR  00D0H  PREDEFINED  
PTIME. . . . . . . . . . . . . .  C ADDR  0709H  
PUSHAS . . . . . . . . . . . . .  C ADDR  0FDDH  
PUSHC. . . . . . . . . . . . . .  C ADDR  1433H  
PUSHCS . . . . . . . . . . . . .  C ADDR  0BB1H  
PUSHCS1. . . . . . . . . . . . .  C ADDR  0BB6H  
PUSHCS2. . . . . . . . . . . . .  C ADDR  0BBCH  
PUSHR2R0 . . . . . . . . . . . .  C ADDR  1CB6H  
PUSH_ONE . . . . . . . . . . . .  C ADDR  1443H  
PUSH_T1. . . . . . . . . . . . .  C ADDR  144FH  
PUSH_T11 . . . . . . . . . . . .  C ADDR  1451H  
PUSH_T12 . . . . . . . . . . . .  C ADDR  1453H  
P_E. . . . . . . . . . . . . . .  C ADDR  0CDFH  
P_T2 . . . . . . . . . . . . . .  C ADDR  1456H  
P_Z. . . . . . . . . . . . . . .  C ADDR  1375H  
QUIT . . . . . . . . . . . . . .  C ADDR  24C6H  
R0B0 . . . . . . . . . . . . . .    NUMB  0000H  
R1B0 . . . . . . . . . . . . . .    NUMB  0001H  
R2B0 . . . . . . . . . . . . . .    NUMB  0002H  
R3B0 . . . . . . . . . . . . . .    NUMB  0003H  
R3CK . . . . . . . . . . . . . .  C ADDR  09D5H  
R4B0 . . . . . . . . . . . . . .    NUMB  0004H  
R5B0 . . . . . . . . . . . . . .    NUMB  0005H  
R6B0 . . . . . . . . . . . . . .    NUMB  0006H  
R76S . . . . . . . . . . . . . .  C ADDR  0DEFH  
R7B0 . . . . . . . . . . . . . .    NUMB  0007H  
RC1. . . . . . . . . . . . . . .  C ADDR  066FH  
BASIC52S                                                                                                      PAGE 168

RC2. . . . . . . . . . . . . . .  C ADDR  0673H  
RCAPH2 . . . . . . . . . . . . .    NUMB  00CBH  
RCAPL2 . . . . . . . . . . . . .    NUMB  00CAH  
RCASB. . . . . . . . . . . . . .  C ADDR  1ECFH  
RCELL. . . . . . . . . . . . . .  X ADDR  010CH  
RCL. . . . . . . . . . . . . . .  C ADDR  0885H  
RCL1 . . . . . . . . . . . . . .  C ADDR  088AH  
RCL2 . . . . . . . . . . . . . .  C ADDR  0892H  
RCL3 . . . . . . . . . . . . . .  C ADDR  0898H  
RCL4 . . . . . . . . . . . . . .  C ADDR  089EH  
RCL5 . . . . . . . . . . . . . .  C ADDR  08A4H  
RCL6 . . . . . . . . . . . . . .  C ADDR  08AAH  
RCLEAR . . . . . . . . . . . . .  C ADDR  0664H  
RDSFR. . . . . . . . . . . . . .  C ADDR  2519H  
RDYS . . . . . . . . . . . . . .  C ADDR  00FDH  
READ . . . . . . . . . . . . . .  C ADDR  2494H  
RECIP. . . . . . . . . . . . . .  C ADDR  127CH  
RETBIT . . . . . . . . . . . . .  B ADDR  0025H  
RET_X. . . . . . . . . . . . . .  C ADDR  1D46H  
RF1. . . . . . . . . . . . . . .  C ADDR  055EH  
RF2. . . . . . . . . . . . . . .  C ADDR  0565H  
RF3. . . . . . . . . . . . . . .  C ADDR  056BH  
RFX. . . . . . . . . . . . . . .  C ADDR  0564H  
RI . . . . . . . . . . . . . . .  B ADDR  0098H  PREDEFINED  
RIGHT. . . . . . . . . . . . . .  C ADDR  1BBBH  
RIGHT1 . . . . . . . . . . . . .  C ADDR  1BBDH  NOT USED  
RIGHT2 . . . . . . . . . . . . .  C ADDR  1BBEH  
RIGHT3 . . . . . . . . . . . . .  C ADDR  1BC5H  NOT USED  
RIGHT5 . . . . . . . . . . . . .  C ADDR  1BE4H  
RIGHTL . . . . . . . . . . . . .  C ADDR  1BD1H  
RIGHTL1. . . . . . . . . . . . .  C ADDR  1BE3H  
RL1. . . . . . . . . . . . . . .  C ADDR  0AF4H  
RLINE. . . . . . . . . . . . . .  C ADDR  0AF2H  
RMOV . . . . . . . . . . . . . .  C ADDR  1581H  
RO1. . . . . . . . . . . . . . .  C ADDR  0543H  
RO11 . . . . . . . . . . . . . .  C ADDR  054EH  
ROMADR . . . . . . . . . . . . .    NUMB  8000H  
ROMFD. . . . . . . . . . . . . .  C ADDR  055BH  
ROM_P. . . . . . . . . . . . . .  C ADDR  06AFH  
ROM_P1 . . . . . . . . . . . . .  C ADDR  06B7H  
ROUT . . . . . . . . . . . . . .  C ADDR  1E92H  
RROM . . . . . . . . . . . . . .  C ADDR  07C0H  
RS0. . . . . . . . . . . . . . .  B ADDR  00D3H  PREDEFINED  
RSUB1. . . . . . . . . . . . . .  C ADDR  1EF9H  
RSUB2. . . . . . . . . . . . . .  C ADDR  1F23H  
RSUB3. . . . . . . . . . . . . .  C ADDR  1F2DH  
RTST . . . . . . . . . . . . . .  C ADDR  0AC7H  
RTST1. . . . . . . . . . . . . .  C ADDR  0AD0H  
RTXAH. . . . . . . . . . . . . .    NUMB  0012H  
RTXAL. . . . . . . . . . . . . .    NUMB  0010H  
RV . . . . . . . . . . . . . . .  C ADDR  11B5H  
S0RELH . . . . . . . . . . . . .    NUMB  00BAH  NOT USED  
S0RELL . . . . . . . . . . . . .    NUMB  00AAH  NOT USED  
S13. . . . . . . . . . . . . . .  C ADDR  0D3DH  
S20DP. . . . . . . . . . . . . .  C ADDR  1424H  
S31DP. . . . . . . . . . . . . .  C ADDR  0605H  
S31DP2 . . . . . . . . . . . . .  C ADDR  0603H  
S31L . . . . . . . . . . . . . .  C ADDR  170EH  
BASIC52S                                                                                                      PAGE 169

SA . . . . . . . . . . . . . . .  C ADDR  0D1BH  
SA1. . . . . . . . . . . . . . .  C ADDR  0D22H  
SA2. . . . . . . . . . . . . . .  C ADDR  0D26H  
SAFE_MOD . . . . . . . . . . . .    NUMB  00A1H  
SAVE_T . . . . . . . . . . . . .    NUMB  004AH  
SBAUD. . . . . . . . . . . . . .  C ADDR  16F9H  
SBUF . . . . . . . . . . . . . .  D ADDR  0099H  PREDEFINED  
SCALL. . . . . . . . . . . . . .  C ADDR  0E63H  
SCL. . . . . . . . . . . . . . .  B ADDR  0095H  
SCLHIGH. . . . . . . . . . . . .  C ADDR  24BAH  
SCLOCK . . . . . . . . . . . . .  C ADDR  1918H  
SCLR . . . . . . . . . . . . . .  C ADDR  068FH  
SCON . . . . . . . . . . . . . .  D ADDR  0098H  PREDEFINED  
SC_R . . . . . . . . . . . . . .  C ADDR  192DH  
SD0. . . . . . . . . . . . . . .  C ADDR  0D5CH  
SD01 . . . . . . . . . . . . . .  C ADDR  0D59H  
SDA. . . . . . . . . . . . . . .  B ADDR  0096H  
SDI. . . . . . . . . . . . . . .  C ADDR  0DBCH  
SDIMX. . . . . . . . . . . . . .  C ADDR  0D61H  
SE0. . . . . . . . . . . . . . .  C ADDR  0CBEH  
SE1. . . . . . . . . . . . . . .  C ADDR  199FH  
SEND . . . . . . . . . . . . . .  C ADDR  2472H  
SERR1. . . . . . . . . . . . . .  C ADDR  18B3H  
SETFSYS. . . . . . . . . . . . .  C ADDR  0437H  
SETREG . . . . . . . . . . . . .  C ADDR  1253H  
SETREG1. . . . . . . . . . . . .  C ADDR  1254H  
SETSCL . . . . . . . . . . . . .  C ADDR  24BCH  
SETSDA . . . . . . . . . . . . .  C ADDR  2445H  
SF2. . . . . . . . . . . . . . .  C ADDR  0A53H  
SF21 . . . . . . . . . . . . . .  C ADDR  0A56H  
SF3. . . . . . . . . . . . . . .  C ADDR  0A72H  
SFOR . . . . . . . . . . . . . .  C ADDR  0A3CH  
SFRERRMSG. . . . . . . . . . . .  C ADDR  24F6H  
SFRERROR . . . . . . . . . . . .  C ADDR  250EH  
SFRGETTAB. . . . . . . . . . . .  C ADDR  2588H  
SFRPUTTAB. . . . . . . . . . . .  C ADDR  2586H  
SGOSUB . . . . . . . . . . . . .  C ADDR  0B2DH  
SGOTO. . . . . . . . . . . . . .  C ADDR  0AAAH  
SGS0 . . . . . . . . . . . . . .  C ADDR  0B2FH  
SGS1 . . . . . . . . . . . . . .  C ADDR  0B35H  
SGT1 . . . . . . . . . . . . . .  C ADDR  0AACH  
SGT11. . . . . . . . . . . . . .  C ADDR  0AB7H  
SGT2 . . . . . . . . . . . . . .  C ADDR  0AB9H  
SGT21. . . . . . . . . . . . . .  C ADDR  0AC1H  
SIF. . . . . . . . . . . . . . .  C ADDR  0A86H  
SIF1 . . . . . . . . . . . . . .  C ADDR  0A90H  
SIGNS_DIFFERENT. . . . . . . . .  C ADDR  1A53H  
SIN0 . . . . . . . . . . . . . .  C ADDR  11FCH  
SINOUT . . . . . . . . . . . . .  C ADDR  1E8BH  
SINPUT . . . . . . . . . . . . .  C ADDR  0DF5H  
SINTAB . . . . . . . . . . . . .  C ADDR  16CEH  
SLET . . . . . . . . . . . . . .  C ADDR  096EH  
SLET0. . . . . . . . . . . . . .  C ADDR  09C2H  
SLET1. . . . . . . . . . . . . .  C ADDR  09C6H  
SLET2. . . . . . . . . . . . . .  C ADDR  09C8H  
SM . . . . . . . . . . . . . . .  C ADDR  0C5FH  
SM01 . . . . . . . . . . . . . .  C ADDR  0C6DH  
SM02 . . . . . . . . . . . . . .  C ADDR  0C71H  
BASIC52S                                                                                                      PAGE 170

SNEXT. . . . . . . . . . . . . .  C ADDR  0B5FH  
SONERR . . . . . . . . . . . . .  C ADDR  140FH  
SONEXT . . . . . . . . . . . . .  C ADDR  1419H  
SOT. . . . . . . . . . . . . . .  C ADDR  0E56H  
SOUT . . . . . . . . . . . . . .  C ADDR  1E9AH  
SOUT1. . . . . . . . . . . . . .  C ADDR  1E9CH  
SOUT_1 . . . . . . . . . . . . .  C ADDR  1F46H  
SP . . . . . . . . . . . . . . .  D ADDR  0081H  PREDEFINED  
SP0. . . . . . . . . . . . . . .  C ADDR  0C3CH  
SP1. . . . . . . . . . . . . . .  C ADDR  0C43H  
SP2. . . . . . . . . . . . . . .  C ADDR  0C3FH  
SP4. . . . . . . . . . . . . . .  C ADDR  0C47H  NOT USED  
SP6. . . . . . . . . . . . . . .  C ADDR  0C52H  
SP7. . . . . . . . . . . . . . .  C ADDR  0C57H  
SP8. . . . . . . . . . . . . . .  C ADDR  0C75H  
SP9. . . . . . . . . . . . . . .  C ADDR  0CD7H  
SP9A . . . . . . . . . . . . . .  C ADDR  0CDEH  
SPACE7 . . . . . . . . . . . . .  C ADDR  1E78H  
SPEOP. . . . . . . . . . . . . .  C ADDR  09D9H  
SPEOP1 . . . . . . . . . . . . .  C ADDR  09DDH  
SPH0 . . . . . . . . . . . . . .  C ADDR  0C29H  
SPH1 . . . . . . . . . . . . . .  C ADDR  0C2BH  
SPINT. . . . . . . . . . . . . .  B ADDR  001FH  
SPOP . . . . . . . . . . . . . .  C ADDR  0A7DH  
SPOP1. . . . . . . . . . . . . .  C ADDR  0A85H  
SPRINT . . . . . . . . . . . . .  C ADDR  0C2DH  
SPRINT1. . . . . . . . . . . . .  C ADDR  0C31H  
SPRINT2. . . . . . . . . . . . .  C ADDR  0C38H  
SPSAV. . . . . . . . . . . . . .    NUMB  003EH  
SPUSH. . . . . . . . . . . . . .  C ADDR  0A76H  
SPV. . . . . . . . . . . . . . .  X ADDR  0124H  
SP_H . . . . . . . . . . . . . .    NUMB  004BH  
SP_L . . . . . . . . . . . . . .    NUMB  004CH  
SQ . . . . . . . . . . . . . . .  C ADDR  0C7CH  
SQR1 . . . . . . . . . . . . . .  C ADDR  12A3H  
SQR2 . . . . . . . . . . . . . .  C ADDR  12AAH  
SQR4 . . . . . . . . . . . . . .  C ADDR  12ADH  
SQR41. . . . . . . . . . . . . .  C ADDR  12BEH  
SQ_ERR . . . . . . . . . . . . .  C ADDR  128AH  
SR0. . . . . . . . . . . . . . .  C ADDR  0B14H  
SR01 . . . . . . . . . . . . . .  C ADDR  0B24H  
SRD. . . . . . . . . . . . . . .  C ADDR  0BE9H  
SRD0 . . . . . . . . . . . . . .  C ADDR  0BE5H  
SRD1 . . . . . . . . . . . . . .  C ADDR  0BF2H  
SRD2 . . . . . . . . . . . . . .  C ADDR  0BF4H  
SRD21. . . . . . . . . . . . . .  C ADDR  0BFEH  
SRD4 . . . . . . . . . . . . . .  C ADDR  0BFFH  
SRD5 . . . . . . . . . . . . . .  C ADDR  0C06H  
SRD51. . . . . . . . . . . . . .  C ADDR  0C09H  
SRD6 . . . . . . . . . . . . . .  C ADDR  0C11H  
SREAD. . . . . . . . . . . . . .  C ADDR  0BE3H  
SRESTR . . . . . . . . . . . . .  C ADDR  0BCEH  
SRESTR1. . . . . . . . . . . . .  C ADDR  0BD0H  
SRETI. . . . . . . . . . . . . .  C ADDR  0B0EH  
SRETRN . . . . . . . . . . . . .  C ADDR  0B10H  
SRT. . . . . . . . . . . . . . .  C ADDR  1219H  
SS . . . . . . . . . . . . . . .  C ADDR  0D12H  
SS7. . . . . . . . . . . . . . .  C ADDR  1E89H  
BASIC52S                                                                                                      PAGE 171

SSOOP. . . . . . . . . . . . . .  C ADDR  099DH  
SSTOP. . . . . . . . . . . . . .  C ADDR  0858H  
SSTOP0 . . . . . . . . . . . . .  C ADDR  0860H  
STACKTP. . . . . . . . . . . . .    NUMB  00FEH  
STATD. . . . . . . . . . . . . .  C ADDR  0123H  
STATUS . . . . . . . . . . . . .    NUMB  0018H  
STDIG. . . . . . . . . . . . . .  C ADDR  1D38H  
STDIG1 . . . . . . . . . . . . .  C ADDR  1D47H  
STEROT . . . . . . . . . . . . .  C ADDR  070FH  
STESIZ . . . . . . . . . . . . .    NUMB  0009H  
STJ. . . . . . . . . . . . . . .  C ADDR  0020H  
STK. . . . . . . . . . . . . . .  C ADDR  0041H  
STONE. . . . . . . . . . . . . .  C ADDR  1686H  
STONE1 . . . . . . . . . . . . .  C ADDR  168BH  
STOPBIT. . . . . . . . . . . . .  B ADDR  0020H  
STORE2 . . . . . . . . . . . . .  C ADDR  1B69H  
STORE_ALIGN_TEST_AND_EXIT. . . .  C ADDR  1B63H  
STP. . . . . . . . . . . . . . .  C ADDR  00EEH  
STQ. . . . . . . . . . . . . . .  C ADDR  0033H  
STRING . . . . . . . . . . . . .  C ADDR  060CH  
STRIP. . . . . . . . . . . . . .  C ADDR  11DAH  
STR_AL . . . . . . . . . . . . .  X ADDR  0122H  
STS. . . . . . . . . . . . . . .  C ADDR  003EH  
STU. . . . . . . . . . . . . . .  C ADDR  0044H  
ST_A . . . . . . . . . . . . . .  C ADDR  0FE5H  
ST_ALL . . . . . . . . . . . . .  X ADDR  0106H  
SUBLP. . . . . . . . . . . . . .  C ADDR  19FBH  
SUI. . . . . . . . . . . . . . .  C ADDR  192EH  
SUNTIL . . . . . . . . . . . . .  C ADDR  0B01H  
SUO. . . . . . . . . . . . . . .  C ADDR  1933H  
SWAP_AND_EXIT. . . . . . . . . .  C ADDR  199BH  NOT USED  
SWAP_ASTKA . . . . . . . . . . .  C ADDR  145AH  
SWHILE . . . . . . . . . . . . .  C ADDR  0AFCH  
SX . . . . . . . . . . . . . . .  C ADDR  0C81H  
SX1. . . . . . . . . . . . . . .  C ADDR  0C97H  
S_0. . . . . . . . . . . . . . .  C ADDR  0982H  
S_1. . . . . . . . . . . . . . .  C ADDR  09B2H  
S_11 . . . . . . . . . . . . . .  C ADDR  09BAH  
S_3. . . . . . . . . . . . . . .  C ADDR  0991H  
S_4. . . . . . . . . . . . . . .  C ADDR  099FH  
S_41 . . . . . . . . . . . . . .  C ADDR  09A6H  
S_5. . . . . . . . . . . . . . .  C ADDR  09ADH  
S_C. . . . . . . . . . . . . . .  C ADDR  0EBFH  
S_C_1. . . . . . . . . . . . . .  C ADDR  0E72H  
S_DO . . . . . . . . . . . . . .  C ADDR  0F05H  
S_E. . . . . . . . . . . . . . .  C ADDR  098CH  
S_L. . . . . . . . . . . . . . .  C ADDR  1461H  
S_LEN. . . . . . . . . . . . . .    NUMB  003FH  
S_N. . . . . . . . . . . . . . .  C ADDR  1FD3H  
S_ON . . . . . . . . . . . . . .  C ADDR  0CEBH  
S_WU . . . . . . . . . . . . . .  C ADDR  0B03H  
T2CON. . . . . . . . . . . . . .    NUMB  00C8H  
T2MOD. . . . . . . . . . . . . .    NUMB  00C9H  
TB . . . . . . . . . . . . . . .  C ADDR  15B5H  
TBR. . . . . . . . . . . . . . .  C ADDR  1599H  
TBYTE. . . . . . . . . . . . . .  C ADDR  1596H  
TCON . . . . . . . . . . . . . .  D ADDR  0088H  PREDEFINED  
TEMP1. . . . . . . . . . . . . .    NUMB  000BH  
BASIC52S                                                                                                      PAGE 172

TEMP2. . . . . . . . . . . . . .    NUMB  000CH  
TEMP3. . . . . . . . . . . . . .    NUMB  000DH  
TEMP4. . . . . . . . . . . . . .    NUMB  000EH  
TEMP5. . . . . . . . . . . . . .    NUMB  000FH  
TEMPD. . . . . . . . . . . . . .  C ADDR  1854H  
TEMP_COMP. . . . . . . . . . . .  C ADDR  131CH  
TEROT. . . . . . . . . . . . . .  C ADDR  0711H  
TEROT01. . . . . . . . . . . . .  C ADDR  0717H  
TEROT02. . . . . . . . . . . . .  C ADDR  071EH  
TEROT03. . . . . . . . . . . . .  C ADDR  0727H  
TEROT04. . . . . . . . . . . . .  C ADDR  072FH  
TEROT1 . . . . . . . . . . . . .  C ADDR  0766H  
TEROT11. . . . . . . . . . . . .  C ADDR  076CH  
TEROT2 . . . . . . . . . . . . .  C ADDR  0773H  
TEST_USER. . . . . . . . . . . .  C ADDR  17E0H  
TF1. . . . . . . . . . . . . . .  B ADDR  008FH  PREDEFINED  
TH0. . . . . . . . . . . . . . .  D ADDR  008CH  PREDEFINED  
TH1. . . . . . . . . . . . . . .  D ADDR  008DH  PREDEFINED  
TH2. . . . . . . . . . . . . . .    NUMB  00CDH  
THREE. . . . . . . . . . . . . .  C ADDR  0E78H  
TI . . . . . . . . . . . . . . .  B ADDR  0099H  PREDEFINED  
TIMER_LOAD . . . . . . . . . . .  C ADDR  052DH  
TIMER_LOAD1. . . . . . . . . . .  C ADDR  052FH  
TIV. . . . . . . . . . . . . . .  X ADDR  0126H  
TL0. . . . . . . . . . . . . . .  D ADDR  008AH  PREDEFINED  
TL1. . . . . . . . . . . . . . .  D ADDR  008BH  PREDEFINED  
TL2. . . . . . . . . . . . . . .    NUMB  00CCH  
TMOD . . . . . . . . . . . . . .  D ADDR  0089H  PREDEFINED  
TMR0 . . . . . . . . . . . . . .    NUMB  00C8H  
TMR1 . . . . . . . . . . . . . .    NUMB  00C9H  
TMR2 . . . . . . . . . . . . . .    NUMB  00CAH  
TM_TOP . . . . . . . . . . . . .  X ADDR  012CH  
TOKENTABLE . . . . . . . . . . .  C ADDR  240CH  
TOKTAB . . . . . . . . . . . . .  C ADDR  0175H  
TOUT . . . . . . . . . . . . . .    NUMB  0002H  
TR . . . . . . . . . . . . . . .  C ADDR  1913H  
TR0. . . . . . . . . . . . . . .  B ADDR  008CH  PREDEFINED  
TR1. . . . . . . . . . . . . . .  B ADDR  008EH  PREDEFINED  
TRC2 . . . . . . . . . . . . . .    NUMB  00CEH  
TT2C . . . . . . . . . . . . . .    NUMB  00CBH  
TTC. . . . . . . . . . . . . . .    NUMB  00CCH  
TTIME. . . . . . . . . . . . . .  C ADDR  1167H  
TTM. . . . . . . . . . . . . . .    NUMB  00CDH  
TVH. . . . . . . . . . . . . . .    NUMB  0048H  
TVL. . . . . . . . . . . . . . .    NUMB  0049H  
TWO. . . . . . . . . . . . . . .  C ADDR  0E85H  
TWOL . . . . . . . . . . . . . .  C ADDR  14A1H  
TWO_EX . . . . . . . . . . . . .  C ADDR  14B3H  
TWO_EY . . . . . . . . . . . . .  C ADDR  14B4H  
TWO_R2 . . . . . . . . . . . . .  C ADDR  14B1H  
TXAH . . . . . . . . . . . . . .    NUMB  000AH  
TXAL . . . . . . . . . . . . . .    NUMB  0008H  
TXX. . . . . . . . . . . . . . .  C ADDR  075FH  
T_1. . . . . . . . . . . . . . .  C ADDR  073AH  
T_ADD. . . . . . . . . . . . . .    NUMB  00E3H  
T_ASC. . . . . . . . . . . . . .    NUMB  00D1H  
T_BIT. . . . . . . . . . . . . .  B ADDR  0092H  
T_BUF. . . . . . . . . . . . . .  C ADDR  176CH  
BASIC52S                                                                                                      PAGE 173

T_CHR. . . . . . . . . . . . . .    NUMB  00D3H  
T_CMND . . . . . . . . . . . . .    NUMB  00F0H  
T_CMP. . . . . . . . . . . . . .  C ADDR  07E3H  
T_CR . . . . . . . . . . . . . .    NUMB  00AAH  
T_DATA . . . . . . . . . . . . .    NUMB  009CH  
T_DIR. . . . . . . . . . . . . .    NUMB  0090H  
T_DP . . . . . . . . . . . . . .  C ADDR  0EB8H  
T_ELSE . . . . . . . . . . . . .    NUMB  00A8H  
T_EQU. . . . . . . . . . . . . .    NUMB  00EAH  
T_F1 . . . . . . . . . . . . . .  C ADDR  0A9EH  
T_GOSB . . . . . . . . . . . . .    NUMB  009FH  
T_GOTO . . . . . . . . . . . . .    NUMB  0083H  
T_HH . . . . . . . . . . . . . .    NUMB  0040H  
T_IE . . . . . . . . . . . . . .    NUMB  00C6H  
T_IP . . . . . . . . . . . . . .    NUMB  00C7H  
T_L. . . . . . . . . . . . . . .  C ADDR  196CH  
T_LAST . . . . . . . . . . . . .    NUMB  00A4H  
T_LL . . . . . . . . . . . . . .    NUMB  0041H  
T_LPAR . . . . . . . . . . . . .    NUMB  00E0H  
T_MTOP . . . . . . . . . . . . .    NUMB  00C4H  
T_NEG. . . . . . . . . . . . . .    NUMB  00E9H  
T_P1 . . . . . . . . . . . . . .    NUMB  00CFH  
T_PC . . . . . . . . . . . . . .    NUMB  00D0H  
T_REM. . . . . . . . . . . . . .    NUMB  0096H  
T_SPC. . . . . . . . . . . . . .    NUMB  00A9H  
T_STEP . . . . . . . . . . . . .    NUMB  00A7H  
T_STOP . . . . . . . . . . . . .    NUMB  0090H  
T_SUB. . . . . . . . . . . . . .    NUMB  00E5H  
T_T. . . . . . . . . . . . . . .  C ADDR  08B0H  
T_T01. . . . . . . . . . . . . .  C ADDR  08BEH  
T_T1 . . . . . . . . . . . . . .  C ADDR  08CEH  
T_T2 . . . . . . . . . . . . . .  C ADDR  08DFH  
T_TAB. . . . . . . . . . . . . .    NUMB  00A4H  
T_THEN . . . . . . . . . . . . .    NUMB  00A5H  
T_TIME . . . . . . . . . . . . .    NUMB  00C5H  
T_TO . . . . . . . . . . . . . .    NUMB  00A6H  
T_TRAP . . . . . . . . . . . . .  C ADDR  08E5H  
T_ULAST. . . . . . . . . . . . .    NUMB  00BEH  
T_UOP. . . . . . . . . . . . . .    NUMB  00B0H  
T_USE. . . . . . . . . . . . . .    NUMB  00D2H  
T_XTAL . . . . . . . . . . . . .    NUMB  00C3H  
T_X_S. . . . . . . . . . . . . .  C ADDR  0B39H  
U3 . . . . . . . . . . . . . . .  C ADDR  0C9BH  
U4 . . . . . . . . . . . . . . .  C ADDR  0C9FH  
U5 . . . . . . . . . . . . . . .  C ADDR  0CA9H  
U5A. . . . . . . . . . . . . . .  C ADDR  0CC0H  
U6 . . . . . . . . . . . . . . .  C ADDR  0CCDH  
U7 . . . . . . . . . . . . . . .  C ADDR  0CCFH  
U8 . . . . . . . . . . . . . . .  C ADDR  0CC9H  
U8A. . . . . . . . . . . . . . .  C ADDR  0CC4H  
U8B. . . . . . . . . . . . . . .  C ADDR  0CC6H  NOT USED  
UBIT . . . . . . . . . . . . . .  B ADDR  002AH  
UE . . . . . . . . . . . . . . .  C ADDR  1513H  
ULOOP. . . . . . . . . . . . . .  C ADDR  1B82H  
UNDERFLOW. . . . . . . . . . . .    NUMB  0000H  
UNDERFLOW_AND_EXIT . . . . . . .  C ADDR  1BA5H  
UNDER_MD . . . . . . . . . . . .  C ADDR  1B4DH  
UNPACK_R0. . . . . . . . . . . .  C ADDR  1B7EH  
BASIC52S                                                                                                      PAGE 174

UOPBOL . . . . . . . . . . . . .  C ADDR  00E0H  
UPB. . . . . . . . . . . . . . .  B ADDR  0027H  
UPP0 . . . . . . . . . . . . . .  C ADDR  10AEH  
UPP01. . . . . . . . . . . . . .  C ADDR  10B1H  
UPP02. . . . . . . . . . . . . .  C ADDR  10BCH  
UPP03. . . . . . . . . . . . . .  C ADDR  10C1H  
UPP04. . . . . . . . . . . . . .  C ADDR  10C6H  
UPP1 . . . . . . . . . . . . . .  C ADDR  10DDH  
UPP11. . . . . . . . . . . . . .  C ADDR  10E3H  
UPP1A. . . . . . . . . . . . . .  C ADDR  10D9H  
UPP2 . . . . . . . . . . . . . .  C ADDR  10ECH  
UPP3 . . . . . . . . . . . . . .  C ADDR  1101H  
UPP4 . . . . . . . . . . . . . .  C ADDR  110DH  
UPP41. . . . . . . . . . . . . .  C ADDR  1115H  
UPP42. . . . . . . . . . . . . .  C ADDR  1119H  
UPP7 . . . . . . . . . . . . . .  C ADDR  1121H  
UPP7A. . . . . . . . . . . . . .  C ADDR  111FH  
UPP8 . . . . . . . . . . . . . .  C ADDR  1123H  
UPP81. . . . . . . . . . . . . .  C ADDR  1125H  
UPP9 . . . . . . . . . . . . . .  C ADDR  10CDH  
UPP91. . . . . . . . . . . . . .  C ADDR  10D5H  
UPPL . . . . . . . . . . . . . .  C ADDR  10A3H  
UPPL0. . . . . . . . . . . . . .  C ADDR  10A0H  
UPRNT. . . . . . . . . . . . . .  C ADDR  06BFH  
UP_2 . . . . . . . . . . . . . .  C ADDR  10F7H  
UP_3 . . . . . . . . . . . . . .  C ADDR  10FAH  NOT USED  
UP_4 . . . . . . . . . . . . . .  C ADDR  10FDH  
USENT. . . . . . . . . . . . . .  C ADDR  0047H  
USING0 . . . . . . . . . . . . .  C ADDR  1DB0H  
USING1 . . . . . . . . . . . . .  C ADDR  1DB6H  
USING2 . . . . . . . . . . . . .  C ADDR  1DC8H  NOT USED  
USINGX . . . . . . . . . . . . .  C ADDR  1DC6H  
USINGY . . . . . . . . . . . . .  C ADDR  1DC3H  
U_ID1. . . . . . . . . . . . . .  C ADDR  1860H  
U_IDL. . . . . . . . . . . . . .  B ADDR  0021H  
U_RET. . . . . . . . . . . . . .  C ADDR  1E4AH  
V4 . . . . . . . . . . . . . . .  C ADDR  0DB4H  
VAR. . . . . . . . . . . . . . .  C ADDR  0D65H  
VAR1 . . . . . . . . . . . . . .  C ADDR  0D67H  
VAR11. . . . . . . . . . . . . .  C ADDR  0D71H  
VAR2 . . . . . . . . . . . . . .  C ADDR  0D9AH  
VARB . . . . . . . . . . . . . .  C ADDR  0A0DH  
VARCOP . . . . . . . . . . . . .  C ADDR  1472H  
VARD . . . . . . . . . . . . . .  C ADDR  0A10H  
VARTOP . . . . . . . . . . . . .  X ADDR  0104H  
VAR_ER . . . . . . . . . . . . .  C ADDR  0F01H  
VECTORTABLE. . . . . . . . . . .  C ADDR  2400H  
VX . . . . . . . . . . . . . . .  C ADDR  0D80H  
VY . . . . . . . . . . . . . . .  C ADDR  0D74H  
V_C. . . . . . . . . . . . . . .  C ADDR  1474H  
WCR. . . . . . . . . . . . . . .  C ADDR  0EFCH  
WE . . . . . . . . . . . . . . .  C ADDR  0F41H  
WRSFR. . . . . . . . . . . . . .  C ADDR  2541H  
X3120. . . . . . . . . . . . . .  C ADDR  0DADH  
X31DP. . . . . . . . . . . . . .  C ADDR  0579H  
XBILT. . . . . . . . . . . . . .  C ADDR  0FB8H  
XBILT1 . . . . . . . . . . . . .  C ADDR  0FC2H  
XBIT . . . . . . . . . . . . . .  B ADDR  002DH  
BASIC52S                                                                                                      PAGE 175

XLPAR. . . . . . . . . . . . . .  C ADDR  0FC4H  
XOP. . . . . . . . . . . . . . .  C ADDR  0F86H  
XOP1 . . . . . . . . . . . . . .  C ADDR  0F90H  
XOP11. . . . . . . . . . . . . .  C ADDR  0FA3H  
XOP12. . . . . . . . . . . . . .  C ADDR  0FADH  
XOP2 . . . . . . . . . . . . . .  C ADDR  0FAFH  
XOP3 . . . . . . . . . . . . . .  C ADDR  0FCAH  
XOUT0. . . . . . . . . . . . . .  C ADDR  1E23H  
XOUT2. . . . . . . . . . . . . .  C ADDR  1E28H  
XOUT3. . . . . . . . . . . . . .  C ADDR  1E30H  
XOUT4. . . . . . . . . . . . . .  C ADDR  1E34H  
XPOP . . . . . . . . . . . . . .  C ADDR  0FD1H  
XSIGN. . . . . . . . . . . . . .  B ADDR  0050H  
XTALV. . . . . . . . . . . . . .  C ADDR  17ECH  
XXI. . . . . . . . . . . . . . .  C ADDR  0B67H  
XXI1 . . . . . . . . . . . . . .  C ADDR  0B76H  
XXI2 . . . . . . . . . . . . . .  C ADDR  0BABH  
XXI3 . . . . . . . . . . . . . .  C ADDR  0BAFH  
X_TR . . . . . . . . . . . . . .  C ADDR  0BD6H  
Z7R7 . . . . . . . . . . . . . .  C ADDR  1E80H  
ZERO . . . . . . . . . . . . . .    NUMB  0002H  
ZERO7. . . . . . . . . . . . . .  C ADDR  1E81H  
ZERO_AND_EXIT. . . . . . . . . .  C ADDR  1BABH  
ZERO_DIVIDE. . . . . . . . . . .    NUMB  0003H  
ZOUT . . . . . . . . . . . . . .  C ADDR  1E96H  
ZRO. . . . . . . . . . . . . . .  C ADDR  04E0H  
ZSURP. . . . . . . . . . . . . .  B ADDR  0036H  
ZT0. . . . . . . . . . . . . . .  C ADDR  1E5FH  
ZT1. . . . . . . . . . . . . . .  C ADDR  1E66H  
ZTEST. . . . . . . . . . . . . .  C ADDR  1E5DH  
