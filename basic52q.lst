BASIC52Q                                                                                                      PAGE 1

                       1    $mod51
                       2    ;                                                             Ver.0.2 2023.05.06
                       3    ; WCH CH552T/G 対応バージョン
                       4    ;   Internal Clock 24MHz, CPU Clock(Fsys) 24MHz(Default->Extend)
                       5    ;   Timer2 を UART0 のシリアルポート用クロック生成に使用。
                       6    ;   シリアルポートの自動速度認識機能が正常に動かないので19.2Kbps固定設定で使う。
                       7    ;
                       8    ;*****************************************************************************
                       9    ;*                                                                           *
                      10    ;*                    MCS-BASIC-52 V1.31 Source Listing                      *
                      11    ;*                           12/1986 till 11/2001                            *
                      12    ;*       The original source code of V1.1 (BASIC.SRC and FP52.SRC) by        *
                      13    ;*            Intel Corporation, Embedded Controller Operations              *
                      14    ;*                             is public donain                              *
                      15    ;*                                                                           *
                      16    ;*****************************************************************************
                      17    ;
                      18    ;*****************************************************************************
                      19    ;* General alterations made by D. Wulf, 12/1999.                             *
                      20    ;* e-mail: Detlef.Wulf@onlinehome.de                                         *
                      21    ;*****************************************************************************
                      22    ;
                      23    ;  The following general alterations are made to the original source code:
                      24    ;
                      25    ;  - The original source code had 2 files BASIC.SRC and FP52.SRC those have
                      26    ;    been incorporated into this file for easy of assembly.
                      27    ;
                      28    ;  - All absolute and relativ jumps and calls without labels were provided
                      29    ;    with labels.
                      30    ;
                      31    ;  - All machine code in the original source, coded in databytes are replaced
                      32    ;    by the menomics.
                      33    ;
                      34    ;  - One routine in the source was different to the ROM code and is replaced
                      35    ;    by the ROM code.
                      36    ;
                      37    ;  - Some "ORG" statements between BASIC and floating point code are remarked
                      38    ;    out.
                      39    ;
                      40    ;  - To get room for new code the "ego message" had to be disabled.
                      41    ;    (Remarked with "Sorry")
                      42    ;
                      43    ;  - To get more room for new code the "FPROG" command had to be disabled.
                      44    ;    (Remarked with "get room")
                      45    ;
                      46    ;*****************************************************************************
                      47    ;* Bugfixes for MCS-52-BASIC from D. Karmann, 8/1993.                        *
                      48    ;* e-mail: dankarmann@lucent.com                                             *
                      49    ;*****************************************************************************
                      50    ;
                      51    ;  - Corrected Intel bug to allow BASIC autoboot EPROM at 8000H with user
                      52    ;    command extensions to work.
                      53    ;    (Remarked as Karmann 1)
                      54    ;
                      55    ;  - Corrected Intel bug to that discarded the 'F' in any variable ending in
                      56    ;    F, FP, FPR and FPRO and followed by a space.
                      57    ;    (Remarked as Karmann 2)
                      58    ;
BASIC52Q                                                                                                      PAGE 2

                      59    ;*****************************************************************************
                      60    ;* Bugfix and performance for MCS-52-BASIC from                              *
                      61    ;* D. Mudric and Z. Stojsavljevic descipt in                                 *
                      62    ;* Elektor Electronics magazine german issue 3/1992.                         *
                      63    ;*****************************************************************************
                      64    ;
                      65    ;  - Modifications to the unprocess a BASIC line routine.
                      66    ;    (Remarked as Elektor 1)
                      67    ;
                      68    ;  - Modifications to the floating point subtraction routine.
                      69    ;    (Remarked as Elektor 2)
                      70    ;
                      71    ;  - HEX to BIN performance improvements.
                      72    ;    (Remarked as Elektor 3)
                      73    ;
                      74    ; The same article describes a fix for the multiplication underflow bug, but
                      75    ; the fixes did not work.
                      76    ;
                      77    ; The multiplicaton underflow bug is now (V1.31) really fixed by D. Wulf!
                      78    ;    (Remarked as Wulf 1)
                      79    ;
                      80    ;*****************************************************************************
                      81    ;* Change UV-EPROM to EEPROM programming from R. Skowronek, 4/1996           *
                      82    ;* e-mail: r.skowronek@kfa-juelich.de                                        *
                      83    ;*****************************************************************************
                      84    ;
                      85    ; This altered section of code writes the ram resident Basic program to
                      86    ; EEPROM just like the ROM resident Basic interpreter writes to UV-EPROMs.
                      87    ; The EEPROM is connected just like a RAM, i.e. it uses /wr on pin 27
                      88    ; and gets it's adresses from the real address lines, i.e. the only
                      89    ; difference from the normal setup is the use of the /wr line instead of
                      90    ; P1.4, which supplies the program pulse for UV-EPROMs. Now MCS-BASIC-52
                      91    ; can be located in externally ROM and is non the less able to programm
                      92    ; EEPROMs!
                      93    ; (Remarked as Skowronek)
                      94    ;
                      95    ; The original code from R. Skowronek didn't support the "PGM" statement
                      96    ; this feature is added by D. Wulf.
                      97    ; Memory is now limited to 32K bytes RAM, because memory tests above it
                      98    ; would change the EEPROM.
                      99    ;
                     100    ;*****************************************************************************
                     101    ;* Change timer 0 from 13 bit to 16 bit counter mode to use XTAL up to 78MHz *
                     102    ;* from D. Wulf 1/2000                                                       *
                     103    ;*****************************************************************************
                     104    ;
                     105    ; The max. value for XTAL is now 78627473 Hz, for use BASIC-52 with
                     106    ; Dallas 80C320 high speed / low power microcontroller (33 MHz).
                     107    ; The defaut crystal value is still 11059200 Hz. You can set it with
                     108    ; XTAL or patch the souce code at
                     109    ;
                     110    ;       17F1H = 11
                     111    ;       17F0H = 05
                     112    ;       17EFH = 92
                     113    ;       17EEH = 00
                     114    ;
                     115    ; with a new crystal value.
                     116    ; (Remarket as Wulf 2)
BASIC52Q                                                                                                      PAGE 3

                     117    ;
                     118    ;*****************************************************************************
                     119    ;* New baudrate detection from D. Wulf 1/2000                                *
                     120    ;*****************************************************************************
                     121    ;
                     122    ; The new baudrate detection uses timer 2 for time measurement in state of
                     123    ; the code loop timing. So the Dallas 80C320 and other controllers can be
                     124    ; used. Also at higher clock speeds the baudrate will detect automaticly.
                     125    ; (Remarked as Wulf 3)
                     126    ;
                     127    ;*****************************************************************************
                     128    ;* New processor type detection from D. Wulf 2/2000                          *
                     129    ;*****************************************************************************
                     130    ;
                     131    ; A new reset routine detects the processor type. So BASIC-52 V1.3 can be
                     132    ; used with the following controllers:
                     133    ;
                     134    ; 8032, 87C52#, Dallas 80C320, 80515*#, 80517*#, 80517A#, 80528, 80535*,
                     135    ; 80537*, 80575 or similars.
                     136    ;
                     137    ; - On processor types marked with the "*" only two different autodetect
                     138    ;   baudrates, depending on the crystal are possible.
                     139    ; - The processor types marked with the "#" have internal ROM, so BASIC-52
                     140    ;   V1.3 can be located there, because it is still only 8K bytes long!
                     141    ;
                     142    ; (Remarked as Wulf 4)
                     143    ;
                     144    ;*****************************************************************************
                     145    ;* OPBYTE 43H for POP from H.-J. Boehling 1/2000                             *
                     146    ;* e-mail: H-Boehling@gmx.de                                                 *
                     147    ;*****************************************************************************
                     148    ;
                     149    ; A feature of BASIC-52 is the ability to add up to 16 custom keywords
                     150    ; representing commands or instructions that you define with assembler
                     151    ; routines. For using system routines in your assembler code there are
                     152    ; operation bytes (for more information see Intels "MCS BASIC-52 MANUAL").
                     153    ; In the original souce code is no OPCODE to put a value from argument
                     154    ; stack and store in a variable.
                     155    ; With BASIC-52 V1.3 you can use OPBYTE 43H which does the same than the
                     156    ; "POP" statement.
                     157    ; (Remarked as Boehling 1)
                     158    ;
                     159    ;*****************************************************************************
                     160    ;* Reset millisecond counter on "TIME=" from H.-J. Boehling 2/2000           *
                     161    ;*****************************************************************************
                     162    ;
                     163    ; The command "TIME=0" now zeros the millisecond register so that TIME
                     164    ; returns with zero.
                     165    ; (Remarked as Boehling 2)
                     166    ;
                     167    ;*****************************************************************************
                     168    ;* New command "ERASE" by H.-J. Boehling 2/2000                              *
                     169    ;*****************************************************************************
                     170    ;
                     171    ; To erase an EEPROM (fill 16K byte up to 8000H with 0FFH) the new command
                     172    ; "ERASE" is implemented. It takes 2 min. and 45 sec. to erase the 16K bytes!
                     173    ; (Remarked as Boehling 3)
                     174    ;
BASIC52Q                                                                                                      PAGE 4

                     175    ;*****************************************************************************
                     176    ;* Correct "ASC(x)" bug by D. Wulf 2/2000                                    *
                     177    ;*****************************************************************************
                     178    ;
                     179    ; BASIC-51 V1.1 gives erroneous results for the "ASC(x)" funktion if "x" is
                     180    ; one of the following signs : *, +, -, /, <, =, > or ?.
                     181    ; BASIC-51 V1.3 returns the correct values.
                     182    ; (Remarked as Wulf 5)
                     183    ;
                     184    ;*****************************************************************************
                     185    ;*****************************************************************************
                     186    ; To indicate the new version the start message is changed from
                     187    ; *MCS-51(tm) BASIC V1.1* to
                     188    ; *MCS-BASIC-52 V1.31*
                     189    ;
                     190    ; H.-J. Boehling, D. Wulf 11/26/2001
                     191    ;*****************************************************************************
                     192    ;
  00C8               193    T2CON   EQU     0C8H ; This three lines are necessary for MS-DOS freeware
  00CC               194    TL2     EQU     0CCH ; MCS-51 Family Cross Assembler  ASEM-51 V1.2
  00CD               195    TH2     EQU     0CDH ; from W.W. Heinz (e-mail: ww@andiunx.m.isar.de)
                     196    ;
                     197    ;=== CH552 Added =====
  00C9               198    T2MOD           EQU     0C9H    ; T2MOD define
  00B9               199    CLOCK_CFG       EQU     0B9H    ; System clock configuration register
  00A1               200    SAFE_MOD        EQU     0A1H    ; Safe mode control register
                     201    ;=====================
                     202    ;
                     203            ;**************************************************************
                     204            ;
                     205            ; TRAP VECTORS TO MONITOR
                     206            ;
                     207            ; RESET TAG (0AAH) ---------2001H
                     208            ;
                     209            ; TAG LOCATION (5AH) ------ 2002H
                     210            ;
                     211            ; EXTERNAL INTERRUPT 0 ---- 2040H
                     212            ;
                     213            ; COMMAND MODE ENTRY ------ 2048H
                     214            ;
                     215            ; SERIAL PORT ------------- 2050H
                     216            ;
                     217            ; MONITOR (BUBBLE) OUTPUT - 2058H
                     218            ;
                     219            ; MONITOR (BUBBLE) INPUT -- 2060H
                     220            ;
                     221            ; MONITOR (BUBBLE) CSTS --- 2068H
                     222            ;
                     223            ; GET USER JUMP VECTOR ---- 2070H
                     224            ;
                     225            ; GET USER LOOKUP VECTOR -- 2078H
                     226            ;
                     227            ; PRINT AT VECTOR --------- 2080H
                     228            ;
                     229            ; INTERRUPT PWM ----------- 2088H
                     230            ;
                     231            ; EXTERNAL RESET ---------- 2090H
                     232            ;
BASIC52Q                                                                                                      PAGE 5

                     233            ; USER OUTPUT-------------- 4030H
                     234            ;
                     235            ; USER INPUT -------------- 4033H
                     236            ;
                     237            ; USER CSTS --------------- 4036H
                     238            ;
                     239            ; USER RESET -------------- 4039H
                     240            ;
                     241            ; USER DEFINED PRINT @ ---  403CH
                     242            ;
                     243            ;***************************************************************
                     244            ;
                     245            ;***************************************************************
                     246            ;
                     247            ; MCS - 52  -  8K BASIC VERSION 1.3
                     248            ;
                     249            ;***************************************************************
                     250            ;
0000 618B            251            AJMP    CRST            ;START THE PROGRAM
0002 37              252            ADDC    A,@R1
                     253            ;
0003                 254            ORG     3H
                     255            ;
                     256            ;***************************************************************
                     257            ;
                     258            ;EXTERNAL INTERRUPT 0
                     259            ;
                     260            ;***************************************************************
                     261            ;
0003 20312D          262            JB      DRQ,STQ         ;SEE IF DMA IS SET
0006 C0D0            263            PUSH    PSW             ;SAVE THE STATUS
0008 024003          264            LJMP    4003H           ;JUMP TO USER IF NOT SET
                     265            ;
000B                 266            ORG     0BH
                     267            ;
                     268            ;***************************************************************
                     269            ;
                     270            ;TIMER 0 OVERFLOW INTERRUPT
                     271            ;
                     272            ;***************************************************************
                     273            ;
000B C0D0            274            PUSH    PSW             ;SAVE THE STATUS
000D 202E10          275            JB      C_BIT,STJ       ;SEE IF USER WANTS INTERRUPT
0010 02400B          276            LJMP    400BH           ;EXIT IF USER WANTS INTERRUPTS
                     277            ;
0013                 278            ORG     13H
                     279            ;
                     280            ;***************************************************************
                     281            ;
                     282            ;EXTERNAL INTERRUPT 1
                     283            ;
                     284            ;***************************************************************
                     285            ;
0013 20122B          286            JB      INTBIT,STK
0016 C0D0            287            PUSH    PSW
0018 024013          288            LJMP    4013H
                     289            ;
                     290            ;
BASIC52Q                                                                                                      PAGE 6

001B                 291            ORG     1BH
                     292            ;
                     293            ;***************************************************************
                     294            ;
                     295            ;TIMER 1 OVERFLOW INTERRUPT
                     296            ;
                     297            ;***************************************************************
                     298            ;
001B C0D0            299            PUSH    PSW
001D 021F78          300            LJMP    CKS_I
                     301            ;
0020 021902          302    STJ:    LJMP    I_DR            ;DO THE INTERRUPT
                     303            ;
                     304            ;***************************************************************
                     305            ;
                     306            ;SERIAL PORT INTERRUPT
                     307            ;
                     308            ;***************************************************************
                     309            ;
0023                 310            ORG     23H
                     311            ;
0023 C0D0            312            PUSH    PSW
0025 201F1C          313            JB      SPINT,STU       ;SEE IF MONITOR EANTS INTERRUPT
0028 024023          314            LJMP    4023H
                     315            ;
002B                 316            ORG     2BH
                     317            ;
                     318            ;**************************************************************
                     319            ;
                     320            ;TIMER 2 OVERFLOW INTERRUPT
                     321            ;
                     322            ;**************************************************************
                     323            ;
002B C0D0            324            PUSH    PSW
002D 02402B          325            LJMP    402BH
                     326            ;
                     327            ;**************************************************************
                     328            ;
                     329            ;USER ENTRY
                     330            ;
                     331            ;**************************************************************
                     332            ;
0030                 333            ORG     30H
                     334            ;
0030 02193F          335            LJMP    IBLK            ;LINK TO USER BLOCK
                     336            ;
0033 202608          337    STQ:    JB      I_T0,STS        ;SEE IF MONITOR WANTS IT
0036 C296            338            CLR     DACK
0038 30B2FD          339            JNB     P3.2,$          ;WAIT FOR DMA TO END
003B D296            340            SETB    DACK
003D 32              341            RETI
                     342            ;
003E 022040          343    STS:    LJMP    2040H           ;GO TO THE MONITOR
                     344            ;
0041 D216            345    STK:    SETB    INTPEN          ;TELL BASIC AN INTERRUPT WAS RECEIVED
0043 32              346            RETI
                     347            ;
0044 022050          348    STU:    LJMP    2050H           ;SERIAL PORT INTERRUPT
BASIC52Q                                                                                                      PAGE 7

                     349            ;
                     350            ;
                     351            ;**************************************************************
                     352            ;
                     353            ; This is the equate table for 8052 basic.
                     354            ;
                     355            ;**************************************************************
                     356            ;
                     357            ; The register to direct equates for CJNE instructions.
                     358            ;
  0000               359    R0B0    EQU     0
  0001               360    R1B0    EQU     1
  0002               361    R2B0    EQU     2
  0003               362    R3B0    EQU     3
  0004               363    R4B0    EQU     4
  0005               364    R5B0    EQU     5
  0006               365    R6B0    EQU     6
  0007               366    R7B0    EQU     7
                     367            ;
                     368            ; Register bank 1 contains the text pointer
                     369            ; and the arg stack pointer.
                     370            ;
  0008               371    TXAL    EQU     8               ;R0 BANK 1 = TEXT POINTER LOW
  0009               372    ASTKA   EQU     9               ;R1 BANK 1 = ARG STACK
  000A               373    TXAH    EQU     10              ;R2 BANK 1 = TEXT POINTER HIGH
                     374            ;
                     375            ; Now five temporary locations that are used by basic.
                     376            ;
  000B               377    TEMP1   EQU     11
  000C               378    TEMP2   EQU     12
  000D               379    TEMP3   EQU     13
  000E               380    TEMP4   EQU     14
  000F               381    TEMP5   EQU     15
                     382            ;
                     383            ; Register bank 2 contains the read text pointer
                     384            ; and the control stack pointer.
                     385            ;
  0010               386    RTXAL   EQU     16              ;R0 BANK 2 = READ TEXT POINTER LOW
  0011               387    CSTKA   EQU     17              ;R1 BANK 2 = CONTROL STACK POINTER
  0012               388    RTXAH   EQU     18              ;R2 BANK 2 = READ TEXT POINTER HIGH
                     389            ;
                     390            ; Now some internal system equates.
                     391            ;
  0013               392    BOFAH   EQU     19              ;START OF THE BASIC PROGRAM, HIGH BYTE
  0014               393    BOFAL   EQU     20              ;START OF THE BASIC PROGRAM, LOW BYTE
  0015               394    NULLCT  EQU     21              ;NULL COUNT
  0016               395    PHEAD   EQU     22              ;PRINT HEAD POSITION
  0017               396    FORMAT  EQU     23
                     397            ;
                     398            ; Register bank 3 is for the user and can be loaded
                     399            ; by basic
                     400            ;
                     401            ;
                     402            ;
                     403            ; Now everything else is used by basic.
                     404            ; First the bit locations, these use bytes 34, 35, 36, 37 and 38
                     405            ;
  0010               406    OTS             BIT     16      ;34.0-ON TIME INSTRUCTION EXECUTED
BASIC52Q                                                                                                      PAGE 8

  0011               407    INPROG          BIT     17      ;34.1-INTERRUPT IN PROCESS
  0012               408    INTBIT          BIT     18      ;34.2-INTERRUPT SET BIT
  0013               409    ON_ERR          BIT     19      ;34.3-ON ERROR EXECUTED
  0014               410    OTI             BIT     20      ;34.4-ON TIME INTERRUPT IN PROGRESS
  0015               411    LINEB           BIT     21      ;34.5-LINE CHANGE OCCURED
  0016               412    INTPEN          BIT     22      ;34.6-INTERRUPT PENDING BIT
  0017               413    CONB            BIT     23      ;34.7-CAN CONTINUE IF SET
  0018               414    GTRD            BIT     24      ;35.0-READ GET LOCATION
  0019               415    LPB             BIT     25      ;35.1-PRINT TO LINE PRINTER PORT
  001A               416    CKS_B           BIT     26      ;35.2-FOR PWM INTERRUPT
  001B               417    COB             BIT     27      ;35.3-CONSOLE OUT BIT
                     418                                    ;     0 = SERIAL PORT
                     419                                    ;     1 = LINE PRINTER
  001C               420    COUB            BIT     28      ;35.4-USER CONSOLE OUT BIT
                     421                                    ;     0 = SERIAL PORT
                     422                                    ;     1 = USER DRIVER
  001D               423    INBIT           BIT     29      ;35.5-INITIALIZATION BIT
  001E               424    CIUB            BIT     30      ;35.6-USER CONSOLE IN BIT
                     425                                    ;     0 = SERIAL PORT
                     426                                    ;     1 = USER ROUTINE
  001F               427    SPINT           BIT     31      ;35.7-SERIAL PORT INTERRUPT
  0020               428    STOPBIT         BIT     32      ;36.0-PROGRAM STOP ENCOUNTERED
  0021               429    U_IDL           BIT     33      ;36.1-USER IDLE BREAK
  0022               430    INP_B           BIT     34      ;36.2-SET DURING INPUT INSTRUCTION
                     431    ;DCMPXZ         BIT     35      ;36.3-DCMPX ZERO FLAG
  0024               432    ARGF            BIT     36      ;36.4-ARG STACK HAS A VALUE
  0025               433    RETBIT          BIT     37      ;36.5-RET FROM INTERRUPT EXECUTED
  0026               434    I_T0            BIT     38      ;36.6-TRAP INTERRUPT ZERO TO MON
  0027               435    UPB             BIT     39      ;36.7-SET WHEN @ IS VALID
                     436    
                     437    ;
                     438    ;*****************************************************************************
                     439    ;****** Sorry - but the ego message had to be disabled ***********************
                     440    ;
                     441    ;JKBIT          BIT     40      ;37.0-WB TRIGGER We use the bit for detect
                     442    ;
  0028               443    mul_underflow   BIT     40      ;37.0-mul_limit_case
                     444    ;
                     445    ;*****************************************************************************
                     446    ;
  0029               447    ENDBIT          BIT     41      ;37.1-GET END OF PROGRAM
  002A               448    UBIT            BIT     42      ;37.2-FOR DIM STATEMENT
  002B               449    ISAV            BIT     43      ;37.3-SAVE INTERRUPT STATUS
  002C               450    BO              BIT     44      ;37.4-BUBBLE OUTPUT
  002D               451    XBIT            BIT     45      ;37.5-EXTERNAL PROGRAM PRESENT
  002E               452    C_BIT           BIT     46      ;37.6-SET WHEN CLOCK RUNNING
  002F               453    DIRF            BIT     47      ;37.7-DIRECT INPUT MODE
  0030               454    NO_C            BIT     48      ;38.0-NO CONTROL C
  0031               455    DRQ             BIT     49      ;38.1-DMA ENABLED
  0032               456    BI              BIT     50      ;38.2-BUBBLE INPUT
                     457    ;
                     458    ;*****************************************************************************
                     459    ;****** Disable Intel programming for to get room ****************************
                     460    ;
                     461    ;INTELB         BIT     51      ;38.3-INTELLIGENT PROM PROGRAMMING
                     462    ;
                     463    ;*****************************************************************************
                     464    ;
BASIC52Q                                                                                                      PAGE 9

  0034               465    C0ORX1          BIT     52      ;38.4-PRINT FROM ROM OR RAM
  0035               466    CNT_S           BIT     53      ;38.5-CONTROL S ENCOUNTERED
  0036               467    ZSURP           BIT     54      ;38.6-ZERO SUPRESS
  0037               468    HMODE           BIT     55      ;38.7-HEX MODE PRINT
  0097               469    LP              BIT     P1.7    ;SOFTWARE LINE PRINTER
  0096               470    DACK            BIT     P1.6    ;DMA ACK
                     471    ;*****************************************************************************
                     472    ;
                     473    ;PROMV          BIT     P1.5    ;TURN ON PROM VOLTAGE
                     474    ;PROMP          BIT     P1.4    ;PROM PULSE
                     475    ;ALED           BIT     P1.3    ;ALE DISABLE
                     476    ;
                     477    ;*****************************************************************************
  0092               478    T_BIT           BIT     P1.2    ;I/O TOGGLE BIT
  00DF               479    BD              BIT     0DFH    ;Baudrategenerator 805x7,x5
                     480            ;
                     481            ;
                     482            ; The next location is a bit addressable byte counter
                     483            ;
  0027               484    BABC    EQU     39
                     485            ;
                     486            ; Now floating point and the other temps
                     487            ;
                     488            ; FP Uses to locations 03CH
                     489            ;
                     490            ; Now the stack designators.
                     491            ;
  003E               492    SPSAV   EQU     3EH
  003F               493    S_LEN   EQU     3FH
  0040               494    T_HH    EQU     40H
  0041               495    T_LL    EQU     41H
  0042               496    INTXAH  EQU     42H
  0043               497    INTXAL  EQU     43H
  0045               498    MT1     EQU     45H
  0046               499    MT2     EQU     46H
  0047               500    MILLIV  EQU     47H             ;Real Time Clock 5 millisec.
  0048               501    TVH     EQU     48H             ;Real Time Clock high byte
  0049               502    TVL     EQU     49H             ;Real Time Clock low byte
  004A               503    SAVE_T  EQU     4AH
  004B               504    SP_H    EQU     4BH             ;SERIAL PORT TIME OUT
  004C               505    SP_L    EQU     4CH
  004D               506    CMNDSP  EQU     4DH             ;SYSTEM STACK POINTER
  0087               507    PCON0   EQU     87H             ;PCON SFR
  00AA               508    S0RELL  EQU     0AAH            ;S0RELL 805x7A SFR
  00BA               509    S0RELH  EQU     0BAH            ;S0RELH 805x7A SFR
  00CB               510    RCAPH2  EQU     0CBH            ;RCAPH2 8052 SFR
  00CA               511    RCAPL2  EQU     0CAH            ;RCAPL2 8052 SFR
  00D8               512    ADCON   EQU     0D8H            ;ADCON 805xx SFR
  00DA               513    DAPR    EQU     0DAH            ;DAPR 805xx SFR
  00FF               514    IRAMTOP EQU     0FFH            ;TOP OF RAM
  00FE               515    STACKTP EQU     0FEH            ;ARG AND CONTROL STACK TOPS
                     516            ;
                     517            ; The character equates
                     518            ;
  000D               519    CR      EQU     0DH             ;CARRIAGE RETURN
  000A               520    LF      EQU     0AH             ;LINE FEED
  0007               521    BELL    EQU     07H             ;BELL CHARACTER
  0008               522    BS      EQU     08H             ;BACK SPACE
BASIC52Q                                                                                                      PAGE 10

  0003               523    CNTRLC  EQU     03H             ;CONTROL C
  0004               524    CNTRLD  EQU     04H             ;CONTROL D
  0000               525    NULL    EQU     00H             ;NULL
                     526            ;
                     527            ; The new baud rate constants
                     528            ;
  00B2               529    B4800   EQU     0B2H            ;Timervalue for 4800 baud
  00D9               530    B9600   EQU     0D9H            ;Timervalue for 9600 baud
                     531            ;
                     532            ;
                     533            ; The internal system equates
                     534            ;
  0049               535    LINLEN  EQU     73              ;THE LENGTH OF AN INPUT LINE
  0001               536    EOF     EQU     01              ;END OF FILE CHARACTER
  0001               537    ASTKAH  EQU     01              ;ASTKA IS IN PAGE 1 OF RAM
  0000               538    CSTKAH  EQU     00              ;CSTKA IS IN PAGE 0 OF RAM
  0001               539    FTYPE   EQU     01              ;CONTROL STACK "FOR"
  0002               540    GTYPE   EQU     02              ;CONTROL STACK "GOSUB"
  0003               541    DTYPE   EQU     03              ;DO-WHILE/UNTIL TYPE
  8000               542    ROMADR  EQU     8000H   ;LOCATION OF ROM
                     543    ;
                     544            ; The floating point equates
                     545            ;
  0006               546    FPSIZ   EQU     6               ;NO. OF BYTES IN A FLOATING NUM
  0004               547    DIGIT   EQU     FPSIZ-2         ;THE MANTISSA OF A FLOATING NUM
  0009               548    STESIZ  EQU     FPSIZ+3         ;SIZE OF SYMBOL ADJUSTED TABLE ELEMENT
                     549    ;FP_BASE EQU     1993H           ;BASE OF FLOATING POINT ROUTINES
  0200               550    PSTART  EQU     512             ;START OF A PROGRAM IN RAM
  0011               551    FSIZE   EQU     FPSIZ+FPSIZ+2+2+1
                     552    ;
                     553    ;=== CH552 Added =====
  03FF               554    ERAMEND EQU     03FFH ; EX-RAM last addr (1KB)
                     555    ;=====================
                     556    ;
                     557            ;**************************************************************
                     558            ;
0047                 559    USENT:  ; User entry jump table
                     560            ;
                     561            ;**************************************************************
                     562            ;
0047 1787            563            DW      CMND1           ;(00, 00H)COMMAND MODE JUMP
0049 1223            564            DW      IFIX            ;(01, 01H)CONVERT FP TO INT
004B 0FDD            565            DW      PUSHAS          ;(02, 02H)PUSH VALUE ONTO ARG STACK
004D 0FD3            566            DW      POPAS           ;(03, 03H)POP VALUE OFF ARG STACK
004F 04BD            567            DW      PG1             ;(04, 04H)PROGRAM A PROM
0051 06D8            568            DW      INLINE          ;(05, 05H)INPUT A LINE
0053 06BF            569            DW      UPRNT           ;(06, 06H)PRINT A LINR
0055 06A5            570            DW      CRLF            ;(07, 07H)OUTPUT A CRLF
                     571            ;
                     572            ;**************************************************************
                     573            ;
                     574            ; This is the operation jump table for arithmetics
                     575            ;
                     576            ;**************************************************************
                     577            ;
0057 13AC            578    OPTAB:  DW      ALPAR           ;(08, 08H)LEFT PAREN
0059 132B            579            DW      AEXP            ;(09, 09H)EXPONENTAION
005B 11B0            580            DW      AMUL            ;(10, 0AH)FP MUL
BASIC52Q                                                                                                      PAGE 11

005D 1741            581            DW      AADD            ;(11, 0BH)FLOATING POINT ADD
005F 140A            582            DW      ADIV            ;(12, 0CH)FLOATING POINT DIVIDE
0061 171C            583            DW      ASUB            ;(13, 0DH)FLOATING POINT SUBTRACTION
0063 1498            584            DW      AXRL            ;(14, 0EH)XOR
0065 1484            585            DW      AANL            ;(15, 0FH)AND
0067 148D            586            DW      AORL            ;(16, 10H)OR
0069 13A1            587            DW      ANEG            ;(17, 11H)NEGATE
006B 13DB            588            DW      AEQ             ;(18, 12H)EQUAL
006D 13E7            589            DW      AGE             ;(19, 13H)GREATER THAN OR EQUAL
006F 13EB            590            DW      ALE             ;(20, 14H)LESS THAN OR EQUAL
0071 13E1            591            DW      ANE             ;(21, 15H)NOT EQUAL
0073 13D6            592            DW      ALT             ;(22, 16H)LESS THAN
0075 13C5            593            DW      AGT             ;(23, 17H)GREATER THAN
                     594            ;
                     595            ;***************************************************************
                     596            ;
                     597            ; This is the jump table for unary operators
                     598            ;
                     599            ;***************************************************************
                     600            ;
0077 138F            601            DW      AABS            ;(24, 18H)ABSOLUTE VALUE
0079 136D            602            DW      AINT            ;(25, 19H)INTEGER OPERATOR
007B 1395            603            DW      ASGN            ;(26, 1AH)SIGN OPERATOR
007D 1496            604            DW      ANOT            ;(27, 1BH)ONE'S COMPLEMENT
007F 116D            605            DW      ACOS            ;(28, 1CH)COSINE
0081 11D0            606            DW      ATAN            ;(29, 1DH)TANGENT
0083 1171            607            DW      ASIN            ;(30, 1EH)SINE
0085 128D            608            DW      ASQR            ;(31, 1FH)SQUARE ROOT
0087 13AD            609            DW      ACBYTE          ;(32, 20H)READ CODE
0089 1327            610            DW      AETOX           ;(33, 21H)E TO THE X
008B 11E0            611            DW      AATAN           ;(34, 22H)ARC TANGENT
008D 12C0            612            DW      ALN             ;(35, 23H)NATURAL LOG
008F 13B6            613            DW      ADBYTE          ;(36, 24H)READ DATA MEMORY
0091 13BE            614            DW      AXBYTE          ;(37, 25H)READ EXTERNAL MEMORY
0093 147F            615            DW      PIPI            ;(38, 26H)PI
0095 13F1            616            DW      ARND            ;(39, 27H)RANDOM NUMBER
0097 14A9            617            DW      AGET            ;(40, 28H)GET INPUT CHARACTER
0099 1711            618            DW      AFREE           ;(41, 29H)COMPUTE #BYTES FREE
009B 1721            619            DW      ALEN            ;(42, 2AH) COMPUTE LEN OF PORGRAM
009D 0FD9            620            DW      AXTAL           ;(43, 2BH) CRYSTAL
009F 164F            621            DW      PMTOP           ;(44, 2CH)TOP OF MEMORY
00A1 1729            622            DW      ATIME           ;(45, 2DH) TIME
00A3 14B9            623            DW      A_IE            ;(46, 2EH) IE
00A5 14BD            624            DW      A_IP            ;(47, 2FH) IP
00A7 14C1            625            DW      ATIM0           ;(48, 30H) TIMER 0
00A9 14C7            626            DW      ATIM1           ;(49, 31H) TIMER 1
00AB 14CD            627            DW      ATIM2           ;(50, 32H) TIMER 2
00AD 14D3            628            DW      AT2CON          ;(51, 33H) T2CON
00AF 14D7            629            DW      ATCON           ;(52, 34H) TCON
00B1 14DB            630            DW      ATMOD           ;(53, 35H) ATMOD
00B3 14DF            631            DW      ARCAP2          ;(54, 36H) RCAP2
00B5 14E5            632            DW      AP1             ;(55, 37H) P1
00B7 14E9            633            DW      APCON           ;(56, 38H) PCON
00B9 0F43            634            DW      EXPRB           ;(57, 39H) EVALUATE AN EXPRESSION
00BB 165C            635            DW      AXTAL1          ;(58, 3AH) CALCULATE CRYSTAL
00BD 14F0            636            DW      LINE            ;(59, 3BH) EDIT A LINE
00BF 15BA            637            DW      PP              ;(60, 3CH) PROCESS A LINE
00C1 10A0            638            DW      UPPL0           ;(61, 3DH) UNPROCESS A LINE
BASIC52Q                                                                                                      PAGE 12

00C3 0D65            639            DW      VAR             ;(62, 3EH) FIND A VARIABLE
00C5 0ECD            640            DW      GC              ;(63, 3FH) GET A CHARACTER
00C7 0ED5            641            DW      GCI             ;(64, 40H) GET CHARACTER AND INCREMENT
00C9 0791            642            DW      INCHAR          ;(65, 41H) INPUT A CHARACTER
00CB 0802            643            DW      CRUN            ;(66, 42H) RUN A PROGRAM
                     644    ;
                     645    ;*****************************************************************************
                     646    ;****** OPBYTE 43H for POP ***************************************************
                     647    ;****** Boehling 1 ***********************************************************
                     648    ;
00CD 0A7D            649            dw      SPOP            ;(67, 43H) POP a value to a variable
                     650    ;
                     651    ;*****************************************************************************
                     652    ;
                     653    
00CF 01              654    OPBOL:  DB      1               ;
                     655            ;
00D0 0F              656            DB      15              ;LEFT PAREN
00D1 0E              657            DB      14              ;EXPONENTIAN **
00D2 0A              658            DB      10              ;MUL
00D3 08              659            DB      8               ;ADD
00D4 0A              660            DB      10              ;DIVIDE
00D5 08              661            DB      8               ;SUB
00D6 03              662            DB      3               ;XOR
00D7 05              663            DB      5               ;AND
00D8 04              664            DB      4               ;OR
00D9 0C              665            DB      12              ;NEGATE
00DA 06              666            DB      6               ;EQ
00DB 06              667            DB      6               ;GT
00DC 06              668            DB      6               ;LT
00DD 06              669            DB      6               ;NE
00DE 06              670            DB      6               ;LE
00DF 06              671            DB      6               ;GE
                     672            ;
00E0 0F              673    UOPBOL: DB      15              ;AABS
00E1 0F              674            DB      15              ;AAINT
00E2 0F              675            DB      15              ;ASGN
00E3 0F              676            DB      15              ;ANOT
00E4 0F              677            DB      15              ;ACOS
00E5 0F              678            DB      15              ;ATAN
00E6 0F              679            DB      15              ;ASIN
00E7 0F              680            DB      15              ;ASQR
00E8 0F              681            DB      15              ;ACBYTE
00E9 0F              682            DB      15              ;E TO THE X
00EA 0F              683            DB      15              ;AATAN
00EB 0F              684            DB      15              ;NATURAL LOG
00EC 0F              685            DB      15              ;DBYTE
00ED 0F              686            DB      15              ;XBYTE
                     687            ;
                     688            ;***************************************************************
                     689            ;
                     690            ; The ASCII printed messages.
                     691            ;
                     692            ;***************************************************************
                     693            ;
00EE 53544F50        694    STP:    DB      'STOP"'
00F2 22         
                     695            ;
BASIC52Q                                                                                                      PAGE 13

00F3 54525920        696    IAN:    DB      'TRY AGAIN"'
00F7 41474149   
00FB 4E22       
                     697            ;
00FD 52454144        698    RDYS:   DB      'READY"'
0101 5922       
                     699            ;
0103 202D2049        700    INS:    DB      ' - IN LINE "'
0107 4E204C49   
010B 4E452022   
                     701            ;
                     702            ;**************************************************************
                     703            ;
                     704            ; This is the command jump table
                     705            ;
                     706            ;**************************************************************
                     707            ;
010F 0802            708    CMNDD:  DW      CRUN            ;RUN
0111 104E            709            DW      CLIST           ;LIST
0113 0B08            710            DW      CNULL           ;NULL
0115 065C            711            DW      CNEW            ;NEW
0117 183E            712            DW      CCONT           ;CONTINUE
0119 048A            713            DW      CPROG           ;PROGRAM A PROM
011B 1773            714            DW      CXFER           ;TRANSFER FROM ROM TO RAM
011D 177F            715            DW      CRAM            ;RAM MODE
011F 053C            716            DW      CROM            ;ROM MODE
                     717    ;
                     718    ;*****************************************************************************
                     719    ;****** Disable Intel programming for to get room ****************************
                     720    ;
                     721    ;       DW      CIPROG          ;INTELLIGENT PROM PROGRAMMING
                     722    ;
                     723    ;*****************************************************************************
                     724    ;
0121 0500            725            dw      CERASE          ;Erase an EEPROM
                     726    ;
                     727            ;***************************************************************
                     728            ;
                     729            ; This is the statement jump table.
                     730            ;
                     731            ;**************************************************************
                     732            ;
0123                 733    STATD:  ;
0123 096E            734            DW      SLET            ;LET            80H
0125 068F            735            DW      SCLR            ;CLEAR          81H
0127 0A76            736            DW      SPUSH           ;PUSH VAR       82H
0129 0AAA            737            DW      SGOTO           ;GO TO          83H
012B 1686            738            DW      STONE           ;TONE           84H
012D 0C29            739            DW      SPH0            ;PRINT MODE 0   85H
012F 192E            740            DW      SUI             ;USER INPUT     86H
0131 1933            741            DW      SUO             ;USER OUTPUT    87H
0133 0A7D            742            DW      SPOP            ;POP VAR        88H
0135 0C2D            743            DW      SPRINT          ;PRINT          89H
0137 0E63            744            DW      SCALL           ;CALL           8AH
0139 0D61            745            DW      SDIMX           ;DIMENSION      8BH
013B 060C            746            DW      STRING          ;STRING ALLO    8CH
013D 16F9            747            DW      SBAUD           ;SET BAUD       8DH
013F 1918            748            DW      SCLOCK          ;CLOCK          8EH
BASIC52Q                                                                                                      PAGE 14

0141 0C2B            749            DW      SPH1            ;PRINT MODE 1   8FH
                     750            ;
                     751            ; No direct mode from here on
                     752            ;
0143 0858            753            DW      SSTOP           ;STOP           90H
0145 0E56            754            DW      SOT             ;ON TIME        91H
0147 1419            755            DW      SONEXT          ;ON EXT INT     92H
0149 0B0E            756            DW      SRETI           ;RET FROM INT   93H
014B 0F05            757            DW      S_DO            ;DO             94H
014D 0BCE            758            DW      SRESTR          ;RESTOR         95H
014F 0EFC            759            DW      WCR             ;REM            96H
0151 0B5F            760            DW      SNEXT           ;NEXT           97H
0153 140F            761            DW      SONERR          ;ON ERROR       98H
0155 0CEB            762            DW      S_ON            ;ON             99H
0157 0DF5            763            DW      SINPUT          ;INPUT          9AH
0159 0BE3            764            DW      SREAD           ;READ           9BH
015B 0EEC            765            DW      FINDCR          ;DATA           9CH
015D 0B10            766            DW      SRETRN          ;RETURN         9DH
015F 0A86            767            DW      SIF             ;IF             9EH
0161 0B2D            768            DW      SGOSUB          ;GOSUB          9FH
0163 0A3C            769            DW      SFOR            ;FOR            A0H
0165 0AFC            770            DW      SWHILE          ;WHILE          A1H
0167 0B01            771            DW      SUNTIL          ;UNTIL          A2H
0169 1787            772            DW      CMND1           ;END            A3H
016B 185B            773            DW      I_DL            ;IDLE           A4H
016D 0FE5            774            DW      ST_A            ;STORE AT       A5H
016F 0FE9            775            DW      LD_A            ;LOAD AT        A6H
0171 04F8            776            DW      PGU             ;PGM            A7H
0173 07C0            777            DW      RROM            ;RUN A ROM      A9H
                     778            ;
                     779            ;**************************************************************
                     780            ;
0175                 781    TOKTAB: ; This is the basic token table
                     782            ;
                     783            ;**************************************************************
                     784            ;
                     785            ; First the tokens for statements
                     786            ;
0175 80              787            DB      80H             ;LET TOKEN
0176 4C4554          788            DB      'LET'
                     789            ;
0179 81              790            DB      81H             ;CLEAR TOKEN
017A 434C4541        791            DB      'CLEAR'
017E 52         
                     792            ;
017F 82              793            DB      82H             ;PUSH TOKEN
0180 50555348        794            DB      'PUSH'
                     795            ;
  0083               796    T_GOTO  EQU     83H
                     797            ;
0184 83              798            DB      83H             ;GO TO TOKEN
0185 474F544F        799            DB      'GOTO'
                     800            ;
0189 84              801            DB      84H             ;TOGGLE TOKEN
018A 50574D          802            DB      'PWM'
                     803            ;
018D 85              804            DB      85H             ;PRINT HEX MODE 0
018E 5048302E        805            DB      'PH0.'
BASIC52Q                                                                                                      PAGE 15

                     806            ;
0192 86              807            DB      86H             ;USER IN TOKEN
0193 5549            808            DB      'UI'
                     809            ;
0195 87              810            DB      87H             ;USER OUT TOKEN
0196 554F            811            DB      'UO'
                     812            ;
0198 88              813            DB      88H             ;POP TOKEN
0199 504F50          814            DB      'POP'
                     815            ;
019C 89              816            DB      89H             ;PRINT TOKEN
019D 5052494E        817            DB      'PRINT'
01A1 54         
01A2 89              818            DB      89H
01A3 502E            819            DB      'P.'            ;P. ALSO MEANS PRINT
01A5 89              820            DB      89H             ;? ALSO
01A6 3F              821            DB      '?'
                     822            ;
01A7 8A              823            DB      8AH             ;CALL TOKEN
01A8 43414C4C        824            DB      'CALL'
                     825            ;
01AC 8B              826            DB      8BH             ;DIMENSION TOKEN
01AD 44494D          827            DB      'DIM'
                     828            ;
01B0 8C              829            DB      8CH             ;STRING TOKEN
01B1 53545249        830            DB      'STRING'
01B5 4E47       
                     831            ;
01B7 8D              832            DB      8DH             ;SET BAUD RATE
01B8 42415544        833            DB      'BAUD'
                     834            ;
01BC 8E              835            DB      8EH             ;CLOCK
01BD 434C4F43        836            DB      'CLOCK'
01C1 4B         
                     837            ;
01C2 8F              838            DB      8FH             ;PRINT HEX MODE 1
01C3 5048312E        839            DB      'PH1.'
                     840            ;
  0090               841    T_STOP  EQU     90H             ;STOP TOKEN
01C7 90              842            DB      T_STOP
01C8 53544F50        843            DB      'STOP'
                     844            ;
  0090               845    T_DIR   EQU     T_STOP          ;NO DIRECT FROM HERE ON
                     846            ;
01CC 91              847            DB      T_STOP+1        ;ON TIMER INTERRUPT
01CD 4F4E5449        848            DB      'ONTIME'
01D1 4D45       
                     849            ;
01D3 92              850            DB      T_STOP+2        ;ON EXTERNAL INTERRUPT
01D4 4F4E4558        851            DB      'ONEX1'
01D8 31         
                     852            ;
01D9 93              853            DB      T_STOP+3        ;RETURN FROM INTERRUPT
01DA 52455449        854            DB      'RETI'
                     855            ;
01DE 94              856            DB      T_STOP+4        ;DO TOKEN
01DF 444F            857            DB      'DO'
                     858            ;
BASIC52Q                                                                                                      PAGE 16

01E1 95              859            DB      T_STOP+5        ;RESTORE TOKEN
01E2 52455354        860            DB      'RESTORE'
01E6 4F5245     
                     861            ;
  0096               862    T_REM   EQU     T_STOP+6        ;REMARK TOKEN
01E9 96              863            DB      T_REM
01EA 52454D          864            DB      'REM'
                     865            ;
01ED 97              866            DB      T_REM+1         ;NEXT TOKEN
01EE 4E455854        867            DB      'NEXT'
                     868            ;
01F2 98              869            DB      T_REM+2         ;ON ERROR TOKEN
01F3 4F4E4552        870            DB      'ONERR'
01F7 52         
                     871            ;
01F8 99              872            DB      T_REM+3         ;ON TOKEN
01F9 4F4E            873            DB      'ON'
                     874            ;
01FB 9A              875            DB      T_REM+4         ;INPUT
01FC 494E5055        876            DB      'INPUT'
0200 54         
                     877            ;
0201 9B              878            DB      T_REM+5         ;READ
0202 52454144        879            DB      'READ'
                     880            ;
  009C               881    T_DATA  EQU     T_REM+6         ;DATA
0206 9C              882            DB      T_DATA
0207 44415441        883            DB      'DATA'
                     884            ;
020B 9D              885            DB      T_DATA+1        ;RETURN
020C 52455455        886            DB      'RETURN'
0210 524E       
                     887            ;
0212 9E              888            DB      T_DATA+2        ;IF
0213 4946            889            DB      'IF'
                     890            ;
  009F               891    T_GOSB  EQU     T_DATA+3        ;GOSUB
0215 9F              892            DB      T_GOSB
0216 474F5355        893            DB      'GOSUB'
021A 42         
                     894            ;
021B A0              895            DB      T_GOSB+1        ;FOR
021C 464F52          896            DB      'FOR'
                     897            ;
021F A1              898            DB      T_GOSB+2        ;WHILE
0220 5748494C        899            DB      'WHILE'
0224 45         
                     900            ;
0225 A2              901            DB      T_GOSB+3        ;UNTIL
0226 554E5449        902            DB      'UNTIL'
022A 4C         
                     903            ;
022B A3              904            DB      T_GOSB+4        ;END
022C 454E44          905            DB      'END'
                     906            ;
  00A4               907    T_LAST  EQU     T_GOSB+5        ;LAST INITIAL TOKEN
                     908            ;
  00A4               909    T_TAB   EQU     T_LAST          ;TAB TOKEN
BASIC52Q                                                                                                      PAGE 17

022F A4              910            DB      T_TAB
0230 544142          911            DB      'TAB'
                     912            ;
  00A5               913    T_THEN  EQU     T_LAST+1        ;THEN TOKEN
0233 A5              914            DB      T_THEN
0234 5448454E        915            DB      'THEN'
                     916            ;
  00A6               917    T_TO    EQU     T_LAST+2        ;TO TOKEN
0238 A6              918            DB      T_TO
0239 544F            919            DB      'TO'
                     920            ;
  00A7               921    T_STEP  EQU     T_LAST+3        ;STEP TOKEN
023B A7              922            DB      T_STEP
023C 53544550        923            DB      'STEP'
                     924            ;
  00A8               925    T_ELSE  EQU     T_LAST+4        ;ELSE TOKEN
0240 A8              926            DB      T_ELSE
0241 454C5345        927            DB      'ELSE'
                     928            ;
  00A9               929    T_SPC   EQU     T_LAST+5        ;SPACE TOKEN
0245 A9              930            DB      T_SPC
0246 535043          931            DB      'SPC'
                     932            ;
  00AA               933    T_CR    EQU     T_LAST+6
0249 AA              934            DB      T_CR
024A 4352            935            DB      'CR'
                     936            ;
024C AB              937            DB      T_CR+1
024D 49444C45        938            DB      'IDLE'
                     939            ;
0251 AC              940            DB      T_CR+2
0252 535440          941            DB      'ST@'
                     942            ;
0255 AD              943            DB      T_CR+3
0256 4C4440          944            DB      'LD@'
                     945            ;
0259 AE              946            DB      T_CR+4
025A 50474D          947            DB      'PGM'
                     948            ;
025D AF              949            DB      T_CR+5
025E 52524F4D        950            DB      'RROM'
                     951            ;
                     952            ; Operator tokens
                     953            ;
  00E0               954    T_LPAR  EQU     0E0H            ;LEFT PAREN
0262 E0              955            DB      T_LPAR
0263 28              956            DB      '('
                     957            ;
0264 E1              958            DB      T_LPAR+1        ;EXPONENTIAN
0265 2A2A            959            DB      '**'
                     960            ;
0267 E2              961            DB      T_LPAR+2        ;FP MULTIPLY
0268 2A              962            DB      '*'
                     963            ;
  00E3               964    T_ADD   EQU     T_LPAR+3
0269 E3              965            DB      T_LPAR+3        ;ADD TOKEN
026A 2B              966            DB      '+'
                     967            ;
BASIC52Q                                                                                                      PAGE 18

026B E4              968            DB      T_LPAR+4        ;DIVIDE TOKEN
026C 2F              969            DB      '/'
                     970            ;
  00E5               971    T_SUB   EQU     T_LPAR+5        ;SUBTRACT TOKEN
026D E5              972            DB      T_SUB
026E 2D              973            DB      '-'
                     974            ;
026F E6              975            DB      T_LPAR+6        ;LOGICAL EXCLUSIVE OR
0270 2E584F52        976            DB      '.XOR.'
0274 2E         
                     977            ;
0275 E7              978            DB      T_LPAR+7        ;LOGICAL AND
0276 2E414E44        979            DB      '.AND.'
027A 2E         
                     980            ;
027B E8              981            DB      T_LPAR+8        ;LOGICAL OR
027C 2E4F522E        982            DB      '.OR.'
                     983            ;
  00E9               984    T_NEG   EQU     T_LPAR+9
                     985            ;
  00EA               986    T_EQU   EQU     T_LPAR+10       ;EQUAL
0280 EA              987            DB      T_EQU
0281 3D              988            DB      '='
                     989            ;
0282 EB              990            DB      T_LPAR+11       ;GREATER THAN OR EQUAL
0283 3E3D            991            DB      '>='
                     992            ;
0285 EC              993            DB      T_LPAR+12       ;LESS THAN OR EQUAL
0286 3C3D            994            DB      '<='
                     995            ;
0288 ED              996            DB      T_LPAR+13       ;NOT EQUAL
0289 3C3E            997            DB      '<>'
                     998            ;
028B EE              999            DB      T_LPAR+14       ;LESS THAN
028C 3C             1000            DB      '<'
                    1001            ;
028D EF             1002            DB      T_LPAR+15       ;GREATER THAN
028E 3E             1003            DB      '>'
                    1004            ;
                    1005            ;
  00B0              1006    T_UOP   EQU     0B0H            ;UNARY OP BASE TOKEN
                    1007            ;
028F B0             1008            DB      T_UOP           ;ABS TOKEN
0290 414253         1009            DB      'ABS'
                    1010            ;
0293 B1             1011            DB      T_UOP+1         ;INTEGER TOKEN
0294 494E54         1012            DB      'INT'
                    1013            ;
0297 B2             1014            DB      T_UOP+2         ;SIGN TOKEN
0298 53474E         1015            DB      'SGN'
                    1016            ;
029B B3             1017            DB      T_UOP+3         ;GET TOKEN
029C 4E4F54         1018            DB      'NOT'
                    1019            ;
029F B4             1020            DB      T_UOP+4         ;COSINE TOKEN
02A0 434F53         1021            DB      'COS'
                    1022            ;
02A3 B5             1023            DB      T_UOP+5         ;TANGENT TOKEN
BASIC52Q                                                                                                      PAGE 19

02A4 54414E         1024            DB      'TAN'
                    1025            ;
02A7 B6             1026            DB      T_UOP+6         ;SINE TOKEN
02A8 53494E         1027            DB      'SIN'
                    1028            ;
02AB B7             1029            DB      T_UOP+7         ;SQUARE ROOT TOKEN
02AC 535152         1030            DB      'SQR'
                    1031            ;
02AF B8             1032            DB      T_UOP+8         ;CBYTE TOKEN
02B0 434259         1033            DB      'CBY'
                    1034            ;
02B3 B9             1035            DB      T_UOP+9         ;EXP (E TO THE X) TOKEN
02B4 455850         1036            DB      'EXP'
                    1037            ;
02B7 BA             1038            DB      T_UOP+10
02B8 41544E         1039            DB      'ATN'
                    1040            ;
02BB BB             1041            DB      T_UOP+11
02BC 4C4F47         1042            DB      'LOG'
                    1043            ;
02BF BC             1044            DB      T_UOP+12        ;DBYTE TOKEN
02C0 444259         1045            DB      'DBY'
                    1046            ;
02C3 BD             1047            DB      T_UOP+13        ;XBYTE TOKEN
02C4 584259         1048            DB      'XBY'
                    1049            ;
  00BE              1050    T_ULAST EQU     T_UOP+14        ;LAST OPERATOR NEEDING PARENS
                    1051            ;
02C7 BE             1052            DB      T_ULAST
02C8 5049           1053            DB      'PI'
                    1054            ;
02CA BF             1055            DB      T_ULAST+1       ;RND TOKEN
02CB 524E44         1056            DB      'RND'
                    1057            ;
02CE C0             1058            DB      T_ULAST+2       ;GET TOKEN
02CF 474554         1059            DB      'GET'
                    1060            ;
02D2 C1             1061            DB      T_ULAST+3       ;FREE TOKEN
02D3 46524545       1062            DB      'FREE'
                    1063            ;
02D7 C2             1064            DB      T_ULAST+4       ;LEN TOKEN
02D8 4C454E         1065            DB      'LEN'
                    1066            ;
  00C3              1067    T_XTAL  EQU     T_ULAST+5       ;CRYSTAL TOKEN
02DB C3             1068            DB      T_XTAL
02DC 5854414C       1069            DB      'XTAL'
                    1070            ;
  00C4              1071    T_MTOP  EQU     T_ULAST+6       ;MTOP
02E0 C4             1072            DB      T_MTOP
02E1 4D544F50       1073            DB      'MTOP'
                    1074            ;
  00C6              1075    T_IE    EQU     T_ULAST+8       ;IE REGISTER
02E5 C6             1076            DB      T_IE
02E6 4945           1077            DB      'IE'
                    1078            ;
  00C7              1079    T_IP    EQU     T_ULAST+9       ;IP REGISTER
02E8 C7             1080            DB      T_IP
02E9 4950           1081            DB      'IP'
BASIC52Q                                                                                                      PAGE 20

                    1082            ;
  00C8              1083    TMR0    EQU     T_ULAST+10      ;TIMER 0
02EB C8             1084            DB      TMR0
02EC 54494D45       1085            DB      'TIMER0'
02F0 5230       
                    1086            ;
  00C9              1087    TMR1    EQU     T_ULAST+11      ;TIMER 1
02F2 C9             1088            DB      TMR1
02F3 54494D45       1089            DB      'TIMER1'
02F7 5231       
                    1090            ;
  00CA              1091    TMR2    EQU     T_ULAST+12      ;TIMER 2
02F9 CA             1092            DB      TMR2
02FA 54494D45       1093            DB      'TIMER2'
02FE 5232       
                    1094            ;
  00C5              1095    T_TIME  EQU     T_ULAST+7       ;TIME
0300 C5             1096            DB      T_TIME
0301 54494D45       1097            DB      'TIME'
                    1098            ;
  00CB              1099    TT2C    EQU     T_ULAST+13      ;T2CON
0305 CB             1100            DB      TT2C
0306 5432434F       1101            DB      'T2CON'
030A 4E         
                    1102            ;
  00CC              1103    TTC     EQU     T_ULAST+14      ;TCON
030B CC             1104            DB      TTC
030C 54434F4E       1105            DB      'TCON'
                    1106            ;
  00CD              1107    TTM     EQU     T_ULAST+15      ;TMOD
0310 CD             1108            DB      TTM
0311 544D4F44       1109            DB      'TMOD'
                    1110            ;
  00CE              1111    TRC2    EQU     T_ULAST+16      ;RCAP2
0315 CE             1112            DB      TRC2
0316 52434150       1113            DB      'RCAP2'
031A 32         
                    1114            ;
  00CF              1115    T_P1    EQU     T_ULAST+17      ;P1
031B CF             1116            DB      T_P1
031C 504F5254       1117            DB      'PORT1'
0320 31         
                    1118            ;
  00D0              1119    T_PC    EQU     T_ULAST+18      ;PCON
0321 D0             1120            DB      T_PC
0322 50434F4E       1121            DB      'PCON'
                    1122            ;
  00D1              1123    T_ASC   EQU     T_ULAST+19      ;ASC TOKEN
0326 D1             1124            DB      T_ASC
0327 41534328       1125            DB      'ASC('
                    1126            ;
  00D2              1127    T_USE   EQU     T_ULAST+20      ;USING TOKEN
032B D2             1128            DB      T_USE
032C 5553494E       1129            DB      'USING('
0330 4728       
0332 D2             1130            DB      T_USE
0333 552E28         1131            DB      'U.('
                    1132            ;
BASIC52Q                                                                                                      PAGE 21

  00D3              1133    T_CHR   EQU     T_ULAST+21      ;CHR TOKEN
0336 D3             1134            DB      T_CHR
0337 43485228       1135            DB      'CHR('
                    1136            ;
  00F0              1137    T_CMND  EQU     0F0H            ;COMMAND BASE
                    1138            ;
033B F0             1139            DB      0F0H            ;RUN TOKEN
033C 52554E         1140            DB      'RUN'
                    1141            ;
033F F1             1142            DB      0F1H            ;LIST TOKEN
0340 4C495354       1143            DB      'LIST'
                    1144            ;
0344 F2             1145            DB      0F2H            ;NULL TOKEN
0345 4E554C4C       1146            DB      'NULL'
                    1147            ;
0349 F3             1148            DB      0F3H            ;NEW TOKEN
034A 4E4557         1149            DB      'NEW'
                    1150            ;
034D F4             1151            DB      0F4H            ;CONTINUE TOKEN
034E 434F4E54       1152            DB      'CONT'
                    1153            ;
0352 F5             1154            DB      0F5H            ;PROGRAM TOKEN
0353 50524F47       1155            DB      'PROG'
                    1156            ;
0357 F6             1157            DB      0F6H            ;TRANSFER TOKEN
0358 58464552       1158            DB      'XFER'
                    1159            ;
035C F7             1160            DB      0F7H            ;RAM MODE
035D 52414D         1161            DB      'RAM'
                    1162            ;
0360 F8             1163            DB      0F8H            ;ROM MODE
0361 524F4D         1164            DB      'ROM'
                    1165    ;
                    1166    ;
                    1167    ;*****************************************************************************
                    1168    ;****** Disable Intel programming for to get room ****************************
                    1169    ;
                    1170    ;       DB      0F9H            ;INTELLIGENT PROM PROGRAMMING
                    1171    ;       DB      'FPROG'
                    1172    ;
                    1173    ;*****************************************************************************
                    1174    ;****** New command "ERASE" to fill an EEPROM with 0FFH  *********************
                    1175    ;****** Boehling 3 ***********************************************************
                    1176    ;
0364 F9             1177            db      0F9H            ;Erase an EEPROM
0365 45524153       1178            db      'ERASE'
0369 45         
                    1179    ;
                    1180    ;*****************************************************************************
                    1181    ;****** Karmann 2 Bugfix *****************************************************
                    1182    ;
036A FE             1183            db      0feh            ;dummy token and
036B 7F             1184            db      07fh            ;unused dummy char
                    1185    ;
                    1186    ;****** continue with original code: *****************************************
                    1187    ;
036C FF             1188            DB      0FFH            ;END OF TABLE
                    1189            ;
BASIC52Q                                                                                                      PAGE 22

036D 45585452       1190    EIG:    DB      'EXTRA IGNORED"'
0371 41204947   
0375 4E4F5245   
0379 4422       
                    1191            ;
037B 412D5354       1192    EXA:    DB      'A-STACK"'
037F 41434B22   
                    1193            ;
0383 432D5354       1194    EXC:    DB      'C-STACK"'
0387 41434B22   
                    1195            ;
                    1196            ;**************************************************************
                    1197            ;
038B                1198    CRST:   ; This performs system initialzation, it was moved here so the
                    1199            ; new power on reset functions could be tested in an 8751.
                    1200            ;
                    1201            ;**************************************************************
                    1202            ;
                    1203            ; First, initialize SFR's
                    1204            ;
038B 75985A         1205            MOV     SCON,#5AH       ;INITIALIZE SFR'S
                    1206    ;
                    1207    ;*****************************************************************************
                    1208    ;****** Use XTAL up to 47 MHz ************************************************
                    1209    ;****** Wulf 2 ***************************************************************
                    1210    ;
                    1211    ;       MOV     TMOD,#10H
                    1212    ;
038E 758911         1213            mov     TMOD,#11H       ;Use 16 bit mode of timer 0
                    1214    ;
                    1215    ;*****************************************************************************
                    1216    ;
0391 758854         1217            MOV     TCON,#54H
0394 75C834         1218            MOV     T2CON,#34H
                    1219    ;       DB      75H             ;MOV DIRECT, # OP CODE
                    1220    ;       DB      0C8H            ;T2CON LOCATION
                    1221    ;       DB      34H             ;CONFIGURATION BYTE
                    1222    ;
                    1223    ;=== CH552 Added =====
0397 9137           1224            acall   setfsys ; Set CPU Clock 24MHz(Max Speed)
                    1225    ;=====================
                    1226            ;
0399 902001         1227            MOV     DPTR,#2001H     ;READ CODE AT 2001H
039C E4             1228            CLR     A
039D 93             1229            MOVC    A,@A+DPTR
039E B4AA03         1230            CJNE    A,#0AAH,CRST1   ;IF IT IS AN AAH, DO USER RESET
03A1 122090         1231            LCALL   2090H
                    1232            ;
03A4 78FF           1233    CRST1:  MOV     R0,#IRAMTOP     ;PUT THE TOP OF RAM IN R0
03A6 E4             1234            CLR     A               ;ZERO THE ACC
                    1235            ;
03A7 F6             1236    CRST2:  MOV     @R0,A           ;CLEAR INTERNAL MEMORY
03A8 D8FD           1237            DJNZ    R0,CRST2        ;LOOP TIL DONE
                    1238            ;
                    1239            ; Now, test the external memory
                    1240            ;
03AA 753E4D         1241            MOV     SPSAV,#CMNDSP   ;SET UP THE STACK
03AD 853E81         1242            MOV     SP,SPSAV
BASIC52Q                                                                                                      PAGE 23

                    1243    ;
                    1244    ;*****************************************************************************
                    1245    ;****** Karmann 1 Bugfix *****************************************************
                    1246    ;
03B0 1217E0         1247            lcall   TEST_USER       ;chek for user command extensions
                    1248    ;
                    1249    ;****** continue with original code: *****************************************
                    1250    ;
03B3 751380         1251            MOV     BOFAH,#HIGH ROMADR
03B6 751411         1252            MOV     BOFAL,#LOW ROMADR+17
03B9 908000         1253            MOV     DPTR,#ROMADR    ;GET THE BYTE AT 8000H
03BC E0             1254            MOVX    A,@DPTR
03BD C3             1255            CLR     C
03BE 9431           1256            SUBB    A,#31H          ;FOR BIAS
03C0 F545           1257            MOV     MT1,A           ;SAVE IN DIRECT MATH LOC
03C2 C2E2           1258            CLR     ACC.2           ;SAVE FOR RESET
03C4 FF             1259            MOV     R7,A            ;SAVE IT IN R7
03C5 A3             1260            INC     DPTR
03C6 B1BA           1261            ACALL   L31DPI          ;SAVE BAUD RATE
03C8 120885         1262            LCALL   RCL
03CB A3             1263            INC     DPTR            ;GET MEMTOP
03CC B1BA           1264            ACALL   L31DPI
03CE 90005F         1265            MOV     DPTR,#5FH       ;READ THE EXTERNAL BYTE
03D1 E0             1266            MOVX    A,@DPTR
03D2 900000         1267            MOV     DPTR,#0         ;ESTABLISH BASE FOR CLEAR
03D5 B4A508         1268            CJNE    A,#0A5H,CRS     ;Erase the memory
03D8 E545           1269            MOV     A,MT1
03DA C2E0           1270            CLR     ACC.0           ;CLEAR BIT ONE
03DC 6404           1271            XRL     A,#4H
03DE 602C           1272            JZ      CR2
                    1273            ;
03E0 BF0202         1274    CRS:    CJNE    R7,#2,CRS1
03E3 8003           1275            SJMP    CRS2
03E5 BF0304         1276    CRS1:   CJNE    R7,#3,CR0
03E8 D17D           1277    CRS2:   ACALL   CL_1
03EA 8014           1278            SJMP    CR1
                    1279            ;
03EC AB83           1280    CR0:    MOV     R3,DPH          ;SAVE THE DPTR
03EE A982           1281            MOV     R1,DPL
03F0 A3             1282            INC     DPTR
03F1 745A           1283            MOV     A,#5AH
03F3 F0             1284            MOVX    @DPTR,A         ;Test external memory
03F4 E0             1285            MOVX    A,@DPTR
03F5 B45A08         1286            CJNE    A,#5AH,CR1
03F8 E4             1287            CLR     A
03F9 F0             1288            MOVX    @DPTR,A
                    1289    ;
                    1290    ;*****************************************************************************
                    1291    ;******* Skowronek alterations to programm EEPROM's in state of UV-EPROM's ***
                    1292    ;
                    1293    ;       CJNE    R3,#0E0H,CR0
                    1294    ;
                    1295    ;=== CH552 Replaced =====
                    1296    ;       CJNE    R3,#HIGH ROMADR-1,CR0   ;Stop the test at 8000H because
                    1297    ;       CJNE    R1,#LOW ROMADR-2,CR0    ;EEPROM starts here
                    1298    ;
03FA BB03EF         1299            CJNE    R3,#HIGH ERAMEND,CR0    ; Stop the test at 03FFH because
03FD B9FEEC         1300            CJNE    R1,#LOW ERAMEND-1,CR0   ; EXT-RAM end
BASIC52Q                                                                                                      PAGE 24

                    1301    ;========================
                    1302    ;
                    1303    ;*****************************************************************************
                    1304    ;
0400 BB0300         1305    CR1:    CJNE    R3,#03H,CR11    ;NEED THIS MUCH RAM
0403 4086           1306    CR11:   JC      CRST
0405 90010A         1307            MOV     DPTR,#MEMTOP    ;SAVE MEMTOP
0408 D103           1308            ACALL   S31DP2          ;SAVE MEMTOP AND SEED RCELL
040A D15C           1309            ACALL   CNEW            ;CLEAR THE MEMORY AND SET UP POINTERS
                    1310            ;
040C D16F           1311    CR2:    ACALL   RC1             ;SET UP STACKS IF NOT DONE
                    1312            ;
040E 121657         1313            LCALL   AXTAL0          ;DO THE CRYSTAL
0411 E545           1314            MOV     A,MT1           ;GET THE RESET BYTE
0413 B40503         1315            CJNE    A,#5,CR20
0416 124039         1316            LCALL   4039H
0419 500D           1317    CR20:   JNC     BG1             ;CHECK FOR 0,1,2,3, OR 4
041B 30E049         1318            JNB     ACC.0,BG3       ;NO RUN IF WRONG TYPE
041E 908010         1319            MOV     DPTR,#ROMADR+16
0421 E0             1320            MOVX    A,@DPTR         ;READ THE BYTE
0422 B45542         1321            CJNE    A,#55H,BG3
0425 020802         1322            LJMP    CRUN
                    1323    ;
                    1324    ;*****************************************************************************
                    1325    ;******* New baudrate detection **********************************************
                    1326    ;******* Wulf 3 alteration 1 *************************************************
                    1327    ;
                    1328    ;BG1:    CLR     A               ;DO BAUD RATE
                    1329    ;        MOV     R3,A
                    1330    ;        MOV     R1,A
                    1331    ;        MOV     R0,#4
                    1332    ;        JB      RXD,$           ;LOOP UNTIL A CHARACTER IS RECEIVED
                    1333    ;       ;
                    1334    ;BG2:    DJNZ    R0,$            ;FOUR CLOCKS, IN LOOP
                    1335    ;        CALL    DEC3211         ;NINE CLOCKS
                    1336    ;        MOV     R0,#2           ;ONE CLOCK
                    1337    ;        JNB     RXD,BG2         ;TWO CLOCKS, LOOP UNTIL DONE
                    1338    ;        JB      RXD,$           ;WAIT FOR STOP CHARACTER TO END
                    1339    ;        JNB     RXD,$
                    1340    ;
                    1341    ;*****************************************************************************
                    1342    ;******* New processor type detection ****************************************
                    1343    ;******* Wulf 4 **************************************************************
                    1344    ;
                    1345    ;-- comment out for AT98LP52 ---------------------------------------------
                    1346    ;
                    1347    ;BG1:   clr     a
                    1348    ;       mov     t2con,a
                    1349    ;       mov     TH2,#0FFh
                    1350    ;       mov     TL2,#0F8h
                    1351    ;       jb      rxd,$
                    1352    ;       mov     t2con,#5        ;Timer2 start
                    1353    ;       jnb     rxd,$
                    1354    ;       mov     t2con,a         ;Timer2 stop
                    1355    ;       jb      rxd,$
                    1356    ;       jnb     rxd,$
                    1357    ;       call    sercalc         ;r3=timer2 MSB default
                    1358    ;       ;
BASIC52Q                                                                                                      PAGE 25

                    1359    ;       cjne    a,ADCON,BG10    ;jump if A/D processor like 805x5
                    1360    ;BG14:  mov     a,S0RELL
                    1361    ;       cjne    a,#B9600,BG2    ;jump if not 805x7A
                    1362    ;       mov     a,r3
                    1363    ;       anl     S0RELH,a
                    1364    ;       mov     S0RELL,r1       ;start Baudratetimer 805X7A
                    1365    ;       sjmp    BG11
                    1366    ;       ;
                    1367    ;BG10:  cjne    r1,#B9600,BG12  ;jump if wrong fast baud rate
                    1368    ;BG11:  orl     PCON0,#080h     ;setb smod for fast mode
                    1369    ;       sjmp    BG13
                    1370    ;       ;
                    1371    ;BG12:  cjne    r1,#B4800,BG14  ;jump if wrong slow baudrate
                    1372    ;BG13:  setb    BD              ;enable baudrategenerator
                    1373    ;       sjmp    BG15
                    1374    ;       ;
                    1375    ;BG2:   mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1376    ;BG15:  CALL    RCL             ;LOAD THE TIMER
                    1377    
                    1378    ;
                    1379    ;-- insert for AT98LP52 --------------------------------------------------
                    1380    ;
                    1381    ;BG1:   mov     r6,#0           ; Speed Table Index
                    1382    ;       mov     r3,#0FFH        ; Set R3 = RCAP2H
                    1383    ;
                    1384    ;BG11:  mov     dptr,#SPEED_TBL ; Speed Table
                    1385    ;       mov     a,r6            ; Speed Table Index
                    1386    ;       movc    a,@a+dptr       ; Fetch Speed Table
                    1387    ;       inc     r6
                    1388    ;       jz      bg3             ; Table End, Use Last Speed
                    1389    ;
                    1390    ;       mov     r1,a            ; Set R1 = RCAP2L
                    1391    ;       mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1392    ;       call    RCL             ;LOAD THE TIMER
                    1393    ;
                    1394    ;       mov     dptr,#TEST_MSG  ; Put Test Message
                    1395    ;       mov     r7,#0           ; Message Text Index
                    1396    ;
                    1397    ;BG13:  mov     a,r7            ; Text Index
                    1398    ;       movc    a,@a+dptr       ; Fetch Message String
                    1399    ;       jz      BG14            ; String End ?
                    1400    ;       jnb     TI,$            ; Wait Until Transmmit End
                    1401    ;       clr     TI              ; Clear TX Flag
                    1402    ;       mov     SBUF,a          ; Output Character
                    1403    ;       inc     r7              ; Next Character
                    1404    ;       sjmp    BG13
                    1405    ;
                    1406    ;BG14:  jnb     RI,$            ; Wait Until Receive End
                    1407    ;       mov     a,SBUF          ; Get Receive Character
                    1408    ;       clr     RI              ; Reset Flag
                    1409    ;       anl     a,#07FH         ; Clear Bit-7
                    1410    ;       cjne    a,#'y',BG11     ; Ok?, Test Next Speed
                    1411    ;       sjmp    BG3
                    1412    ;
                    1413    ;SPEED_TBL:     db      0A0H    ; RCAP2H,L = FFA0H (19.2Kbps, X'TAL 29.4912MHz, Fast-Mode)
                    1414    ;               db      0B8H    ; RCAP2H,L = FFB8H (19.2Kbps, X'TAL 22.1184MHz, Fast-Mode)
                    1415    ;               db      0D0H    ; RCAP2H,L = FFD0H (19.2Kbbs, X'TAL 29.4912MHz, 8051-Mode)
                    1416    ;               db      0DCH    ; RCAP2H,L = FFDCH (19.2Kbps, X'TAL 22.1184MHz, 8051-Mode or
BASIC52Q                                                                                                      PAGE 26

                                                                                11.0592MHz, Fast-Mode)
                    1417    ;               db      00h     ; Table End
                    1418    
                    1419    ;-- CH552 Insert Start ---------------------------------------------------------
                    1420    ;===============================================================================
                    1421    ;  CH552 Set Fixed baudrate 19.23Kbps
                    1422    ;  RCAP2H,L = 65536 - (Fsys/16/Baud Rate) : When Fsys = 24MHz, bTMR_CLK=1,bT2_CLK=1
                    1423    ;===============================================================================
  FFB2              1424    baud19K equ     0ffb2h          ; RCAP2H,L Value of 19.23Kbps (FFB2H = 65458)
                    1425    ;
0428                1426    BG1:
0428 43C9C0         1427            orl             t2mod,#0C0H             ; Set bTMR_CLK, bT2_CLK ( Set Timer2 Clock, 
                                                                               MAX Speed = Fsys = 24MHz )
042B 7BFF           1428            mov             r3,#high baud19k        ; Set R3 = RCAP2H = FFH
042D 79B2           1429            mov             r1,#low baud19k         ; Set R1 = RCAP2L = B2H
042F 75C834         1430            mov             t2con,#34h              ; configure Timer2 as baudrate generator
0432 120885         1431            call    RCL                             ; LOAD THE TIMER
                    1432    
0435 8030           1433            sjmp    BG3
                    1434    
                    1435    ;===============================================================================
                    1436    ;  CH552 System Clock (Fsys) Up 6MHz -> 24MHz
                    1437    ;===============================================================================
0437                1438    setfsys:
0437 E5B9           1439            mov     a,CLOCK_CFG             ; Get CLOCK_CFG
0439 54F8           1440            anl     a,#0F8H                 ;  Clear MASK_SYS_CK_SEL
043B 4406           1441            orl     a,#006H                 ;  Set MASK_SYS_CK_SEL = 110B(24MHz)
                    1442    
043D 75A155         1443            mov     SAFE_MOD,#055H  ; Enter Safe_Mode Key-1
0440 75A1AA         1444            mov     SAFE_MOD,#0AAH  ; Enter Safe_Mode Key-2
                    1445    
0443 F5B9           1446            mov     CLOCK_CFG,a             ; Rewrite CLOCK_CFG
                    1447    
0445 75A100         1448            mov     SAFE_MOD,#00    ; Exit Safe_Mode
                    1449    
0448 22             1450            ret
                    1451    
0467                1452            org     0467h           ; Insert Dummy Space, 0467H = Original BG3 Address
                    1453    ;
                    1454    ;-- insert end --------------------------------------------------------------
                    1455    ;
                    1456    ;****** Original code from here **********************************************
                    1457    ;
0467 901FD3         1458    BG3:    MOV     DPTR,#S_N       ;GET THE MESSAGE
046A D1AD           1459            ACALL   CRP             ;PRINT IT
046C 02177F         1460            LJMP    CRAM
                    1461            ;
                    1462            ;***************************************************************
                    1463            ;
                    1464            ; CIPROG AND CPROG - Program a prom
                    1465            ;
                    1466            ;***************************************************************
                    1467            ;
046F 7F00           1468    PG8:    MOV     R7,#00H         ;PROGRAM ONE BYTE AT A TIME
0471 7E01           1469            MOV     R6,#01H
0473 7A7F           1470            MOV     R2,#HIGH ROMADR-1
0475 78FF           1471            MOV     R0,#LOW ROMADR-1;LOAD PROM ADDRESS
0477 91B5           1472            ACALL   PG101
BASIC52Q                                                                                                      PAGE 27

0479 0E             1473            INC     R6
047A E5CB           1474            MOV     A,RCAPH2
                    1475    ;       DB      0E5H            ;MOV A DIRECT OP CODE
                    1476    ;       DB      0CBH            ;ADDRESS OF R2CAP HIGH
047C 91B5           1477            ACALL   PG101
047E E5CA           1478            MOV     A,RCAPL2
                    1479    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    1480    ;       DB      0CAH            ;R2CAP LOW
0480 7E03           1481            MOV     R6,#3
0482 7909           1482            MOV     R1,#LOW MEMTOP-1
0484 7B01           1483            MOV     R3,#HIGH MEMTOP
0486 91B5           1484            ACALL   PG101           ;SAVE MEMTOP
0488 8029           1485            SJMP    PGR
                    1486    ;
                    1487    ;
                    1488    ;*****************************************************************************
                    1489    ;****** Skowronek alterations to programm EEPROM's in state of UV-EPROM's ****
                    1490    ;****** Support the "PGM" statement was added by D. Wulf *********************
                    1491    ;****** Disable Intel programming and code optimize by H.-J. Boehling ********
                    1492    ;
                    1493    ;CIPROG: MOV    DPTR,#IPROGS    ;LOAD IPROG LOCATION
                    1494    ;       SETB    INTELB
                    1495    ;       SJMP    CPROG1          ;GO DO PROG
                    1496    ;       ;
                    1497    ;CPROG: MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1498    ;       CLR     INTELB
                    1499    ;       ;
                    1500    ;CPROG1: ACALL  LD_T            ;LOAD THE TIMER
                    1501    ;       CLR     PROMV           ;TURN ON THE PROM VOLTAGE
                    1502    ;       CALL    DELTST          ;SEE IF A CR
                    1503    ;       JNZ     PG8             ;SAVE TIMER IF SO
                    1504    ;       MOV     R4,#0FEH
                    1505    ;       SETB    INBIT
                    1506    ;       ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
                    1507    ;       CALL    TEMPD           ;SAVE THE ADDRESS
                    1508    ;       MOV     A,R4            ;GET COUNT
                    1509    ;       CPL     A
                    1510    ;       CALL    TWO_R2          ;PUT IT ON THE STACK
                    1511    ;       CALL    FP_BASE7        ;OUTPUT IT
                    1512    ;       ACALL   CCAL            ;GET THE PROGRAM
                    1513    ;       ACALL   CRLF            ;DO CRLF
                    1514    ;       MOV     R0,TEMP4        ;GET ADDRESS
                    1515    ;       MOV     R2,TEMP5
                    1516    ;       MOV     A,#55H          ;LOAD SIGNIFIER
                    1517    ;       INC     R6              ;LOAD LEN + 1
                    1518    ;       CJNE    R6,#00,CPROG2
                    1519    ;       INC     R7
                    1520    ;CPROG2: ACALL   PG102
                    1521    ;
                    1522    ;PGR:   SETB    PROMV
                    1523    ;       AJMP    C_K
                    1524    ;
                    1525    ;PG1:   MOV     P2,R3           ;GET THE BYTE TO PROGRAM
                    1526    ;       MOVX    A,@R1
                    1527    ;PG101:  LCALL   INC3210         ;BUMP POINTERS
                    1528    ;PG102:  MOV     R5,#1           ;SET UP INTELLIGENT COUMTER
                    1529    ;
                    1530    ;PG2:   MOV     R4,A            ;SAVE THE BYTE IN R4
BASIC52Q                                                                                                      PAGE 28

                    1531    ;       ACALL   PG7             ;PROGRAM THE BYTE
                    1532    ;       ACALL   PG9
                    1533    ;       JB      INTELB,PG4      ;SEE IF INTELLIGENT PROGRAMMING
                    1534    ;
                    1535    ;PG3:   XRL     A,R4
                    1536    ;       JNZ     PG6             ;ERROR IF NOT THE SAME
                    1537    ;       CALL    DEC76           ;BUMP THE COUNTERS
                    1538    ;       JNZ     PG1             ;LOOP IF NOT DONE
                    1539    ;       ANL     PSW,#11100111B  ;INSURE RB0
                    1540    ;PG31:   RET
                    1541    ;
                    1542    ;PG4:   XRL     A,R4            ;SEE IF PROGRAMMED
                    1543    ;       JNZ     PG5             ;JUMP IF NOT
                    1544    ;       MOV     A,R4            ;GET THE DATA BACK
                    1545    ;       ACALL   PG7             ;PROGRAM THE LOCATION
                    1546    ;PG41:   ACALL   ZRO             ;AGAIN
                    1547    ;       ACALL   ZRO             ;AND AGAIN
                    1548    ;       ACALL   ZRO             ;AND AGAIN
                    1549    ;       DJNZ    R5,PG41         ;KEEP DOING IT
                    1550    ;       ACALL   PG9             ;RESET PROG
                    1551    ;       SJMP    PG3             ;FINISH THE LOOP
                    1552    ;
                    1553    ;PG5:   INC     R5              ;BUMP THE COUNTER
                    1554    ;       MOV     A,R4            ;GET THE BYTE
                    1555    ;       CJNE    R5,#25,PG2      ;SEE IF TRIED 25 TIMES
                    1556    ;
                    1557    ;PG6:   SETB    PROMV           ;TURN OFF PROM VOLTAGE
                    1558    ;       MOV     PSW,#0          ;INSURE RB0
                    1559    ;       JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
                    1560    ;       MOV     DPTR,#E16X      ;PROGRAMMING ERROR
                    1561    ;
                    1562    ;ERRLK: LJMP    ERROR           ;PROCESS THE ERROR
                    1563    ;
                    1564    ;PG7:   MOV     P0,R0           ;SET UP THE PORTS
                    1565    ;       MOV     P2,R2           ;LATCH LOW ORDER ADDRESS
                    1566    ;       ACALL   PG11            ;DELAY FOR 8748/9
                    1567    ;       CLR     ALED
                    1568    ;       MOV     P0,A            ;PUT DATA ON THE PORT
                    1569    ;       ;
                    1570    ;ZRO:   NOP                     ;SETTLEING TIME + FP ZERO
                    1571    ;       NOP
                    1572    ;       NOP
                    1573    ;       NOP
                    1574    ;       NOP
                    1575    ;       NOP
                    1576    ;       ACALL   PG11            ;DELAY A WHILE
                    1577    ;       CLR     PROMP           ;START PROGRAMMING
                    1578    ;       ACALL   TIMER_LOAD      ;START THE TIMER
                    1579    ;       JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
                    1580    ;       RET                     ;EXIT
                    1581    ;
                    1582    ;PG9:   SETB    PROMP
                    1583    ;       ACALL   PG11            ;DELAY FOR A WHILE
                    1584    ;       JNB     P3.2,$          ;LOOP FOR EEPROMS
                    1585    ;       MOV     P0,#0FFH
                    1586    ;       CLR     P3.7            ;LOWER READ
                    1587    ;       ACALL   PG11
                    1588    ;       MOV     A,P0            ;READ THE PORT
BASIC52Q                                                                                                      PAGE 29

                    1589    ;       SETB    P3.7
                    1590    ;       SETB    ALED
                    1591    ;       RET
                    1592    ;
                    1593    ;PG11:  MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
                    1594    ;       DJNZ    TEMP5,$
                    1595    ;       RET
                    1596    ;
                    1597    ;       ;**************************************************************
                    1598    ;       ;
                    1599    ;PGU:   ;PROGRAM A PROM FOR THE USER
                    1600    ;       ;
                    1601    ;       ;**************************************************************
                    1602    ;
                    1603    ;       CLR     PROMV           ;TURN ON THE VOLTAGE
                    1604    ;       MOV     PSW,#00011000B  ;SELECT RB3
                    1605    ;       ACALL   PG1             ;DO IT
                    1606    ;       SETB    PROMV           ;TURN IT OFF
                    1607    ;       RET
                    1608    ;
                    1609    ;****** alteredet code starts here: ******************************************
                    1610    ;
048A 900128         1611    CPROG:  MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1612            ;
048D B182           1613    CPROG1: ACALL   LD_T            ;LOAD THE TIMER
048F 120EE1         1614            CALL    DELTST          ;SEE IF A CR
0492 70DB           1615            JNZ     PG8             ;SAVE TIMER IF SO
0494 7CFE           1616            MOV     R4,#0FEH
0496 D21D           1617            SETB    INBIT
0498 B15B           1618            ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
049A 121854         1619            CALL    TEMPD           ;SAVE THE ADDRESS
049D EC             1620            MOV     A,R4            ;GET COUNT
049E F4             1621            CPL     A
049F 1214B1         1622            CALL    TWO_R2          ;PUT IT ON THE STACK
04A2 12197D         1623            CALL    FP_BASE7        ;OUTPUT IT
04A5 B11C           1624            ACALL   CCAL            ;GET THE PROGRAM
04A7 D1A5           1625            ACALL   CRLF            ;DO CRLF
04A9 A80E           1626            MOV     R0,TEMP4        ;GET ADDRESS
04AB AA0F           1627            MOV     R2,TEMP5
04AD 7455           1628            MOV     A,#55H          ;LOAD SIGNIFIER
04AF 0E             1629            INC     R6              ;LOAD LEN + 1
04B0 0F             1630            INC     R7
04B1 91C3           1631    CPROG2: ACALL   PG2
                    1632            ;
04B3 A140           1633    PGR:    AJMP    C_K             ;Exit to command mode
                    1634            ;
04B5 0F             1635    PG101:  INC     R7
04B6 BE0007         1636            CJNE    R6,#0,PG4
04B9 1F             1637            DEC     R7
04BA 8004           1638            SJMP    PG4
                    1639            ;
04BC 0F             1640    PG10:   INC     R7
                    1641            ;
04BD 8BA0           1642    PG1:    MOV     P2,R3           ;GET THE BYTE TO PROGRAM
04BF E3             1643            MOVX    A,@R1
04C0 121576         1644    PG4:    LCALL   INC3210         ;BUMP POINTERS
                    1645            ;
04C3 91D9           1646    PG2:    ACALL   PG7             ;Write the byte
BASIC52Q                                                                                                      PAGE 30

04C5 7004           1647            JNZ     PG5             ;exit if error
04C7 DEF4           1648            DJNZ    R6,PG1
04C9 DFF2           1649            DJNZ    R7,PG1          ;LOOP IF NOT DONE
                    1650            ;
04CB 53D0E7         1651    PG5:    ANL     PSW,#11100111B  ;INSURE RB0
04CE 6027           1652            JZ      PG31            ;Jump if none error
                    1653            ;
04D0 302F24         1654    PG6:    JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
04D3 901F9A         1655            MOV     DPTR,#E16X      ;PROGRAMMING ERROR
04D6 02188F         1656    ERRLK:  LJMP    ERROR           ;PROCESS THE ERROR
                    1657            ;
                    1658            ;
04D9 FC             1659    PG7:    MOV     R4,A            ;SAVE THE BYTE IN R4 for error detect
04DA 8A83           1660            mov     dph,r2          ;load data pointer with eeprom address
04DC 8882           1661            mov     dpl,r0
04DE F0             1662            movx    @dptr,a         ;write the byte
04DF 7D             1663            DB      07DH            ;mov     r5,#0
                    1664            ;
04E0 00             1665    ZRO:    NOP
04E1 00             1666            NOP                     ;SETTLEING TIME + FP ZERO
04E2 00             1667            NOP                     ;Atenttion. This 6 NOP's a not only
04E3 00             1668            NOP                     ;for settleing time, it is also the
04E4 00             1669            NOP                     ;floating point zero!
04E5 00             1670            NOP
04E6 750F0C         1671            MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
04E9 D50FFD         1672            DJNZ    TEMP5,$
04EC B12D           1673            ACALL   TIMER_LOAD      ;START THE TIMER
04EE 308FFD         1674            JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
04F1 E0             1675            movx    A,@DPTR         ;Read back for error detect
04F2 6C             1676            xrl     A,R4            ;Test for error
04F3 6002           1677            jz      PG31
04F5 DDE9           1678            djnz    r5,ZRO
04F7 22             1679    PG31:   RET
                    1680            ;
                    1681            ;**************************************************************
                    1682            ;
04F8                1683    PGU:    ;PROGRAM A PROM FOR THE USER (statement 'PGM')
                    1684            ;
                    1685            ;**************************************************************
                    1686            ;
04F8 75D018         1687            MOV     PSW,#00011000B  ;SELECT RB3
04FB BE00BE         1688            CJNE    R6,#0,PG10
04FE 80BD           1689            SJMP    PG1
                    1690    ;
                    1691    ;*****************************************************************************
                    1692    ;****** The new command "ERASE" to fill a EEPROM with 0FFH *******************
                    1693    ;****** Boehling 3 ***********************************************************
                    1694    ;
0500 7F40           1695    CERASE: mov     R7,#40H                 ;Erase 16K byte
0502 7E00           1696            mov     R6,#00H
0504 7A7F           1697            mov     R2,#HIGH ROMADR-1       ;Startaddress EEPROM
0506 78FF           1698            mov     R0,#LOW ROMADR-1
0508 900128         1699            mov     DPTR,#PROGS             ;Point to EEPROM timeing
050B B182           1700            acall   LD_T                    ;Load the timer
                    1701            ;
050D 121576         1702    ERA1:   lcall   INC3210                 ;Bump pointers
0510 74FF           1703            mov     A,#0FFH                 ;Fill the EEPROM with 0FFH
0512 91D9           1704            acall   PG7                     ;Write the byte
BASIC52Q                                                                                                      PAGE 31

0514 70BA           1705            jnz     PG6                     ;Exit if error
0516 DEF5           1706            DJNZ    R6,ERA1
0518 DFF3           1707            DJNZ    R7,ERA1                 ;Do the loop
051A A140           1708            ajmp    C_K                     ;Exit to command mode
                    1709    ;
                    1710    ;*****************************************************************************
                    1711    ;
                    1712    ;****** continue with original code: *****************************************
                    1713            ;
                    1714            ;*************************************************************
                    1715            ;
051C                1716    CCAL:   ; Set up for prom moves
                    1717            ; R3:R1 gets source
                    1718            ; R7:R6 gets # of bytes
                    1719            ;
                    1720            ;*************************************************************
                    1721            ;
051C B18A           1722            ACALL   GETEND          ;GET THE LAST LOCATION
051E A3             1723            INC     DPTR            ;BUMP TO LOAD EOF
051F AB13           1724            MOV     R3,BOFAH
0521 A914           1725            MOV     R1,BOFAL        ;RESTORE START
0523 C3             1726            CLR     C               ;PREPARE FOR SUBB
0524 E582           1727            MOV     A,DPL           ;SUB DPTR - BOFA > R7:R6
0526 99             1728            SUBB    A,R1
0527 FE             1729            MOV     R6,A
0528 E583           1730            MOV     A,DPH
052A 9B             1731            SUBB    A,R3
052B FF             1732            MOV     R7,A
052C 22             1733    CCAL1:  RET
                    1734            ;
                    1735            ;**************************************************************
                    1736            ;
052D                1737    TIMER_LOAD:; Load the timer
                    1738            ;
                    1739            ;*************************************************************
                    1740            ;
052D B12C           1741            ACALL   CCAL1           ;DELAY FOUR CLOCKS
052F                1742    TIMER_LOAD1:
052F C28E           1743            CLR     TR1             ;STOP IT WHILE IT'S LOADED
0531 85408D         1744            MOV     TH1,T_HH
0534 85418B         1745            MOV     TL1,T_LL
0537 C28F           1746            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
0539 D28E           1747            SETB    TR1             ;START IT NOW
053B 22             1748            RET
                    1749            ;
                    1750            ;***************************************************************
                    1751            ;
053C                1752    CROM:   ; The command action routine - ROM - Run out of rom
                    1753            ;
                    1754            ;***************************************************************
                    1755            ;
053C C217           1756            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
053E B143           1757            ACALL   RO1             ;DO IT
                    1758            ;
0540 021092         1759    C_K:    LJMP    CL3             ;EXIT
                    1760            ;
                    1761    ;RO1:    CALL    INTGER         ;SEE IF INTGER PRESENT
                    1762    ;        MOV     R4,R0B0        ;SAVE THE NUMBER
BASIC52Q                                                                                                      PAGE 32

                    1763    ;        JNC     $+4
                    1764    ;        MOV     R4,#01H        ;ONE IF NO INTEGER PRESENT
                    1765    ;       ACALL   ROMFD           ;FIND THE PROGRAM
                    1766    ;
0543 120EE1         1767    RO1:    CALL    DELTST
0546 7C01           1768            MOV     R4,#1
0548 5004           1769            JNC     RO11
054A 120E8E         1770            CALL    ONE
054D FC             1771            MOV     R4,A
                    1772    ;
054E B15B           1773    RO11:   ACALL   ROMFD
0550 BC0011         1774            CJNE    R4,#0,RFX       ;EXIT IF R4 <> 0
0553 A3             1775            INC     DPTR            ;BUMP PAST TAG
0554 858313         1776            MOV     BOFAH,DPH       ;SAVE THE ADDRESS
0557 858214         1777            MOV     BOFAL,DPL
055A 22             1778            RET
                    1779            ;
055B 908010         1780    ROMFD:  MOV     DPTR,#ROMADR+16 ;START OF USER PROGRAM
                    1781            ;
055E E0             1782    RF1:    MOVX    A,@DPTR         ;GET THE BYTE
055F B45509         1783            CJNE    A,#55H,RF3      ;SEE IF PROPER TAG
0562 DC01           1784            DJNZ    R4,RF2          ;BUMP COUNTER
                    1785            ;
0564 22             1786    RFX:    RET                     ;DPTR HAS THE START ADDRESS
                    1787            ;
0565 A3             1788    RF2:    INC     DPTR            ;BUMP PAST TAG
0566 B1AC           1789            ACALL   G5
0568 A3             1790            INC     DPTR            ;BUMP TO NEXT PROGRAM
0569 80F3           1791            SJMP    RF1             ;DO IT AGAIN
                    1792            ;
056B 101DF6         1793    RF3:    JBC     INBIT,RFX       ;EXIT IF SET
                    1794            ;
056E 901FC9         1795    NOGO:   MOV     DPTR,#NOROM
0571 81D6           1796            AJMP    ERRLK
                    1797            ;
                    1798            ;***************************************************************
                    1799            ;
0573                1800    L20DPI: ; load R2:R0 with the location the DPTR is pointing to
                    1801            ;
                    1802            ;***************************************************************
                    1803            ;
0573 E0             1804            MOVX    A,@DPTR
0574 FA             1805            MOV     R2,A
0575 A3             1806            INC     DPTR
0576 E0             1807            MOVX    A,@DPTR
0577 F8             1808            MOV     R0,A
0578 22             1809            RET                     ;DON'T BUMP DPTR
                    1810            ;
                    1811            ;***************************************************************
                    1812            ;
0579                1813    X31DP:  ; swap R3:R1 with DPTR
                    1814            ;
                    1815            ;***************************************************************
                    1816            ;
0579 CB             1817            XCH     A,R3
057A C583           1818            XCH     A,DPH
057C CB             1819            XCH     A,R3
057D C9             1820            XCH     A,R1
BASIC52Q                                                                                                      PAGE 33

057E C582           1821            XCH     A,DPL
0580 C9             1822            XCH     A,R1
0581 22             1823            RET
                    1824            ;
                    1825            ;***************************************************************
                    1826            ;
0582                1827    LD_T:   ; Load the timer save location with the value the DPTR is
                    1828            ; pointing to.
                    1829            ;
                    1830            ;****************************************************************
                    1831            ;
0582 E0             1832            MOVX    A,@DPTR
0583 F540           1833            MOV     T_HH,A
0585 A3             1834            INC     DPTR
0586 E0             1835            MOVX    A,@DPTR
0587 F541           1836            MOV     T_LL,A
0589 22             1837            RET
                    1838            ;
                    1839            ;
                    1840            ;***************************************************************
                    1841            ;
                    1842            ;GETLIN - FIND THE LOCATION OF THE LINE NUMBER IN R3:R1
                    1843            ;         IF ACC = 0 THE LINE WAS NOT FOUND I.E. R3:R1
                    1844            ;         WAS TOO BIG, ELSE ACC <> 0 AND THE DPTR POINTS
                    1845            ;         AT THE LINE THAT IS GREATER THAN OR EQUAL TO THE
                    1846            ;         VALUE IN R3:R1.
                    1847            ;
                    1848            ;***************************************************************
                    1849            ;
058A D229           1850    GETEND: SETB    ENDBIT          ;GET THE END OF THE PROGRAM
                    1851            ;
058C 120E9B         1852    GETLIN: CALL    DP_B            ;GET BEGINNING ADDRESS
                    1853            ;
058F 120AA4         1854    G1:     CALL    B_C
0592 6012           1855            JZ      G3              ;EXIT WITH A ZERO IN A IF AT END
0594 A3             1856            INC     DPTR            ;POINT AT THE LINE NUMBER
0595 20290A         1857            JB      ENDBIT,G2       ;SEE IF WE WANT TO FIND THE END
0598 B1CC           1858            ACALL   DCMPX           ;SEE IF (DPTR) = R3:R1
059A B1C2           1859            ACALL   DECDP           ;POINT AT LINE COUNT
059C E0             1860            MOVX    A,@DPTR         ;PUT LINE LENGTH INTO ACC
059D 202A06         1861            JB      UBIT,G3         ;EXIT IF EQUAL
05A0 4004           1862            JC      G3              ;SEE IF LESS THAN OR ZERO
                    1863            ;
05A2 B1DE           1864    G2:     ACALL   ADDPTR          ;ADD IT TO DPTR
05A4 80E9           1865            SJMP    G1              ;LOOP
                    1866            ;
05A6 C229           1867    G3:     CLR     ENDBIT          ;RESET ENDBIT
05A8 22             1868            RET                     ;EXIT
                    1869            ;
05A9 900200         1870    G4:     MOV     DPTR,#PSTART    ;DO RAM
                    1871            ;
05AC D229           1872    G5:     SETB    ENDBIT
05AE 80DF           1873            SJMP    G1              ;NOW DO TEST
                    1874            ;
                    1875            ;***************************************************************
                    1876            ;
                    1877            ; LDPTRI - Load the DATA POINTER with the value it is pointing
                    1878            ;          to - DPH = (DPTR) , DPL = (DPTR+1)
BASIC52Q                                                                                                      PAGE 34

                    1879            ;
                    1880            ; acc gets wasted
                    1881            ;
                    1882            ;***************************************************************
                    1883            ;
05B0 E0             1884    LDPTRI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05B1 C0E0           1885            PUSH    ACC             ;SAVE IT
05B3 A3             1886            INC     DPTR            ;BUMP THE POINTER
05B4 E0             1887            MOVX    A,@DPTR         ;GET THE LOW BYTE
05B5 F582           1888            MOV     DPL,A           ;PUT IT IN DPL
05B7 D083           1889            POP     DPH             ;GET THE HIGH BYTE
05B9 22             1890            RET                     ;GO BACK
                    1891            ;
                    1892            ;***************************************************************
                    1893            ;
                    1894            ;L31DPI - LOAD R3 WITH (DPTR) AND R1 WITH (DPTR+1)
                    1895            ;
                    1896            ;ACC GETS CLOBBERED
                    1897            ;
                    1898            ;***************************************************************
                    1899            ;
05BA E0             1900    L31DPI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05BB FB             1901            MOV     R3,A            ;PUT IT IN THE REG
05BC A3             1902            INC     DPTR            ;BUMP THE POINTER
05BD E0             1903            MOVX    A,@DPTR         ;GET THE NEXT BYTE
05BE F9             1904            MOV     R1,A            ;SAVE IT
05BF 22             1905            RET
                    1906            ;
                    1907            ;***************************************************************
                    1908            ;
                    1909            ;DECDP - DECREMENT THE DATA POINTER - USED TO SAVE SPACE
                    1910            ;
                    1911            ;***************************************************************
                    1912            ;
05C0 B1C2           1913    DECDP2: ACALL   DECDP
                    1914            ;
05C2 C582           1915    DECDP:  XCH     A,DPL           ;GET DPL
05C4 7002           1916            JNZ     DECDP1          ;BUMP IF ZERO
05C6 1583           1917            DEC     DPH
05C8 14             1918    DECDP1: DEC     A               ;DECREMENT IT
05C9 C582           1919            XCH     A,DPL           ;GET A BACK
05CB 22             1920            RET                     ;EXIT
                    1921            ;
                    1922            ;***************************************************************
                    1923            ;
                    1924            ;DCMPX - DOUBLE COMPARE - COMPARE (DPTR) TO R3:R1
                    1925            ;R3:R1 - (DPTR) = SET CARRY FLAG
                    1926            ;
                    1927            ;IF R3:R1 > (DPTR) THEN C = 0
                    1928            ;IF R3:R1 < (DPTR) THEN C = 1
                    1929            ;IF R3:R1 = (DPTR) THEN C = 0
                    1930            ;
                    1931            ;***************************************************************
                    1932            ;
05CC C22A           1933    DCMPX:  CLR     UBIT            ;ASSUME NOT EQUAL
05CE E0             1934            MOVX    A,@DPTR         ;GET THE BYTE
05CF B5030A         1935            CJNE    A,R3B0,D1       ;IF A IS GREATER THAN R3 THEN NO CARRY
                    1936                                    ;WHICH IS R3<@DPTR = NO CARRY AND
BASIC52Q                                                                                                      PAGE 35

                    1937                                    ;R3>@DPTR CARRY IS SET
05D2 A3             1938            INC     DPTR            ;BUMP THE DATA POINTER
05D3 E0             1939            MOVX    A,@DPTR         ;GET THE BYTE
05D4 B1C2           1940            ACALL   DECDP           ;PUT DPTR BACK
05D6 B50103         1941            CJNE    A,R1B0,D1       ;DO THE COMPARE
05D9 B3             1942            CPL     C               ;FLIP CARRY
                    1943            ;
05DA B22A           1944            CPL     UBIT            ;SET IT
05DC B3             1945    D1:     CPL     C               ;GET THE CARRY RIGHT
05DD 22             1946            RET                     ;EXIT
                    1947            ;
                    1948            ;***************************************************************
                    1949            ;
                    1950            ; ADDPTR - Add acc to the dptr
                    1951            ;
                    1952            ; acc gets wasted
                    1953            ;
                    1954            ;***************************************************************
                    1955            ;
05DE 2582           1956    ADDPTR: ADD     A,DPL           ;ADD THE ACC TO DPL
05E0 F582           1957            MOV     DPL,A           ;PUT IT IN DPL
05E2 5002           1958            JNC     ADDPTR1         ;JUMP IF NO CARRY
05E4 0583           1959            INC     DPH             ;BUMP DPH
05E6 22             1960    ADDPTR1:RET                     ;EXIT
                    1961            ;
                    1962            ;*************************************************************
                    1963            ;
05E7                1964    LCLR:   ; Set up the storage allocation
                    1965            ;
                    1966            ;*************************************************************
                    1967            ;
05E7 D19A           1968            ACALL   ICLR            ;CLEAR THE INTERRUPTS
05E9 B1A9           1969            ACALL   G4              ;PUT END ADDRESS INTO DPTR
05EB 7406           1970            MOV     A,#6            ;ADJUST MATRIX SPACE
05ED B1DE           1971            ACALL   ADDPTR          ;ADD FOR PROPER BOUNDS
05EF B179           1972            ACALL   X31DP           ;PUT MATRIX BOUNDS IN R3:R1
05F1 900108         1973            MOV     DPTR,#MT_ALL    ;SAVE R3:R1 IN MATRIX FREE SPACE
05F4 D105           1974            ACALL   S31DP           ;DPTR POINTS TO MEMTOP
05F6 B1BA           1975            ACALL   L31DPI          ;LOAD MEMTOP INTO R3:R1
05F8 900122         1976            MOV     DPTR,#STR_AL    ;GET MEMORY ALLOCATED FOR STRINGS
05FB B1B0           1977            ACALL   LDPTRI
05FD 120A02         1978            CALL    DUBSUB          ;R3:R1 = MEMTOP - STRING ALLOCATION
0600 900104         1979            MOV     DPTR,#VARTOP    ;SAVE R3:R1 IN VARTOP
                    1980            ;
                    1981            ; FALL THRU TO S31DP2
                    1982            ;
                    1983            ;***************************************************************
                    1984            ;
                    1985            ;S31DP - STORE R3 INTO (DPTR) AND R1 INTO (DPTR+1)
                    1986            ;
                    1987            ;ACC GETS CLOBBERED
                    1988            ;
                    1989            ;***************************************************************
                    1990            ;
0603 D105           1991    S31DP2: ACALL   S31DP           ;DO IT TWICE
                    1992            ;
0605 EB             1993    S31DP:  MOV     A,R3            ;GET R3 INTO ACC
0606 F0             1994            MOVX    @DPTR,A         ;STORE IT
BASIC52Q                                                                                                      PAGE 36

0607 A3             1995            INC     DPTR            ;BUMP DPTR
0608 E9             1996            MOV     A,R1            ;GET R1
0609 F0             1997            MOVX    @DPTR,A         ;STORE IT
060A A3             1998            INC     DPTR            ;BUMP IT AGAIN TO SAVE PROGRAM SPACE
060B 22             1999            RET                     ;GO BACK
                    2000            ;
                    2001            ;
                    2002            ;***************************************************************
                    2003            ;
060C                2004    STRING: ; Allocate memory for strings
                    2005            ;
                    2006            ;***************************************************************
                    2007            ;
060C 120E85         2008            LCALL   TWO             ;R3:R1 = NUMBER, R2:R0 = LEN
060F 900122         2009            MOV     DPTR,#STR_AL    ;SAVE STRING ALLOCATION
0612 D105           2010            ACALL   S31DP
0614 0E             2011            INC     R6              ;BUMP
0615 8E3F           2012            MOV     S_LEN,R6        ;SAVE STRING LENGTH
0617 C164           2013            AJMP    RCLEAR          ;CLEAR AND SET IT UP
                    2014            ;
                    2015            ;***************************************************************
                    2016            ;
                    2017            ; F_VAR - Find  the variable in symbol table
                    2018            ;         R7:R6 contain the variable name
                    2019            ;         If not found create a zero entry and set the carry
                    2020            ;         R2:R0 has the address of variable on return
                    2021            ;
                    2022            ;***************************************************************
                    2023            ;
0619 900104         2024    F_VAR:  MOV     DPTR,#VARTOP    ;PUT VARTOP IN DPTR
061C B1B0           2025            ACALL   LDPTRI
061E B1C0           2026            ACALL   DECDP2          ;ADJUST DPTR FOR LOOKUP
                    2027            ;
0620 E0             2028    F_VAR0: MOVX    A,@DPTR         ;LOAD THE VARIABLE
0621 6020           2029            JZ      F_VAR2          ;TEST IF AT THE END OF THE TABLE
0623 A3             2030            INC     DPTR            ;BUMP FOR NEXT BYTE
0624 B5070F         2031            CJNE    A,R7B0,F_VAR1   ;SEE IF MATCH
0627 E0             2032            MOVX    A,@DPTR         ;LOAD THE NAME
0628 B5060B         2033            CJNE    A,R6B0,F_VAR1
                    2034            ;
                    2035            ; Found the variable now adjust and put in R2:R0
                    2036            ;
062B E582           2037    DLD:    MOV     A,DPL           ;R2:R0 = DPTR-2
062D 9402           2038            SUBB    A,#2
062F F8             2039            MOV     R0,A
0630 E583           2040            MOV     A,DPH
0632 9400           2041            SUBB    A,#0            ;CARRY IS CLEARED
0634 FA             2042            MOV     R2,A
0635 22             2043            RET
                    2044            ;
0636 E582           2045    F_VAR1: MOV     A,DPL           ;SUBTRACT THE STACK SIZE+ADJUST
0638 C3             2046            CLR     C
0639 9409           2047            SUBB    A,#STESIZ
063B F582           2048            MOV     DPL,A           ;RESTORE DPL
063D 50E1           2049            JNC     F_VAR0
063F 1583           2050            DEC     DPH
0641 80DD           2051            SJMP    F_VAR0          ;CONTINUE COMPARE
                    2052            ;
BASIC52Q                                                                                                      PAGE 37

                    2053            ;
                    2054            ; Add the entry to the symbol table
                    2055            ;
0643 120DEF         2056    F_VAR2: LCALL   R76S            ;SAVE R7 AND R6
0646 C3             2057            CLR     C
0647 D12B           2058            ACALL   DLD             ;BUMP THE POINTER TO GET ENTRY ADDRESS
                    2059            ;
                    2060            ; Adjust pointer and save storage allocation
                    2061            ; and make sure we aren't wiping anything out
                    2062            ; First calculate new storage allocation
                    2063            ;
0649 E8             2064            MOV     A,R0
064A 9406           2065            SUBB    A,#STESIZ-3     ;NEED THIS MUCH RAM
064C F9             2066            MOV     R1,A
064D EA             2067            MOV     A,R2
064E 9400           2068            SUBB    A,#0
0650 FB             2069            MOV     R3,A
                    2070            ;
                    2071            ; Now save the new storage allocation
                    2072            ;
0651 900106         2073            MOV     DPTR,#ST_ALL
0654 D105           2074            CALL    S31DP           ;SAVE STORAGE ALLOCATION
                    2075            ;
                    2076            ; Now make sure we didn't blow it, by wiping out MT_ALL
                    2077            ;
0656 B1CC           2078            ACALL   DCMPX           ;COMPARE STORAGE ALLOCATION
0658 4032           2079            JC      CCLR3           ;ERROR IF CARRY
065A D3             2080            SETB    C               ;DID NOT FIND ENTRY
065B 22             2081            RET                     ;EXIT IF TEST IS OK
                    2082            ;
                    2083            ;***************************************************************
                    2084            ;
                    2085            ; Command action routine - NEW
                    2086            ;
                    2087            ;***************************************************************
                    2088            ;
065C 900200         2089    CNEW:   MOV     DPTR,#PSTART    ;SAVE THE START OF PROGRAM
065F 7401           2090            MOV     A,#EOF          ;END OF FILE
0661 F0             2091            MOVX    @DPTR,A         ;PUT IT IN MEMORY
                    2092            ;
                    2093            ; falls thru
                    2094            ;
                    2095            ;*****************************************************************
                    2096            ;
                    2097            ; The statement action routine - CLEAR
                    2098            ;
                    2099            ;*****************************************************************
                    2100            ;
0662 C215           2101    CNEW1:  CLR     LINEB           ;SET UP FOR RUN AND GOTO
                    2102            ;
0664 B1E7           2103    RCLEAR: ACALL   LCLR            ;CLEAR THE INTERRUPTS, SET UP MATRICES
0666 90010A         2104            MOV     DPTR,#MEMTOP    ;PUT MEMTOP IN R3:R1
0669 B1BA           2105            ACALL   L31DPI
066B B1A9           2106            ACALL   G4              ;DPTR GETS END ADDRESS
066D D17D           2107            ACALL   CL_1            ;CLEAR THE MEMORY
                    2108            ;
066F 9000FE         2109    RC1:    MOV     DPTR,#STACKTP   ;POINT AT CONTROL STACK TOP
0672 E4             2110            CLR     A               ;CONTROL UNDERFLOW
BASIC52Q                                                                                                      PAGE 38

                    2111            ;
0673 F0             2112    RC2:    MOVX    @DPTR,A         ;SAVE IN MEMORY
0674 7511FE         2113            MOV     CSTKA,#STACKTP
0677 7509FE         2114            MOV     ASTKA,#STACKTP
067A C217           2115            CLR     CONB            ;CAN'T CONTINUE
067C 22             2116            RET
                    2117            ;
                    2118            ;***************************************************************
                    2119            ;
                    2120            ; Loop until the memory is cleared
                    2121            ;
                    2122            ;***************************************************************
                    2123            ;
067D A3             2124    CL_1:   INC     DPTR            ;BUMP MEMORY POINTER
067E E4             2125            CLR     A               ;CLEAR THE MEMORY
067F F0             2126            MOVX    @DPTR,A         ;CLEAR THE RAM
0680 E0             2127            MOVX    A,@DPTR         ;READ IT
0681 7009           2128            JNZ     CCLR3           ;MAKE SURE IT IS CLEARED
0683 EB             2129            MOV     A,R3            ;GET POINTER FOR COMPARE
0684 B583F6         2130            CJNE    A,DPH,CL_1      ;SEE TO LOOP
0687 E9             2131            MOV     A,R1            ;NOW TEST LOW BYTE
0688 B582F2         2132            CJNE    A,DPL,CL_1
                    2133            ;
068B 22             2134    CL_2:   RET
                    2135            ;
068C 0215B5         2136    CCLR3:  JMP     TB              ;ALLOCATED MEMORY DOESN'T EXSIST
                    2137            ;
                    2138            ;**************************************************************
                    2139            ;
068F                2140    SCLR:   ;Entry point for clear return
                    2141            ;
                    2142            ;**************************************************************
                    2143            ;
068F 120EE1         2144            CALL    DELTST          ;TEST FOR A CR
0692 50D0           2145            JNC     RCLEAR
0694 120ED7         2146            CALL    GCI1            ;BUMP THE TEST POINTER
0697 B449D5         2147            CJNE    A,#'I',RC1      ;SEE IF I, ELSE RESET THE STACK
                    2148            ;
                    2149            ;**************************************************************
                    2150            ;
069A                2151    ICLR:   ; Clear interrupts and system garbage
                    2152            ;
                    2153            ;**************************************************************
                    2154            ;
069A 301202         2155            JNB     INTBIT,ICLR1    ;SEE IF BASIC HAS INTERRUPTS
069D C2AA           2156            CLR     EX1             ;IF SO, CLEAR INTERRUPTS
069F 532220         2157    ICLR1:  ANL     34,#00100000B   ;SET INTERRUPTS + CONTINUE
06A2 32             2158            RETI
                    2159            ;
                    2160            ;***************************************************************
                    2161            ;
                    2162            ;OUTPUT ROUTINES
                    2163            ;
                    2164            ;***************************************************************
                    2165            ;
06A3 D1A5           2166    CRLF2:  ACALL   CRLF            ;DO TWO CRLF'S
                    2167            ;
06A5 7D0D           2168    CRLF:   MOV     R5,#CR          ;LOAD THE CR
BASIC52Q                                                                                                      PAGE 39

06A7 F111           2169            ACALL   TEROT           ;CALL TERMINAL OUT
06A9 7D0A           2170            MOV     R5,#LF          ;LOAD THE LF
06AB E111           2171            AJMP    TEROT           ;OUTPUT IT AND RETURN
                    2172            ;
                    2173            ;PRINT THE MESSAGE ADDRESSED IN ROM OR RAM BY THE DPTR
                    2174            ;ENDS WITH THE CHARACTER IN R4
                    2175            ;DPTR HAS THE ADDRESS OF THE TERMINATOR
                    2176            ;
06AD D1A5           2177    CRP:    ACALL   CRLF            ;DO A CR THEN PRINT ROM
                    2178            ;
06AF E4             2179    ROM_P:  CLR     A               ;CLEAR A FOR LOOKUP
06B0 93             2180            MOVC    A,@A+DPTR       ;GET THE CHARACTER
06B1 C2E7           2181            CLR     ACC.7           ;CLEAR MS BIT
06B3 B42201         2182            CJNE    A,#'"',ROM_P1   ;EXIT IF TERMINATOR
06B6 22             2183            RET
06B7 D234           2184    ROM_P1: SETB    C0ORX1
                    2185            ;
06B9 FD             2186    PN1:    MOV     R5,A            ;OUTPUT THE CHARACTER
06BA F111           2187            ACALL   TEROT
06BC A3             2188            INC     DPTR            ;BUMP THE POINTER
06BD 8004           2189            SJMP    PN0
                    2190            ;
06BF B179           2191    UPRNT:  ACALL   X31DP
                    2192            ;
06C1 7C0D           2193    PRNTCR: MOV     R4,#CR          ;OUTPUT UNTIL A CR
                    2194            ;
06C3 1034E9         2195    PN0:    JBC     C0ORX1,ROM_P
06C6 E0             2196            MOVX    A,@DPTR         ;GET THE RAM BYTE
06C7 6003           2197            JZ      PN01
06C9 B50401         2198            CJNE    A,R4B0,PN02     ;SEE IF THE SAME AS TERMINATOR
06CC 22             2199    PN01:   RET                     ;EXIT IF THE SAME
06CD B40DE9         2200    PN02:   CJNE    A,#CR,PN1       ;NEVER PRINT A CR IN THIS ROUTINE
06D0 021885         2201            LJMP    E1XX            ;BAD SYNTAX
                    2202            ;
                    2203            ;***************************************************************
                    2204            ;
                    2205            ; INLINE - Input a line to IBUF, exit when a CR is received
                    2206            ;
                    2207            ;***************************************************************
                    2208            ;
06D3 B40416         2209    INL2:   CJNE    A,#CNTRLD,INL2B ;SEE IF A CONTROL D
                    2210            ;
06D6 D1A5           2211    INL0:   ACALL   CRLF            ;DO A CR
                    2212            ;
06D8 75A000         2213    INLINE: MOV     P2,#HIGH IBUF   ;IBUF IS IN THE ZERO PAGE
06DB 7807           2214            MOV     R0,#LOW IBUF    ;POINT AT THE INPUT BUFFER
                    2215            ;
06DD F191           2216    INL1:   ACALL   INCHAR          ;GET A CHARACTER
06DF FD             2217            MOV     R5,A            ;SAVE IN R5 FOR OUTPUT
06E0 B47FF0         2218            CJNE    A,#7FH,INL2     ;SEE IF A DELETE CHARACTER
06E3 B80718         2219            CJNE    R0,#LOW IBUF,INL6
06E6 7D07           2220    INL11:  MOV     R5,#BELL        ;OUTPUT A BELL
                    2221            ;
06E8 F111           2222    INLX:   ACALL   TEROT           ;OUTPUT CHARACTER
06EA 80F1           2223            SJMP    INL1            ;DO IT AGAIN
                    2224            ;
06EC F2             2225    INL2B:  MOVX    @R0,A           ;SAVE THE CHARACTER
06ED B40D02         2226            CJNE    A,#CR,INL2B1    ;IS IT A CR
BASIC52Q                                                                                                      PAGE 40

06F0 C1A5           2227            AJMP    CRLF            ;OUTPUT A CRLF AND EXIT
06F2 B42000         2228    INL2B1: CJNE    A,#20H,INL2B2
06F5 40F1           2229    INL2B2: JC      INLX            ;ONLY ECHO CONTROL CHARACTERS
06F7 08             2230            INC     R0              ;BUMP THE POINTER
06F8 B856ED         2231            CJNE    R0,#IBUF+79,INLX
06FB 18             2232            DEC     R0              ;FORCE 79
06FC 80E8           2233            SJMP    INL11           ;OUTPUT A BELL
                    2234            ;
06FE 18             2235    INL6:   DEC     R0              ;DEC THE RAM POINTER
06FF 7D08           2236            MOV     R5,#BS          ;OUTPUT A BACK SPACE
0701 F111           2237            ACALL   TEROT
0703 F10F           2238            ACALL   STEROT          ;OUTPUT A SPACE
0705 7D08           2239            MOV     R5,#BS          ;ANOTHER BACK SPACE
0707 80DF           2240            SJMP    INLX            ;OUTPUT IT
                    2241    ;
                    2242    ;*****************************************************************************
                    2243    ;****** Use XTAL up to 47 MHz ************************************************
                    2244    ;****** Wulf 2 ***************************************************************
                    2245    ;
                    2246    ;PTIME: DB      128-2           ;PROM PROGRAMMER TIMER
                    2247    ;       DB      00H
                    2248    ;       DB      00H
                    2249    ;       DB      50H
                    2250    ;       DB      67H
                    2251    ;       DB      41H
                    2252    ;
0709 7D             2253    ptime:  db      128-3           ;New programmer timer value is old value
070A 00             2254            db      00H             ;divide by 5
070B 00             2255            db      00H             ;(50ms EPROM timeing to 10ms for EEPROM)
070C 00             2256            db      00H
070D 35             2257            db      35H
070E 83             2258            db      83H
                    2259    ;
                    2260    ;*****************************************************************************
                    2261    ;
                    2262            ;***************************************************************
                    2263            ;
                    2264            ; TEROT - Output a character to the system console
                    2265            ;         update PHEAD position.
                    2266            ;
                    2267            ;***************************************************************
                    2268            ;
070F 7D20           2269    STEROT: MOV     R5,#' '         ;OUTPUT A SPACE
                    2270            ;
0711 C0E0           2271    TEROT:  PUSH    ACC             ;SAVE THE ACCUMULATOR
0713 C083           2272            PUSH    DPH             ;SAVE THE DPTR
0715 C082           2273            PUSH    DPL
0717 303504         2274    TEROT01:JNB     CNT_S,TEROT02   ;WAIT FOR A CONTROL Q
071A F18D           2275            ACALL   BCK             ;GET SERIAL STATUS
071C 80F9           2276            SJMP    TEROT01
071E ED             2277    TEROT02:MOV     A,R5            ;PUT OUTPUT BYTE IN A
071F 302C05         2278            JNB     BO,TEROT03      ;CHECK FOR MONITOR
0722 122040         2279            LCALL   2040H           ;DO THE MONITOR
0725 E166           2280            AJMP    TEROT1          ;CLEAN UP
0727 301C05         2281    TEROT03:JNB     COUB,TEROT04    ;SEE IF USER WANTS OUTPUT
072A 124030         2282            LCALL   4030H
072D E166           2283            AJMP    TEROT1
072F 302708         2284    TEROT04:JNB     UPB,T_1         ;NO AT IF NO XBIT
BASIC52Q                                                                                                      PAGE 41

0732 301905         2285            JNB     LPB,T_1         ;AT PRINT
0735 12403C         2286            LCALL   403CH           ;CALL AT LOCATION
0738 E166           2287            AJMP    TEROT1          ;FINISH OFF OUTPUT
                    2288            ;
073A 301B22         2289    T_1:    JNB     COB,TXX         ;SEE IF LIST SET
073D 900124         2290            MOV     DPTR,#SPV       ;LOAD BAUD RATE
0740 B182           2291            ACALL   LD_T
0742 C297           2292            CLR     LP              ;OUTPUT START BIT
0744 B12D           2293            ACALL   TIMER_LOAD      ;LOAD AND START THE TIMER
0746 ED             2294            MOV     A,R5            ;GET THE OUTPUT BYTE
0747 D3             2295            SETB    C               ;SET CARRY FOR LAST OUTPUT
0748 7D09           2296            MOV     R5,#9           ;LOAD TIMER COUNTDOWN
                    2297            ;
074A 13             2298    LTOUT1: RRC     A               ;ROTATE A
074B 308FFD         2299            JNB     TF1,$           ;WAIT TILL TIMER READY
074E 9297           2300            MOV     LP,C            ;OUTPUT THE BIT
0750 B12D           2301            ACALL   TIMER_LOAD      ;DO THE NEXT BIT
0752 DDF6           2302            DJNZ    R5,LTOUT1       ;LOOP UNTIL DONE
0754 308FFD         2303            JNB     TF1,$           ;FIRST STOP BIT
0757 B12D           2304            ACALL   TIMER_LOAD
0759 308FFD         2305            JNB     TF1,$           ;SECOND STOP BIT
075C FD             2306            MOV     R5,A            ;RESTORE R5
075D 8007           2307            SJMP    TEROT1          ;BACK TO TEROT
                    2308            ;
075F 3099FD         2309    TXX:    JNB     TI,$            ;WAIT FOR TRANSMIT READY
0762 C299           2310            CLR     TI
0764 8D99           2311            MOV     SBUF,R5         ;SEND OUT THE CHARACTER
                    2312            ;
0766 BD0D03         2313    TEROT1: CJNE    R5,#CR,TEROT11  ;SEE IF A CR
0769 751600         2314            MOV     PHEAD,#00H      ;IF A CR, RESET PHEAD AND
                    2315            ;
076C BD0A0B         2316    TEROT11:CJNE    R5,#LF,NLC      ;SEE IF A LF
076F E515           2317            MOV     A,NULLCT        ;GET THE NULL COUNT
0771 6007           2318            JZ      NLC             ;NO NULLS IF ZERO
                    2319            ;
0773 7D00           2320    TEROT2: MOV     R5,#NULL        ;PUT THE NULL IN THE OUTPUT REGISTER
0775 F111           2321            ACALL   TEROT           ;OUTPUT THE NULL
0777 14             2322            DEC     A               ;DECREMENT NULL COUNT
0778 70F9           2323            JNZ     TEROT2          ;LOOP UNTIL DONE
                    2324            ;
077A BD0802         2325    NLC:    CJNE    R5,#BS,NLC1     ;DEC PHEAD IF A BACKSPACE
077D 1516           2326            DEC     PHEAD
077F BD2000         2327    NLC1:   CJNE    R5,#20H,NLC2    ;IS IT A PRINTABLE CHARACTER?
0782 4002           2328    NLC2:   JC      NLC3            ;DON'T INCREMENT PHEAD IF NOT PRINTABLE
0784 0516           2329            INC     PHEAD           ;BUMP PRINT HEAD
0786 D082           2330    NLC3:   POP     DPL             ;RESTORE DPTR
0788 D083           2331            POP     DPH
078A D0E0           2332            POP     ACC             ;RESTORE ACC
078C 22             2333            RET                     ;EXIT
                    2334            ;
078D F1C8           2335    BCK:    ACALL   CSTS            ;CHECK STATUS
078F 502E           2336            JNC     CI_RET1         ;EXIT IF NO CHARACTER
                    2337            ;
                    2338            ;***************************************************************
                    2339            ;
                    2340            ;INPUTS A CHARACTER FROM THE SYSTEM CONSOLE.
                    2341            ;
                    2342            ;***************************************************************
BASIC52Q                                                                                                      PAGE 42

                    2343            ;
0791 303205         2344    INCHAR: JNB     BI,INCHAR1      ;CHECK FOR MONITOR (BUBBLE)
0794 122060         2345            LCALL   2060H
0797 8011           2346            SJMP    INCH1
0799 301E05         2347    INCHAR1:JNB     CIUB,INCHAR2    ;CHECK FOR USER
079C 124033         2348            LCALL   4033H
079F 8009           2349            SJMP    INCH1
07A1 3098FD         2350    INCHAR2:JNB     RI,$            ;WAIT FOR RECEIVER READY.
07A4 E599           2351            MOV     A,SBUF
07A6 C298           2352            CLR     RI              ;RESET READY
07A8 C2E7           2353            CLR     ACC.7           ;NO BIT 7
                    2354            ;
07AA B41302         2355    INCH1:  CJNE    A,#13H,INCH11
07AD D235           2356            SETB    CNT_S
07AF B41102         2357    INCH11: CJNE    A,#11H,INCH12
07B2 C235           2358            CLR     CNT_S
07B4 B40304         2359    INCH12: CJNE    A,#CNTRLC,INCH13
07B7 30301D         2360            JNB     NO_C,C_EX       ;TRAP NO CONTROL C
07BA 22             2361            RET
                    2362            ;
                    2363    ;
                    2364    ;*****************************************************************************
                    2365    ;****** Sorry - but the ego message had to be disabled ***********************
                    2366    ;
07BB                2367    INCH13:
                    2368    ;       CLR     JKBIT
07BB B41700         2369            CJNE    A,#17H,CI_RET   ;CONTROL W
                    2370    ;       SETB    JKBIT
                    2371    ;
                    2372    ;*****************************************************************************
                    2373            ;
07BE D3             2374    CI_RET: SETB    C               ;CARRY SET IF A CHARACTER
07BF 22             2375    CI_RET1:RET                     ;EXIT
                    2376            ;
                    2377            ;*************************************************************
                    2378            ;
                    2379            ;RROM - The Statement Action Routine RROM
                    2380            ;
                    2381            ;*************************************************************
                    2382            ;
07C0 D21D           2383    RROM:   SETB    INBIT           ;SO NO ERRORS
07C2 B143           2384            ACALL   RO1             ;FIND THE LINE NUMBER
07C4 101D3B         2385            JBC     INBIT,CRUN
07C7 22             2386            RET                     ;EXIT
                    2387            ;
                    2388            ;***************************************************************
                    2389            ;
07C8                2390    CSTS:   ;       RETURNS CARRY = 1 IF THERE IS A CHARACTER WAITING FROM
                    2391            ;       THE SYSTEM CONSOLE. IF NO CHARACTER THE READY CHARACTER
                    2392            ;       WILL BE CLEARED
                    2393            ;
                    2394            ;***************************************************************
                    2395            ;
07C8 303203         2396            JNB     BI,CSTS1        ;BUBBLE STATUS
07CB 022068         2397            LJMP    2068H
07CE 301E03         2398    CSTS1:  JNB     CIUB,CSTS2      ;SEE IF EXTERNAL CONSOLE
07D1 024036         2399            LJMP    4036H
07D4 A298           2400    CSTS2:  MOV     C,RI
BASIC52Q                                                                                                      PAGE 43

07D6 22             2401            RET
                    2402            ;
                    2403    ;
                    2404    ;*****************************************************************************
                    2405    ;****** Sorry - but the ego message had to be disabled ***********************
                    2406    ;
                    2407    ;C_EX0:  MOV     DPTR,#WB        ;EGO MESSAGE
                    2408    ;        ACALL   ROM_P
                    2409    ;
                    2410    ;*****************************************************************************
                    2411            ;
07D7 C235           2412    C_EX:   CLR     CNT_S           ;NO OUTPUT STOP
07D9 120C31         2413            LCALL   SPRINT1         ;ASSURE CONSOLE
07DC D1A5           2414            ACALL   CRLF
                    2415    ;
                    2416    ;*****************************************************************************
                    2417    ;****** Sorry - but the ego message had to be disabled ***********************
                    2418    ;
                    2419    ;        JBC     JKBIT,C_EX0
                    2420    ;
                    2421    ;*****************************************************************************
                    2422    ;
07DE 302F7F         2423            JNB     DIRF,SSTOP0
07E1 A140           2424            AJMP    C_K             ;CLEAR COB AND EXIT
                    2425            ;
07E3 E548           2426    T_CMP:  MOV     A,TVH           ;COMPARE TIMER TO SP_H AND SP_L
07E5 A949           2427            MOV     R1,TVL
07E7 B548F9         2428            CJNE    A,TVH,T_CMP
07EA C9             2429            XCH     A,R1
07EB 954C           2430            SUBB    A,SP_L
07ED E9             2431            MOV     A,R1
07EE 954B           2432            SUBB    A,SP_H
07F0 22             2433            RET
                    2434            ;
                    2435            ;*************************************************************
                    2436            ;
07F1                2437    BR0:    ; Trap the timer interrupt
                    2438            ;
                    2439            ;*************************************************************
                    2440            ;
07F1 F1E3           2441            CALL    T_CMP           ;COMPARE TIMER
07F3 4040           2442            JC      BCHR1           ;EXIT IF TEST FAILS
07F5 D214           2443            SETB    OTI             ;DOING THE TIMER INTERRUPT
07F7 C210           2444            CLR     OTS             ;CLEAR TIMER BIT
07F9 A211           2445            MOV     C,INPROG        ;SAVE IN PROGRESS
07FB 922B           2446            MOV     ISAV,C
07FD 900126         2447            MOV     DPTR,#TIV
0800 803C           2448            SJMP    BR2
                    2449            ;
                    2450            ;***************************************************************
                    2451            ;
                    2452            ; The command action routine - RUN
                    2453            ;
                    2454            ;***************************************************************
                    2455            ;
0802 120662         2456    CRUN:   LCALL   CNEW1           ;CLEAR THE STORAGE ARRAYS
0805 71D0           2457            ACALL   SRESTR1         ;GET THE STARTING ADDRESS
0807 51A4           2458            ACALL   B_C
BASIC52Q                                                                                                      PAGE 44

0809 604A           2459            JZ      CMNDLK          ;IF NULL GO TO COMMAND MODE
                    2460            ;
080B D1B8           2461            ACALL   T_DP
080D F123           2462            ACALL   B_TXA           ;BUMP TO STARTING LINE
                    2463            ;
080F 913C           2464    CILOOP: ACALL   SP0             ;DO A CR AND A LF
0811 C22F           2465    CILOOP1:CLR     DIRF            ;NOT IN DIRECT MODE
                    2466            ;
                    2467            ;INTERPERTER DRIVER
                    2468            ;
0813 853E81         2469    ILOOP:  MOV     SP,SPSAV        ;RESTORE THE STACK EACH TIME
0816 202F06         2470            JB      DIRF,ILOOP1     ;NO INTERRUPTS IF IN DIRECT MODE
0819 850A42         2471            MOV     INTXAH,TXAH     ;SAVE THE TEXT POINTER
081C 850843         2472            MOV     INTXAL,TXAL
081F 12078D         2473    ILOOP1: LCALL   BCK             ;GET CONSOLE STATUS
0822 202F24         2474            JB      DIRF,I_L        ;DIRECT MODE
0825 B018           2475            ANL     C,/GTRD         ;SEE IF CHARACTER READY
0827 5006           2476            JNC     BCHR            ;NO CHARACTER = NO CARRY
                    2477            ;
                    2478            ; DO TRAP OPERATION
                    2479            ;
0829 900100         2480            MOV     DPTR,#GTB       ;SAVE TRAP CHARACTER
082C F0             2481            MOVX    @DPTR,A
082D D218           2482            SETB    GTRD            ;SAYS READ A BYTE
                    2483            ;
082F 201417         2484    BCHR:   JB      OTI,I_L         ;EXIT IF TIMER INTERRUPT IN PROGRESS
0832 2010BC         2485            JB      OTS,BR0         ;TEST TIMER VALUE IF SET
0835 301611         2486    BCHR1:  JNB     INTPEN,I_L      ;SEE IF INTERRUPT PENDING
0838 20110E         2487            JB      INPROG,I_L      ;DON'T DO IT AGAIN IF IN PROGRESS
083B 900120         2488            MOV     DPTR,#INTLOC    ;POINT AT INTERRUPT LOCATION
                    2489            ;
083E 7C02           2490    BR2:    MOV     R4,#GTYPE       ;SETUP FOR A FORCED GOSUB
0840 7135           2491            ACALL   SGS1            ;PUT TXA ON STACK
0842 D211           2492            SETB    INPROG          ;INTERRUPT IN PROGRESS
                    2493            ;
0844 120573         2494    ERL4:   CALL    L20DPI
0847 41F8           2495            AJMP    D_L1            ;GET THE LINE NUMBER
                    2496            ;
0849 11F8           2497    I_L:    ACALL   ISTAT           ;LOOP
084B F117           2498            ACALL   CLN_UP          ;FINISH IT OFF
084D 50C4           2499            JNC     ILOOP           ;LOOP ON THE DRIVER
084F 302F03         2500            JNB     DIRF,CMNDLK     ;CMND1 IF IN RUN MODE
0852 021794         2501            LJMP    CMNDR           ;DON'T PRINT READY
                    2502            ;
0855 021787         2503    CMNDLK: JMP     CMND1           ;DONE
                    2504            ;**************************************************************
                    2505            ;
                    2506            ; The Statement Action Routine - STOP
                    2507            ;
                    2508            ;**************************************************************
                    2509            ;
0858 F117           2510    SSTOP:  ACALL   CLN_UP          ;FINISH OFF THIS LINE
085A 850A42         2511            MOV     INTXAH,TXAH     ;SAVE TEXT POINTER FOR CONT
085D 850843         2512            MOV     INTXAL,TXAL
                    2513            ;
0860 D217           2514    SSTOP0: SETB    CONB            ;CONTINUE WILL WORK
0862 9000EE         2515            MOV     DPTR,#STP       ;PRINT THE STOP MESSAGE
0865 D220           2516            SETB    STOPBIT         ;SET FOR ERROR ROUTINE
BASIC52Q                                                                                                      PAGE 45

0867 0218AD         2517            JMP     ERRS            ;JUMP TO ERROR ROUTINE
                    2518            ;
                    2519            ;**************************************************************
                    2520            ;
                    2521            ; ITRAP - Trap special function register operators
                    2522            ;
                    2523            ;**************************************************************
                    2524            ;
086A B4C805         2525    ITRAP:  CJNE    A,#TMR0,ITRAP1  ;TIMER 0
086D 8B8C           2526            MOV     TH0,R3
086F 898A           2527            MOV     TL0,R1
0871 22             2528            RET
                    2529            ;
0872 B4C905         2530    ITRAP1: CJNE    A,#TMR1,ITRAP2  ;TIMER 1
0875 8B8D           2531            MOV     TH1,R3
0877 898B           2532            MOV     TL1,R1
0879 22             2533            RET
                    2534            ;
087A B4CA05         2535    ITRAP2: CJNE    A,#TMR2,ITRAP3  ;TIMER 2
087D 8BCD           2536    ITRAP21:MOV     TH2,R3
087F 89CC           2537            MOV     TL2,R1
                    2538    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2539    ;       DB      0CDH            ;T2H LOCATION
                    2540    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2541    ;       DB      0CCH            ;T2L LOCATION
0881 22             2542            RET
                    2543            ;
0882 B4CE05         2544    ITRAP3: CJNE    A,#TRC2,RCL1    ;RCAP2 TOKEN
0885 8BCB           2545    RCL:    MOV     RCAPH2,R3
0887 89CA           2546            MOV     RCAPL2,R1
                    2547    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2548    ;       DB      0CBH            ;RCAP2H LOCATION
                    2549    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2550    ;       DB      0CAH            ;RCAP2L LOCATION
0889 22             2551            RET
                    2552            ;
088A 31D5           2553    RCL1:   ACALL   R3CK            ;MAKE SURE THAT R3 IS ZERO
088C B4CB03         2554            CJNE    A,#TT2C,RCL2
088F 89C8           2555            MOV     T2CON,R1
                    2556    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2557    ;       DB      0C8H            ;T2CON LOCATION
0891 22             2558            RET
                    2559            ;
0892 B4C603         2560    RCL2:   CJNE    A,#T_IE,RCL3    ;IE TOKEN
0895 89A8           2561            MOV     IE,R1
0897 22             2562            RET
                    2563            ;
0898 B4C703         2564    RCL3:   CJNE    A,#T_IP,RCL4    ;IP TOKEN
089B 89B8           2565            MOV     IP,R1
089D 22             2566            RET
                    2567            ;
089E B4CC03         2568    RCL4:   CJNE    A,#TTC,RCL5     ;TCON TOKEN
08A1 8988           2569            MOV     TCON,R1
08A3 22             2570            RET
                    2571            ;
08A4 B4CD03         2572    RCL5:   CJNE    A,#TTM,RCL6     ;TMOD TOKEN
08A7 8989           2573            MOV     TMOD,R1
08A9 22             2574            RET
BASIC52Q                                                                                                      PAGE 46

                    2575            ;
08AA B4CF32         2576    RCL6:   CJNE    A,#T_P1,T_T2    ;P1 TOKEN
08AD 8990           2577            MOV     P1,R1
08AF 22             2578            RET
                    2579            ;
                    2580            ;***************************************************************
                    2581            ;
                    2582            ; T_TRAP - Trap special operators
                    2583            ;
                    2584            ;***************************************************************
                    2585            ;
08B0 F50F           2586    T_T:    MOV     TEMP5,A         ;SAVE THE TOKEN
08B2 D1D7           2587            ACALL   GCI1            ;BUMP POINTER
08B4 31C8           2588            ACALL   SLET2           ;EVALUATE AFTER =
08B6 E50F           2589            MOV     A,TEMP5         ;GET THE TOKEN BACK
08B8 B4C303         2590            CJNE    A,#T_XTAL,T_T01
08BB 02165C         2591            LJMP    AXTAL1          ;SET UP CRYSTAL
                    2592            ;
08BE D190           2593    T_T01:  ACALL   IFIXL           ;R3:R1 HAS THE TOS
08C0 E50F           2594            MOV     A,TEMP5         ;GET THE TOKEN AGAIN
08C2 B4C409         2595            CJNE    A,#T_MTOP,T_T1  ;SEE IF MTOP TOKEN
08C5 90010A         2596            MOV     DPTR,#MEMTOP
08C8 120605         2597            CALL    S31DP
08CB 020664         2598            JMP     RCLEAR          ;CLEAR THE MEMORY
                    2599            ;
08CE B4C599         2600    T_T1:   CJNE    A,#T_TIME,ITRAP ;SEE IF A TIME TOKEN
08D1 A2AF           2601            MOV     C,EA            ;SAVE INTERRUPTS
08D3 C2AF           2602            CLR     EA              ;NO TIMER 0 INTERRUPTS DURING LOAD
08D5 8B48           2603            MOV     TVH,R3          ;SAVE THE TIME
08D7 8949           2604            MOV     TVL,R1
                    2605    ;
                    2606    ;*****************************************************************************
                    2607    ;****** Reset millisecond counter on "TIME=" *********************************
                    2608    ;****** Boehling 2 ***********************************************************
                    2609    ;
08D9 754700         2610            mov     MILLIV,#0       ;Reset millisecond counter
                    2611    ;
                    2612    ;*****************************************************************************
                    2613    ;
08DC 92AF           2614            MOV     EA,C            ;RESTORE INTERRUPTS
08DE 22             2615            RET                     ;EXIT
                    2616            ;
08DF B4D056         2617    T_T2:   CJNE    A,#T_PC,INTERX  ;PCON TOKEN
08E2 8987           2618            MOV     PCON,R1
                    2619    ;       DB      89H             ;MOV DIRECT, R1 OP CODE
                    2620    ;       DB      87H             ;ADDRESS OF PCON
08E4 22             2621            RET                     ;EXIT
                    2622            ;
08E5 B4D1C8         2623    T_TRAP: CJNE    A,#T_ASC,T_T    ;SEE IF ASC TOKEN
08E8 D1CB           2624            ACALL   IGC             ;EAT IT AND GET THE NEXT CHARACTER
08EA B4244B         2625            CJNE    A,#'$',INTERX   ;ERROR IF NOT A STRING
08ED 511E           2626            ACALL   CSY             ;CALCULATE ADDRESS
08EF B1AD           2627            ACALL   X3120
08F1 1214B4         2628            CALL    TWO_EY
08F4 31DD           2629            ACALL   SPEOP1          ;EVALUATE AFTER EQUALS
08F6 2121           2630            AJMP    ISTAX1          ;SAVE THE CHARACTER
                    2631            ;
                    2632            ;**************************************************************
BASIC52Q                                                                                                      PAGE 47

                    2633            ;
                    2634            ;INTERPERT THE STATEMENT POINTED TO BY TXAL AND TXAH
                    2635            ;
                    2636            ;**************************************************************
                    2637            ;
08F8 D1CD           2638    ISTAT:  ACALL   GC              ;GET THR FIRST CHARACTER
08FA 302D0E         2639            JNB     XBIT,IAT        ;TRAP TO EXTERNAL RUN PACKAGE
08FD B42000         2640            CJNE    A,#20H,ISTAT1
0900 5009           2641    ISTAT1: JNC     IAT
0902 122070         2642            LCALL   2070H           ;LET THE USER SET UP THE DPTR
0905 D1D7           2643            ACALL   GCI1
0907 540F           2644            ANL     A,#0FH          ;STRIP OFF BIAS
0909 8051           2645            SJMP    ISTA1
                    2646            ;
090B B4C300         2647    IAT:    CJNE    A,#T_XTAL,IAT1
090E 50D5           2648    IAT1:   JNC     T_TRAP
0910 30E75B         2649            JNB     ACC.7,SLET      ;IMPLIED LET IF BIT 7 NOT SET
0913 B4BC06         2650            CJNE    A,#T_UOP+12,ISTAX       ;DBYTE TOKEN
0916 31D9           2651            ACALL   SPEOP           ;EVALUATE SPECIAL OPERATOR
0918 31D5           2652            ACALL   R3CK            ;CHECK LOCATION
091A F7             2653            MOV     @R1,A           ;SAVE IT
091B 22             2654            RET
                    2655            ;
091C B4BD06         2656    ISTAX:  CJNE    A,#T_UOP+13,ISTAY       ;XBYTE TOKEN
091F 31D9           2657            ACALL   SPEOP
                    2658            ;
0921 8BA0           2659    ISTAX1: MOV     P2,R3
0923 F3             2660            MOVX    @R1,A
0924 22             2661            RET
                    2662            ;
0925 B4AB00         2663    ISTAY:  CJNE    A,#T_CR+1,ISTAY1;TRAP NEW OPERATORS
0928 4009           2664    ISTAY1: JC      I_S
092A B4B000         2665            CJNE    A,#0B0H,ISTAY2  ;SEE IF TOO BIG
092D 5009           2666    ISTAY2: JNC     INTERX
092F 24F9           2667            ADD     A,#0F9H         ;BIAS FOR LOOKUP TABLE
0931 801D           2668            SJMP    ISTA0           ;DO THE OPERATION
                    2669            ;
0933 B4A400         2670    I_S:    CJNE    A,#T_LAST,I_S1  ;MAKE SURE AN INITIAL RESERVED WORD
0936 4003           2671    I_S1:   JC      INTERX1         ;ERROR IF NOT
                    2672            ;
0938 021885         2673    INTERX: LJMP    E1XX            ;SYNTAX ERROR
                    2674            ;
093B 302F12         2675    INTERX1:JNB     DIRF,ISTA0      ;EXECUTE ALL STATEMENTS IF IN RUN MODE
093E B49000         2676            CJNE    A,#T_DIR,INTERX2;SEE IF ON TOKEN
0941 400D           2677    INTERX2:JC      ISTA0           ;OK IF DIRECT
0943 B4A002         2678            CJNE    A,#T_GOSB+1,INTERX3;SEE IF FOR
0946 8008           2679            SJMP    ISTA0           ;FOR IS OK
0948 B49702         2680    INTERX3:CJNE    A,#T_REM+1,INTERX4      ;NEXT IS OK
094B 8003           2681            SJMP    ISTA0
094D B496E8         2682    INTERX4:CJNE    A,#T_STOP+6,INTERX      ;SO IS REM
                    2683            ;
0950 D1D7           2684    ISTA0:  ACALL   GCI1            ;ADVANCE THE TEXT POINTER
0952 900123         2685            MOV     DPTR,#STATD     ;POINT DPTR TO LOOKUP TABLE
0955 B48002         2686            CJNE    A,#T_GOTO-3,ISTA01;SEE IF LET TOKEN
0958 809E           2687            SJMP    ISTAT           ;WASTE LET TOKEN
095A 543F           2688    ISTA01: ANL     A,#3FH          ;STRIP OFF THE GARBAGE
                    2689            ;
095C 23             2690    ISTA1:  RL      A               ;ROTATE FOR OFFSET
BASIC52Q                                                                                                      PAGE 48

095D 2582           2691            ADD     A,DPL           ;BUMP
095F F582           2692            MOV     DPL,A           ;SAVE IT
0961 E4             2693            CLR     A
0962 93             2694            MOVC    A,@A+DPTR       ;GET HIGH BYTE
0963 C0E0           2695            PUSH    ACC             ;SAVE IT
0965 A3             2696            INC     DPTR
0966 E4             2697            CLR     A
0967 93             2698            MOVC    A,@A+DPTR       ;GET LOW BYTE
0968 D083           2699            POP     DPH
096A F582           2700            MOV     DPL,A
                    2701            ;
096C E4             2702    AC1:    CLR     A
096D 73             2703            JMP     @A+DPTR         ;GO DO IT
                    2704            ;
                    2705            ;***************************************************************
                    2706            ;
                    2707            ; The statement action routine - LET
                    2708            ;
                    2709            ;***************************************************************
                    2710            ;
096E D1BF           2711    SLET:   ACALL   S_C             ;CHECK FOR POSSIBLE STRING
0970 4050           2712            JC      SLET0           ;NO STRING
0972 C215           2713            CLR     LINEB           ;USED STRINGS
                    2714            ;
0974 120579         2715            CALL    X31DP           ;PUT ADDRESS IN DPTR
0977 7FEA           2716            MOV     R7,#T_EQU       ;WASTE =
0979 91E5           2717            ACALL   EATC
097B D1CD           2718            ACALL   GC              ;GET THE NEXT CHARACTER
097D B42211         2719            CJNE    A,#'"',S_3      ;CHECK FOR A "
0980 AF3F           2720            MOV     R7,S_LEN        ;GET THE STRING LENGTH
                    2721            ;
0982 D1D7           2722    S_0:    ACALL   GCI1            ;BUMP PAST "
0984 D1E1           2723            ACALL   DELTST          ;CHECK FOR DELIMITER
0986 60B0           2724            JZ      INTERX          ;EXIT IF CARRIAGE RETURN
0988 F0             2725            MOVX    @DPTR,A         ;SAVE THE CHARACTER
0989 B42226         2726            CJNE    A,#'"',S_1      ;SEE IF DONE
                    2727            ;
098C 740D           2728    S_E:    MOV     A,#CR           ;PUT A CR IN A
098E F0             2729            MOVX    @DPTR,A         ;SAVE CR
098F C1D7           2730            AJMP    GCI1
                    2731            ;
0991 C083           2732    S_3:    PUSH    DPH
0993 C082           2733            PUSH    DPL             ;SAVE DESTINATION
0995 D1BF           2734            ACALL   S_C             ;CALCULATE SOURCE
0997 409F           2735            JC      INTERX          ;ERROR IF CARRY
0999 D000           2736            POP     R0B0            ;GET DESTINATION BACK
099B D002           2737            POP     R2B0
                    2738            ;
099D AF3F           2739    SSOOP:  MOV     R7,S_LEN        ;SET UP COUNTER
                    2740            ;
099F 121596         2741    S_4:    CALL    TBYTE           ;TRANSFER THE BYTE
09A2 B40D01         2742            CJNE    A,#CR,S_41      ;EXIT IF A CR
09A5 22             2743            RET
09A6 DF05           2744    S_41:   DJNZ    R7,S_5          ;BUMP COUNTER
09A8 740D           2745            MOV     A,#CR           ;SAVE A CR
09AA F2             2746            MOVX    @R0,A
09AB C14E           2747            AJMP    EIGP            ;PRINT EXTRA IGNORED
                    2748            ;
BASIC52Q                                                                                                      PAGE 49

                    2749            ;
09AD 121576         2750    S_5:    CALL    INC3210         ;BUMP POINTERS
09B0 80ED           2751            SJMP    S_4             ;LOOP
                    2752            ;
09B2 DF06           2753    S_1:    DJNZ    R7,S_11         ;SEE IF DONE
09B4 318C           2754            ACALL   S_E
09B6 D14E           2755            ACALL   EIGP            ;PRINT EXTRA IGNORED
09B8 C1EC           2756            AJMP    FINDCR          ;GO FIND THE END
09BA A3             2757    S_11:   INC     DPTR            ;BUMP THE STORE POINTER
09BB 80C5           2758            SJMP    S_0             ;CONTINUE TO LOOP
                    2759            ;
09BD 901828         2760    E3XX:   MOV     DPTR,#E3X       ;BAD ARG ERROR
09C0 810E           2761            AJMP    EK
                    2762            ;
09C2 31C6           2763    SLET0:  ACALL   SLET1
09C4 E1D3           2764            AJMP    POPAS           ;COPY EXPRESSION TO VARIABLE
                    2765            ;
09C6 F101           2766    SLET1:  ACALL   VAR_ER          ;CHECK FOR A"VARIABLE"
                    2767            ;
09C8 C002           2768    SLET2:  PUSH    R2B0            ;SAVE THE VARIABLE ADDRESS
09CA C000           2769            PUSH    R0B0
09CC 7FEA           2770            MOV     R7,#T_EQU       ;GET EQUAL TOKEN
09CE F141           2771            ACALL   WE
09D0 D001           2772            POP     R1B0            ;POP VARIABLE TO R3:R1
09D2 D003           2773            POP     R3B0
09D4 22             2774            RET                     ;EXIT
                    2775            ;
09D5 BB00E5         2776    R3CK:   CJNE    R3,#00H,E3XX    ;CHECK TO SEE IF R3 IS ZERO
09D8 22             2777            RET
                    2778            ;
09D9 D1D7           2779    SPEOP:  ACALL   GCI1            ;BUMP TXA
09DB 91DF           2780            ACALL   P_E             ;EVALUATE PAREN
09DD 31C8           2781    SPEOP1: ACALL   SLET2           ;EVALUATE AFTER =
09DF 1214A1         2782            CALL    TWOL            ;R7:R6 GETS VALUE, R3:R1 GETS LOCATION
09E2 EE             2783            MOV     A,R6            ;SAVE THE VALUE
                    2784            ;
09E3 BF00D7         2785            CJNE    R7,#00H,E3XX    ;R2 MUST BE = 0
09E6 22             2786            RET
                    2787            ;
                    2788            ;**************************************************************
                    2789            ;
                    2790            ; ST_CAL - Calculate string Address
                    2791            ;
                    2792            ;**************************************************************
                    2793            ;
09E7                2794    IST_CAL:;
                    2795            ;
09E7 D195           2796            ACALL   I_PI            ;BUMP TEXT, THEN EVALUATE
09E9 31D5           2797            ACALL   R3CK            ;ERROR IF R3 <> 0
09EB 09             2798            INC     R1              ;BUMP FOR OFFSET
09EC E9             2799            MOV     A,R1            ;ERROR IF R1 = 255
09ED 60CE           2800            JZ      E3XX
09EF 900104         2801            MOV     DPTR,#VARTOP    ;GET TOP OF VARIABLE STORAGE
09F2 853FF0         2802            MOV     B,S_LEN         ;MULTIPLY FOR LOCATION
09F5 5110           2803            ACALL   VARD            ;CALCULATE THE LOCATION
09F7 90010A         2804            MOV     DPTR,#MEMTOP    ;SEE IF BLEW IT
09FA 1215B0         2805            CALL    FUL1
09FD 853F82         2806            MOV     DPL,S_LEN       ;GET STRING LENGTH, DPH = 00H
BASIC52Q                                                                                                      PAGE 50

0A00 1583           2807            DEC     DPH             ;DPH = 0
                    2808            ;
0A02 C3             2809    DUBSUB: CLR     C
0A03 E9             2810            MOV     A,R1
0A04 9582           2811            SUBB    A,DPL
0A06 F9             2812            MOV     R1,A
0A07 EB             2813            MOV     A,R3
0A08 9583           2814            SUBB    A,DPH
0A0A FB             2815            MOV     R3,A
0A0B 49             2816            ORL     A,R1
0A0C 22             2817            RET
                    2818            ;
                    2819            ;***************************************************************
                    2820            ;
                    2821            ;VARD - Calculate the offset base
                    2822            ;
                    2823            ;***************************************************************
                    2824            ;
0A0D 75F006         2825    VARB:   MOV     B,#FPSIZ        ;SET UP FOR OPERATION
                    2826            ;
0A10 1205B0         2827    VARD:   CALL    LDPTRI          ;LOAD DPTR
0A13 E9             2828            MOV     A,R1            ;MULTIPLY BASE
0A14 A4             2829            MUL     AB
0A15 2582           2830            ADD     A,DPL
0A17 F9             2831            MOV     R1,A
0A18 E5F0           2832            MOV     A,B
0A1A 3583           2833            ADDC    A,DPH
0A1C FB             2834            MOV     R3,A
0A1D 22             2835            RET
                    2836            ;
                    2837            ;*************************************************************
                    2838            ;
0A1E                2839    CSY:    ; Calculate a biased string address and put in R3:R1
                    2840            ;
                    2841            ;*************************************************************
                    2842            ;
0A1E 31E7           2843            ACALL   IST_CAL         ;CALCULATE IT
0A20 C003           2844            PUSH    R3B0            ;SAVE IT
0A22 C001           2845            PUSH    R1B0
0A24 7F2C           2846            MOV     R7,#','         ;WASTE THE COMMA
0A26 91E5           2847            ACALL   EATC
0A28 D18E           2848            ACALL   ONE             ;GET THE NEXT EXPRESSION
0A2A E9             2849            MOV     A,R1            ;CHECK FOR BOUNDS
0A2B B53F00         2850            CJNE    A,S_LEN,CSY1
0A2E 508D           2851    CSY1:   JNC     E3XX            ;MUST HAVE A CARRY
0A30 19             2852            DEC     R1              ;BIAS THE POINTER
0A31 D0E0           2853            POP     ACC             ;GET VALUE LOW
0A33 29             2854            ADD     A,R1            ;ADD IT TO BASE
0A34 F9             2855            MOV     R1,A            ;SAVE IT
0A35 D003           2856            POP     R3B0            ;GET HIGH ADDRESS
0A37 5001           2857            JNC     CSY2            ;PROPAGATE THE CARRY
0A39 0B             2858            INC     R3
0A3A 81E3           2859    CSY2:   AJMP    ERPAR           ;WASTE THE RIGHT PAREN
                    2860            ;
                    2861            ;***************************************************************
                    2862            ;
                    2863            ; The statement action routine FOR
                    2864            ;
BASIC52Q                                                                                                      PAGE 51

                    2865            ;***************************************************************
                    2866            ;
0A3C 31C6           2867    SFOR:   ACALL   SLET1           ;SET UP CONTROL VARIABLE
0A3E C003           2868            PUSH    R3B0            ;SAVE THE CONTROL VARIABLE LOCATION
0A40 C001           2869            PUSH    R1B0
0A42 F1D3           2870            ACALL   POPAS           ;POP ARG STACK AND COPY CONTROL VAR
0A44 7FA6           2871            MOV     R7,#T_TO        ;GET TO TOKEN
0A46 F141           2872            ACALL   WE
0A48 D1CD           2873            ACALL   GC              ;GET NEXT CHARACTER
0A4A B4A706         2874            CJNE    A,#T_STEP,SF2
0A4D D1D7           2875            ACALL   GCI1            ;EAT THE TOKEN
0A4F F143           2876            ACALL   EXPRB           ;EVALUATE EXPRESSION
0A51 8003           2877            SJMP    SF21            ;JUMP OVER
                    2878            ;
0A53 121443         2879    SF2:    LCALL   PUSH_ONE        ;PUT ONE ON THE STACK
                    2880            ;
0A56 74EF           2881    SF21:   MOV     A,#-FSIZE       ;ALLOCATE FSIZE BYTES ON THE CONTROL STACK
0A58 71B1           2882            ACALL   PUSHCS          ;GET CS IN R0
0A5A 71BD           2883            ACALL   CSC             ;CHECK CONTROL STACK
0A5C 7B00           2884            MOV     R3,#CSTKAH      ;IN CONTROL STACK
0A5E A900           2885            MOV     R1,R0B0         ;STACK ADDRESS
0A60 F1D3           2886            ACALL   POPAS           ;PUT STEP ON STACK
0A62 F1D3           2887            ACALL   POPAS           ;PUT LIMIT ON STACK
0A64 D1A2           2888            ACALL   DP_T            ;DPTR GETS TEXT
0A66 A801           2889            MOV     R0,R1B0         ;GET THE POINTER
0A68 7139           2890            ACALL   T_X_S           ;SAVE THE TEXT
0A6A D008           2891            POP     TXAL            ;GET CONTROL VARIABLE
0A6C D00A           2892            POP     TXAH
0A6E 7C01           2893            MOV     R4,#FTYPE       ;AND THE TYPE
0A70 7139           2894            ACALL   T_X_S           ;SAVE IT
                    2895            ;
0A72 D1B8           2896    SF3:    ACALL   T_DP            ;GET THE TEXT POINTER
0A74 0113           2897            AJMP    ILOOP           ;CONTINUE TO PROCESS
                    2898            ;
                    2899            ;**************************************************************
                    2900            ;
                    2901            ; The statement action routines - PUSH and POP
                    2902            ;
                    2903            ;**************************************************************
                    2904            ;
0A76 F143           2905    SPUSH:  ACALL   EXPRB           ;PUT EXPRESSION ON STACK
0A78 D1C6           2906            ACALL   C_TST           ;SEE IF MORE TO DO
0A7A 50FA           2907            JNC     SPUSH           ;IF A COMMA PUSH ANOTHER
0A7C 22             2908            RET
                    2909            ;
                    2910            ;
0A7D F101           2911    SPOP:   ACALL   VAR_ER          ;GET VARIABLE
0A7F F1D1           2912            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0A81 D1C6           2913            ACALL   C_TST           ;SEE IF MORE TO DO
0A83 50F8           2914            JNC     SPOP
                    2915            ;
0A85 22             2916    SPOP1:  RET
                    2917            ;
                    2918            ;***************************************************************
                    2919            ;
                    2920            ; The statement action routine - IF
                    2921            ;
                    2922            ;***************************************************************
BASIC52Q                                                                                                      PAGE 52

                    2923            ;
0A86 51C7           2924    SIF:    ACALL   RTST            ;EVALUATE THE EXPRESSION
0A88 F9             2925            MOV     R1,A            ;SAVE THE RESULT
0A89 D1CD           2926            ACALL   GC              ;GET THE CHARACTER AFTER EXPR
0A8B B4A502         2927            CJNE    A,#T_THEN,SIF1  ;SEE IF THEN TOKEN
0A8E D1D7           2928            ACALL   GCI1            ;WASTE THEN TOKEN
0A90 B9000B         2929    SIF1:   CJNE    R1,#0,T_F1      ;CHECK R_OP RESULT
                    2930            ;
0A93 7FA8           2931    E_FIND: MOV     R7,#T_ELSE      ;FIND ELSE TOKEN
0A95 D1EE           2932            ACALL   FINDC
0A97 60EC           2933            JZ      SPOP1           ;EXIT IF A CR
0A99 D1D7           2934            ACALL   GCI1            ;BUMP PAST TOKEN
0A9B B4A8F5         2935            CJNE    A,#T_ELSE,E_FIND;WASTE IF NO ELSE
                    2936            ;
0A9E F135           2937    T_F1:   ACALL   INTGER          ;SEE IF NUMBER
0AA0 5056           2938            JNC     D_L1            ;EXECUTE LINE NUMBER
0AA2 01F8           2939            AJMP    ISTAT           ;EXECUTE STATEMENT IN NOT
                    2940            ;
0AA4 E0             2941    B_C:    MOVX    A,@DPTR
0AA5 14             2942            DEC     A
0AA6 20E72E         2943            JB      ACC.7,FL11
0AA9 22             2944            RET
                    2945            ;
                    2946            ;***************************************************************
                    2947            ;
                    2948            ; The statement action routine - GOTO
                    2949            ;
                    2950            ;***************************************************************
                    2951            ;
0AAA 51F2           2952    SGOTO:  ACALL   RLINE           ;R2:R0 AND DPTR GET INTGER
                    2953            ;
0AAC D1B8           2954    SGT1:   ACALL   T_DP            ;TEXT POINTER GETS DPTR
                    2955            ;
0AAE 102508         2956            JBC     RETBIT,SGT2     ;SEE IF RETI EXECUTED
                    2957            ;
0AB1 301503         2958            JNB     LINEB,SGT11     ;SEE IF A LINE WAS EDITED
0AB4 120662         2959            LCALL   CNEW1           ;CLEAR THE MEMORY IF SET
0AB7 0111           2960    SGT11:  AJMP    CILOOP1         ;CLEAR DIRF AND LOOP
                    2961            ;
0AB9 101405         2962    SGT2:   JBC     OTI,SGT21       ;SEE IF TIMER INTERRUPT
0ABC 5322BD         2963            ANL     34,#10111101B   ;CLEAR INTERRUPTS
0ABF 0113           2964            AJMP    ILOOP           ;EXECUTE
0AC1 A22B           2965    SGT21:  MOV     C,ISAV
0AC3 9211           2966            MOV     INPROG,C
0AC5 0113           2967            AJMP    ILOOP           ;RESTORE INTERRUPTS AND RET
                    2968            ;
                    2969            ;
                    2970            ;*************************************************************
                    2971            ;
0AC7                2972    RTST:   ; Test for ZERO
                    2973            ;
                    2974            ;*************************************************************
                    2975            ;
0AC7 F143           2976            ACALL   EXPRB           ;EVALUATE EXPRESSION
0AC9 12124F         2977            CALL    INC_ASTKA       ;BUMP ARG STACK
0ACC 6002           2978            JZ      RTST1           ;EXIT WITH ZERO OR 0FFH
0ACE 74FF           2979            MOV     A,#0FFH
0AD0 22             2980    RTST1:  RET
BASIC52Q                                                                                                      PAGE 53

                    2981            ;
                    2982            ;
                    2983            ;**************************************************************
                    2984            ;
                    2985            ; GLN - get the line number in R2:R0, return in DPTR
                    2986            ;
                    2987            ;**************************************************************
                    2988            ;
0AD1 D19B           2989    GLN:    ACALL   DP_B            ;GET THE BEGINNING ADDRESS
                    2990            ;
0AD3 E0             2991    FL1:    MOVX    A,@DPTR         ;GET THE LENGTH
0AD4 FF             2992            MOV     R7,A            ;SAVE THE LENGTH
0AD5 DF05           2993            DJNZ    R7,FL3          ;SEE IF END OF FILE
                    2994            ;
0AD7 901FB5         2995    FL11:   MOV     DPTR,#E10X      ;NO LINE NUMBER
0ADA 810E           2996            AJMP    EK              ;HANDLE THE ERROR
                    2997            ;
0ADC 20E7F8         2998    FL3:    JB      ACC.7,FL11      ;CHECK FOR BIT 7
0ADF A3             2999            INC     DPTR            ;POINT AT HIGH BYTE
0AE0 E0             3000            MOVX    A,@DPTR         ;GET HIGH BYTE
0AE1 B50208         3001            CJNE    A,R2B0,FL2      ;SEE IF MATCH
0AE4 A3             3002            INC     DPTR            ;BUMP TO LOW BYTE
0AE5 1F             3003            DEC     R7              ;ADJUST AGAIN
0AE6 E0             3004            MOVX    A,@DPTR         ;GET THE LOW BYTE
0AE7 B50002         3005            CJNE    A,R0B0,FL2      ;SEE IF LOW BYTE MATCH
0AEA A3             3006            INC     DPTR            ;POINT AT FIRST CHARACTER
0AEB 22             3007            RET                     ;FOUND IT
                    3008            ;
0AEC EF             3009    FL2:    MOV     A,R7            ;GET THE LENGTH COUNTER
0AED 1205DE         3010            CALL    ADDPTR          ;ADD A TO DATA POINTER
0AF0 80E1           3011            SJMP    FL1             ;LOOP
                    3012            ;
                    3013            ;
                    3014            ;*************************************************************
                    3015            ;
                    3016            ;RLINE - Read in ASCII string, get line, and clean it up
                    3017            ;
                    3018            ;*************************************************************
                    3019            ;
0AF2 F130           3020    RLINE:  ACALL   INTERR          ;GET THE INTEGER
                    3021            ;
0AF4 51D1           3022    RL1:    ACALL   GLN
0AF6 E117           3023            AJMP    CLN_UP
                    3024            ;
                    3025            ;
0AF8 51D1           3026    D_L1:   ACALL   GLN             ;GET THE LINE
0AFA 41AC           3027            AJMP    SGT1            ;EXECUTE THE LINE
                    3028            ;
                    3029            ;***************************************************************
                    3030            ;
                    3031            ; The statement action routines WHILE and UNTIL
                    3032            ;
                    3033            ;***************************************************************
                    3034            ;
0AFC 51C7           3035    SWHILE: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
0AFE F4             3036            CPL     A
0AFF 8002           3037            SJMP    S_WU
                    3038            ;
BASIC52Q                                                                                                      PAGE 54

0B01 51C7           3039    SUNTIL: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
                    3040            ;
0B03 7C03           3041    S_WU:   MOV     R4,#DTYPE       ;DO EXPECTED
0B05 FD             3042            MOV     R5,A            ;SAVE R_OP RESULT
0B06 800C           3043            SJMP    SR0             ;GO PROCESS
                    3044            ;
                    3045            ;
                    3046            ;***************************************************************
                    3047            ;
0B08                3048    CNULL:  ; The Command Action Routine - NULL
                    3049            ;
                    3050            ;***************************************************************
                    3051            ;
0B08 F130           3052            ACALL   INTERR          ;GET AN INTEGER FOLLOWING NULL
0B0A 8815           3053            MOV     NULLCT,R0       ;SAVE THE NULLCOUNT
0B0C 0155           3054            AJMP    CMNDLK          ;JUMP TO COMMAND MODE
                    3055            ;
                    3056            ;***************************************************************
                    3057            ;
                    3058            ; The statement action routine - RETI
                    3059            ;
                    3060            ;***************************************************************
                    3061            ;
0B0E D225           3062    SRETI:  SETB    RETBIT          ;SAYS THAT RETI HAS BEEN EXECUTED
                    3063            ;
                    3064            ;***************************************************************
                    3065            ;
                    3066            ; The statement action routine - RETURN
                    3067            ;
                    3068            ;***************************************************************
                    3069            ;
0B10 7C02           3070    SRETRN: MOV     R4,#GTYPE       ;MAKE SURE OF GOSUB
0B12 7D55           3071            MOV     R5,#55H         ;TYPE RETURN TYPE
                    3072            ;
0B14 714B           3073    SR0:    ACALL   CSETUP          ;SET UP CONTROL STACK
0B16 E2             3074            MOVX    A,@R0           ;GET RETURN TEXT ADDRESS
0B17 F583           3075            MOV     DPH,A
0B19 08             3076            INC     R0
0B1A E2             3077            MOVX    A,@R0
0B1B F582           3078            MOV     DPL,A
0B1D 08             3079            INC     R0              ;POP CONTROL STACK
0B1E E0             3080            MOVX    A,@DPTR         ;SEE IF GOSUB WAS THE LAST STATEMENT
0B1F B40102         3081            CJNE    A,#EOF,SR01
0B22 0155           3082            AJMP    CMNDLK
0B24 ED             3083    SR01:   MOV     A,R5            ;GET TYPE
0B25 6085           3084            JZ      SGT1            ;EXIT IF ZERO
0B27 8811           3085            MOV     CSTKA,R0        ;POP THE STACK
0B29 F4             3086            CPL     A               ;OPTION TEST, 00H, 55H, 0FFH, NOW 55H
0B2A 7080           3087            JNZ     SGT1            ;MUST BE GOSUB
0B2C 22             3088            RET                     ;NORMAL FALL THRU EXIT FOR NO MATCH
                    3089            ;
                    3090            ;***************************************************************
                    3091            ;
                    3092            ; The statement action routine - GOSUB
                    3093            ;
                    3094            ;***************************************************************
                    3095            ;
0B2D 51F2           3096    SGOSUB: ACALL   RLINE           ;NEW TXA IN DPTR
BASIC52Q                                                                                                      PAGE 55

                    3097            ;
0B2F 7C02           3098    SGS0:   MOV     R4,#GTYPE
0B31 7135           3099            ACALL   SGS1            ;SET EVERYTHING UP
0B33 4172           3100            AJMP    SF3             ;EXIT
                    3101            ;
0B35 74FD           3102    SGS1:   MOV     A,#-3           ;ALLOCATE 3 BYTES ON CONTROL STACK
0B37 71B1           3103            ACALL   PUSHCS
                    3104            ;
0B39 75A000         3105    T_X_S:  MOV     P2,#CSTKAH      ;SET UP PORT FOR CONTROL STACK
0B3C E508           3106            MOV     A,TXAL          ;GET RETURN ADDRESS AND SAVE IT
0B3E F2             3107            MOVX    @R0,A
0B3F 18             3108            DEC     R0
0B40 E50A           3109            MOV     A,TXAH
0B42 F2             3110            MOVX    @R0,A
0B43 18             3111            DEC     R0
0B44 EC             3112            MOV     A,R4            ;GET TYPE
0B45 F2             3113            MOVX    @R0,A           ;SAVE TYPE
0B46 22             3114            RET                     ;EXIT
                    3115            ;
                    3116            ;
0B47 7403           3117    CS1:    MOV     A,#3            ;POP 3 BYTES
0B49 71B1           3118            ACALL   PUSHCS
                    3119            ;
0B4B A811           3120    CSETUP: MOV     R0,CSTKA        ;GET CONTROL STACK
0B4D 75A000         3121            MOV     P2,#CSTKAH
0B50 E2             3122            MOVX    A,@R0           ;GET BYTE
0B51 B50402         3123            CJNE    A,R4B0,CSETUP1  ;SEE IF TYPE MATCH
0B54 08             3124            INC     R0
0B55 22             3125            RET
0B56 6069           3126    CSETUP1:JZ      E4XX            ;EXIT IF STACK UNDERFLOW
0B58 B401EC         3127            CJNE    A,#FTYPE,CS1    ;SEE IF FOR TYPE
0B5B 71AF           3128            ACALL   XXI3            ;WASTE THE FOR TYPE
0B5D 80EC           3129            SJMP    CSETUP          ;LOOP
                    3130            ;
                    3131            ;***************************************************************
                    3132            ;
                    3133            ; The statement action routine - NEXT
                    3134            ;
                    3135            ;***************************************************************
                    3136            ;
0B5F 7C01           3137    SNEXT:  MOV     R4,#FTYPE       ;FOR TYPE
0B61 714B           3138            ACALL   CSETUP          ;SETUP CONTROL STACK
0B63 880F           3139            MOV     TEMP5,R0        ;SAVE CONTROL VARIABLE ADDRESS
0B65 790B           3140            MOV     R1,#TEMP1       ;SAVE VAR + RETURN IN TEMP1-4
                    3141            ;
0B67 E2             3142    XXI:    MOVX    A,@R0           ;LOOP UNTIL DONE
0B68 F7             3143            MOV     @R1,A
0B69 09             3144            INC     R1
0B6A 08             3145            INC     R0
0B6B B90FF9         3146            CJNE    R1,#TEMP5,XXI
                    3147            ;
0B6E B165           3148            ACALL   VAR             ;SEE IF THE USER HAS A VARIABLE
0B70 5004           3149            JNC     XXI1
0B72 AA0B           3150            MOV     R2,TEMP1
0B74 A80C           3151            MOV     R0,TEMP2
0B76 EA             3152    XXI1:   MOV     A,R2            ;SEE IF VAR'S AGREE
0B77 B50B47         3153            CJNE    A,TEMP1,E4XX
0B7A E8             3154            MOV     A,R0
BASIC52Q                                                                                                      PAGE 56

0B7B B50C43         3155            CJNE    A,TEMP2,E4XX
0B7E F1DD           3156            ACALL   PUSHAS          ;PUT CONTROL VARIABLE ON STACK
0B80 740E           3157            MOV     A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO STEP VALUE SIGN
0B82 250F           3158            ADD     A,TEMP5         ;ADD IT TO BASE OF STACK
0B84 F8             3159            MOV     R0,A            ;SAVE IN R0
0B85 7A00           3160            MOV     R2,#CSTKAH      ;SET UP TO PUSH STEP VALUE
0B87 8AA0           3161            MOV     P2,R2           ;SET UP PORT
0B89 E2             3162            MOVX    A,@R0           ;GET SIGN
0B8A 08             3163            INC     R0              ;BACK TO EXPONENT
0B8B C0E0           3164            PUSH    ACC             ;SAVE SIGN OF STEP
0B8D F1DD           3165            ACALL   PUSHAS          ;PUT STEP VALUE ON STACK
0B8F C000           3166            PUSH    R0B0            ;SAVE LIMIT VALUE LOCATION
0B91 121741         3167            CALL    AADD            ;ADD STEP VALUE TO VARIABLE
0B94 12142C         3168            CALL    CSTAKA          ;COPY STACK
0B97 AB0B           3169            MOV     R3,TEMP1        ;GET CONTROL VARIABLE
0B99 A90C           3170            MOV     R1,TEMP2
0B9B F1D3           3171            ACALL   POPAS           ;SAVE THE RESULT
0B9D 7A00           3172            MOV     R2,#CSTKAH      ;RESTORE LIMIT LOCATION
0B9F D000           3173            POP     R0B0
0BA1 F1DD           3174            ACALL   PUSHAS          ;PUT LIMIT ON STACK
0BA3 121973         3175            CALL    FP_BASE2        ;DO THE COMPARE
0BA6 D0E0           3176            POP     ACC             ;GET LIMIT SIGN BACK
0BA8 6001           3177            JZ      XXI2            ;IF SIGN NEGATIVE, TEST "BACKWARDS"
0BAA B3             3178            CPL     C
0BAB 72D5           3179    XXI2:   ORL     C,F0            ;SEE IF EQUAL
0BAD 4017           3180            JC      N4              ;STILL SMALLER THAN LIMIT?
0BAF 7411           3181    XXI3:   MOV     A,#FSIZE        ;REMOVE CONTROL STACK ENTRY
                    3182            ;
                    3183            ; Fall thru to PUSHCS
                    3184            ;
                    3185            ;***************************************************************
                    3186            ;
                    3187            ; PUSHCS - push frame onto control stack
                    3188            ;          acc has - number of bytes, also test for overflow
                    3189            ;
                    3190            ;***************************************************************
                    3191            ;
0BB1 2511           3192    PUSHCS: ADD     A,CSTKA         ;BUMP CONTROL STACK
0BB3 B46100         3193            CJNE    A,#CONVT+17,PUSHCS1 ;SEE IF OVERFLOWED
0BB6 4009           3194    PUSHCS1:JC      E4XX            ;EXIT IF STACK OVERFLOW
0BB8 C511           3195            XCH     A,CSTKA         ;STORE NEW CONTROL STACK VALUE, GET OLD
0BBA 14             3196            DEC     A               ;BUMP OLD VALUE
0BBB F8             3197            MOV     R0,A            ;PUT OLD-1 IN R0
                    3198            ;
0BBC 22             3199    PUSHCS2:RET                     ;EXIT
                    3200            ;
0BBD F117           3201    CSC:    ACALL   CLN_UP          ;FINISH OFF THE LINE
0BBF 50FB           3202            JNC     PUSHCS2         ;EXIT IF NO TERMINATOR
                    3203            ;
0BC1 900383         3204    E4XX:   MOV     DPTR,#EXC       ;CONTROL STACK ERROR
0BC4 810E           3205            AJMP    EK              ;STACK ERROR
                    3206            ;
0BC6 850D0A         3207    N4:     MOV     TXAH,TEMP3      ;GET TEXT POINTER
0BC9 850E08         3208            MOV     TXAL,TEMP4
0BCC 0113           3209            AJMP    ILOOP           ;EXIT
                    3210            ;
                    3211            ;***************************************************************
                    3212            ;
BASIC52Q                                                                                                      PAGE 57

                    3213            ; The statement action routine - RESTORE
                    3214            ;
                    3215            ;***************************************************************
                    3216            ;
0BCE 71D6           3217    SRESTR: ACALL   X_TR            ;SWAP POINTERS
0BD0 D19B           3218    SRESTR1:ACALL   DP_B            ;GET THE STARTING ADDRESS
0BD2 D1B8           3219            ACALL   T_DP            ;PUT STARTING ADDRESS IN TEXT POINTER
0BD4 F123           3220            ACALL   B_TXA           ;BUMP TXA
                    3221            ;
                    3222            ; Fall thru
                    3223            ;
0BD6                3224    X_TR:   ;swap txa and rtxa
                    3225            ;
0BD6 C50A           3226            XCH     A,TXAH
0BD8 C512           3227            XCH     A,RTXAH
0BDA C50A           3228            XCH     A,TXAH
0BDC C508           3229            XCH     A,TXAL
0BDE C510           3230            XCH     A,RTXAL
0BE0 C508           3231            XCH     A,TXAL
0BE2 22             3232            RET                     ;EXIT
                    3233            ;
                    3234            ;***************************************************************
                    3235            ;
                    3236            ; The statement action routine - READ
                    3237            ;
                    3238            ;***************************************************************
                    3239            ;
0BE3 71D6           3240    SREAD:  ACALL   X_TR            ;SWAP POINTERS
                    3241            ;
0BE5 D1C6           3242    SRD0:   ACALL   C_TST           ;CHECK FOR COMMA
0BE7 4016           3243            JC      SRD4            ;SEE WHAT IT IS
                    3244            ;
0BE9 F143           3245    SRD:    ACALL   EXPRB           ;EVALUATE THE EXPRESSION
0BEB D1CD           3246            ACALL   GC              ;GET THE CHARACTER AFTER EXPRESSION
0BED B42C02         3247            CJNE    A,#',',SRD1     ;SEE IF MORE DATA
0BF0 8002           3248            SJMP    SRD2            ;BYBASS CLEAN UP IF A COMMA
                    3249            ;
0BF2 F117           3250    SRD1:   ACALL   CLN_UP          ;FINISH OFF THE LINE, IF AT END
                    3251            ;
0BF4 71D6           3252    SRD2:   ACALL   X_TR            ;RESTORE POINTERS
0BF6 F101           3253            ACALL   VAR_ER          ;GET VARIABLE ADDRESS
0BF8 F1D1           3254            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0BFA D1C6           3255            ACALL   C_TST           ;SEE IF A COMMA
0BFC 50E5           3256            JNC     SREAD           ;READ AGAIN IF A COMMA
0BFE 22             3257    SRD21:  RET                     ;EXIT IF NOT
                    3258            ;
0BFF B49C04         3259    SRD4:   CJNE    A,#T_DATA,SRD5  ;SEE IF DATA
0C02 D1D7           3260            ACALL   GCI1            ;BUMP POINTER
0C04 80E3           3261            SJMP    SRD
                    3262            ;
0C06 B40108         3263    SRD5:   CJNE    A,#EOF,SRD6     ;SEE IF YOU BLEW IT
0C09 71D6           3264    SRD51:  ACALL   X_TR            ;GET THE TEXT POINTER BACK
0C0B 901F81         3265            MOV     DPTR,#E14X      ;READ ERROR
                    3266            ;
0C0E 02188F         3267    EK:     LJMP    ERROR
                    3268            ;
0C11 D1EC           3269    SRD6:   ACALL   FINDCR          ;WASTE THIS LINE
0C13 F117           3270            ACALL   CLN_UP          ;CLEAN IT UP
BASIC52Q                                                                                                      PAGE 58

0C15 40F2           3271            JC      SRD51           ;ERROR IF AT END
0C17 80CC           3272            SJMP    SRD0
                    3273            ;
0C19 D1CD           3274    NUMC:   ACALL   GC              ;GET A CHARACTER
0C1B B42304         3275            CJNE    A,#'#',NUMC1    ;SEE IF A #
0C1E D21B           3276            SETB    COB             ;VALID LINE PRINT
0C20 C1CB           3277            AJMP    IGC             ;BUMP THE TEXT POINTER
                    3278            ;
0C22 B440D9         3279    NUMC1:  CJNE    A,#'@',SRD21    ;EXIT IF NO GOOD
0C25 D219           3280            SETB    LPB
0C27 C1CB           3281            AJMP    IGC
                    3282            ;
                    3283            ;***************************************************************
                    3284            ;
                    3285            ; The statement action routine - PRINT
                    3286            ;
                    3287            ;***************************************************************
                    3288            ;
0C29 D236           3289    SPH0:   SETB    ZSURP           ;NO ZEROS
                    3290            ;
0C2B D237           3291    SPH1:   SETB    HMODE           ;HEX MODE
                    3292            ;
0C2D 9119           3293    SPRINT: ACALL   NUMC            ;TEST FOR A LINE PRINT
0C2F 9138           3294            ACALL   SPRINT2         ;PROCEED
0C31 5323F5         3295    SPRINT1:ANL     35,#11110101B   ;CLEAR COB AND LPB
0C34 53263F         3296            ANL     38,#00111111B   ;NO HEX MODE
                    3297            ;
0C37 22             3298            RET
                    3299            ;
0C38 D1E1           3300    SPRINT2:ACALL   DELTST          ;CHECK FOR A DELIMITER
0C3A 4007           3301            JC      SP1
                    3302            ;
0C3C 0206A5         3303    SP0:    JMP     CRLF            ;EXIT WITH A CR IF SO
                    3304            ;
0C3F D1C6           3305    SP2:    ACALL   C_TST           ;CHECK FOR A COMMA
0C41 40F9           3306            JC      SP0             ;EXIT IF NO COMMA
                    3307            ;
0C43 D1A9           3308    SP1:    ACALL   CPS             ;SEE IF A STRING TO PRINT
0C45 50F8           3309            JNC     SP2             ;IF A STRING, CHECK FOR A COMMA
                    3310            ;
0C47 B4A408         3311    SP4:    CJNE    A,#T_TAB,SP6
0C4A D195           3312            ACALL   I_PI            ;ALWAYS CLEARS CARRY
0C4C 9516           3313            SUBB    A,PHEAD         ;TAKE DELTA BETWEEN TAB AND PHEAD
0C4E 40EF           3314            JC      SP2             ;EXIT IF PHEAD > TAB
0C50 8005           3315            SJMP    SP7             ;OUTPUT SPACES
                    3316            ;
0C52 B4A90A         3317    SP6:    CJNE    A,#T_SPC,SM
0C55 D195           3318            ACALL   I_PI            ;SET UP PAREN VALUE
                    3319            ;
0C57 60E6           3320    SP7:    JZ      SP2
0C59 12070F         3321            LCALL   STEROT          ;OUTPUT A SPACE
0C5C 14             3322            DEC     A               ;DECREMENT COUNTER
0C5D 80F8           3323            SJMP    SP7             ;LOOP
                    3324            ;
0C5F B4D313         3325    SM:     CJNE    A,#T_CHR,SP8
0C62 D1CB           3326            ACALL   IGC
0C64 B42406         3327            CJNE    A,#'$',SM01
0C67 F1F9           3328            ACALL   CNX             ;PUT THE CHARACTER ON THE STACK
BASIC52Q                                                                                                      PAGE 59

0C69 D190           3329            ACALL   IFIXL           ;PUT THE CHARACTER IN R1
0C6B 8004           3330            SJMP    SM02
0C6D D18E           3331    SM01:   ACALL   ONE             ;EVALUATE THE EXPRESSION, PUT IN R3:R1
0C6F 91E3           3332            ACALL   ERPAR
0C71 AD01           3333    SM02:   MOV     R5,R1B0         ;BYTE TO OUTPUT
0C73 8007           3334            SJMP    SQ
                    3335            ;
0C75 B4AA09         3336    SP8:    CJNE    A,#T_CR,SX
0C78 D1D7           3337            ACALL   GCI1            ;EAT THE TOKEN
0C7A 7D0D           3338            MOV     R5,#CR
                    3339            ;
0C7C 120711         3340    SQ:     CALL    TEROT
0C7F 80BE           3341            SJMP    SP2             ;OUTPUT A CR AND DO IT AGAIN
                    3342            ;
0C81 B4D253         3343    SX:     CJNE    A,#T_USE,SP9    ;USING TOKEN
0C84 D1CB           3344            ACALL   IGC             ;GE THE CHARACTER AFTER THE USING TOKEN
0C86 B44616         3345            CJNE    A,#'F',U4       ;SEE IF FLOATING
0C89 7517F0         3346            MOV     FORMAT,#0F0H    ;SET FLOATING
0C8C D1CB           3347            ACALL   IGC             ;BUMP THE POINTER AND GET THE CHARACTER
0C8E D1D7           3348            ACALL   GCI1            ;BUMP IT AGAIN
0C90 540F           3349            ANL     A,#0FH          ;STRIP OFF ASCII BIAS
0C92 6007           3350            JZ      U3              ;EXIT IF ZERO
0C94 B40300         3351            CJNE    A,#3,SX1        ;SEE IF AT LEAST A THREE
0C97 5002           3352    SX1:    JNC     U3              ;FORCE A THREE IF NOT A THREE
0C99 7403           3353            MOV     A,#3
                    3354            ;
0C9B 4217           3355    U3:     ORL     FORMAT,A        ;PUT DIGIT IN FORMAT
0C9D 802A           3356            SJMP    U8              ;CLEAN UP END
                    3357            ;
0C9F B43007         3358    U4:     CJNE    A,#'0',U5
0CA2 751700         3359            MOV     FORMAT,#0       ;FREE FORMAT
0CA5 D1D7           3360            ACALL   GCI1            ;BUMP THE POINTER
0CA7 8020           3361            SJMP    U8
                    3362            ;
0CA9 B4231D         3363    U5:     CJNE    A,#'#',U8       ;SEE IF INTGER FORMAT
0CAC 91CD           3364            ACALL   U6
0CAE 8F17           3365            MOV     FORMAT,R7       ;SAVE THE FORMAT
0CB0 B42E11         3366            CJNE    A,#'.',U8A      ;SEE IF TERMINATOR WAS RADIX
0CB3 D1CB           3367            ACALL   IGC             ;BUMP PAST .
0CB5 91CD           3368            ACALL   U6              ;LOOP AGAIN
0CB7 EF             3369            MOV     A,R7            ;GET COUNT
0CB8 2517           3370            ADD     A,FORMAT        ;SEE IF TOO BIG
0CBA 24F7           3371            ADD     A,#0F7H
0CBC 5002           3372            JNC     U5A
                    3373            ;
0CBE 2138           3374    SE0:    AJMP    INTERX          ;ERROR, BAD SYNTAX
                    3375            ;
0CC0 EF             3376    U5A:    MOV     A,R7            ;GET THE COUNT BACK
0CC1 C4             3377            SWAP    A               ;ADJUST
0CC2 4217           3378            ORL     FORMAT,A        ;GET THE COUNT
                    3379            ;
0CC4 E517           3380    U8A:    MOV     A,FORMAT
                    3381            ;
0CC6 C4             3382    U8B:    SWAP    A               ;GET THE FORMAT RIGHT
0CC7 F517           3383            MOV     FORMAT,A
                    3384            ;
0CC9 91E3           3385    U8:     ACALL   ERPAR
0CCB 813F           3386            AJMP    SP2             ;DONE
BASIC52Q                                                                                                      PAGE 60

                    3387            ;
0CCD 7F00           3388    U6:     MOV     R7,#0           ;SET COUNTER
                    3389            ;
0CCF B4230C         3390    U7:     CJNE    A,#'#',SP9A     ;EXIT IF NOT A #
0CD2 0F             3391            INC     R7              ;BUMP COUNTER
0CD3 D1CB           3392            ACALL   IGC             ;GET THE NEXT CHARACTER
0CD5 80F8           3393            SJMP    U7              ;LOOP
                    3394            ;
0CD7 D1E3           3395    SP9:    ACALL   DELTST1         ;CHECK FOR DELIMITER
0CD9 5003           3396            JNC     SP9A            ;EXIT IF A DELIMITER
                    3397            ;
0CDB B4A834         3398            CJNE    A,#T_ELSE,SS
                    3399            ;
0CDE 22             3400    SP9A:   RET                     ;EXIT IF ELSE TOKEN
                    3401            ;
                    3402            ;**************************************************************
                    3403            ;
                    3404            ; P_E - Evaluate an expression in parens ( )
                    3405            ;
                    3406            ;**************************************************************
                    3407            ;
0CDF 7FE0           3408    P_E:    MOV     R7,#T_LPAR
0CE1 F141           3409            ACALL   WE
                    3410            ;
0CE3 7F29           3411    ERPAR:  MOV     R7,#')'         ;EAT A RIGHT PAREN
                    3412            ;
0CE5 D1D5           3413    EATC:   ACALL   GCI             ;GET THE CHARACTER
0CE7 B507D4         3414            CJNE    A,R7B0,SE0      ;ERROR IF NOT THE SAME
0CEA 22             3415            RET
                    3416            ;
                    3417            ;***************************************************************
                    3418            ;
0CEB                3419    S_ON:   ; ON Statement
                    3420            ;
                    3421            ;***************************************************************
                    3422            ;
0CEB D18E           3423            ACALL   ONE             ;GET THE EXPRESSION
0CED D1D5           3424            ACALL   GCI             ;GET THE NEXT CHARACTER
0CEF B48304         3425            CJNE    A,#T_GOTO,C0
0CF2 91FD           3426            ACALL   C1              ;EAT THE COMMAS
0CF4 4172           3427            AJMP    SF3             ;DO GOTO
                    3428            ;
0CF6 B49FC5         3429    C0:     CJNE    A,#T_GOSB,SE0
0CF9 91FD           3430            ACALL   C1
0CFB 612F           3431            AJMP    SGS0            ;DO GOSUB
                    3432            ;
0CFD B90006         3433    C1:     CJNE    R1,#0,C2
0D00 F130           3434            ACALL   INTERR          ;GET THE LINE NUMBER
0D02 D1EC           3435            ACALL   FINDCR
0D04 41F4           3436            AJMP    RL1             ;FINISH UP THIS LINE
                    3437            ;
0D06 7F2C           3438    C2:     MOV     R7,#','
0D08 D1EE           3439            ACALL   FINDC
0D0A B42CB1         3440            CJNE    A,#',',SE0      ;ERROR IF NOT A COMMA
0D0D 19             3441            DEC     R1
0D0E D1D7           3442            ACALL   GCI1            ;BUMP PAST COMMA
0D10 80EB           3443            SJMP    C1
                    3444            ;
BASIC52Q                                                                                                      PAGE 61

0D12 D1BF           3445    SS:     ACALL   S_C             ;SEE IF A STRING
0D14 4005           3446            JC      SA              ;NO STRING IF CARRY IS SET
0D16 1206BF         3447            LCALL   UPRNT           ;PUT POINTER IN DPTR
0D19 813F           3448            AJMP    SP2             ;SEE IF MORE
                    3449            ;
0D1B F143           3450    SA:     ACALL   EXPRB           ;MUST BE AN EXPRESSION
0D1D 7448           3451            MOV     A,#72
0D1F B51600         3452            CJNE    A,PHEAD,SA1     ;CHECK PHEAD POSITION
0D22 5002           3453    SA1:    JNC     SA2
0D24 913C           3454            ACALL   SP0             ;FORCE A CRLF
0D26 303714         3455    SA2:    JNB     HMODE,S13       ;HEX MODE?
0D29 121202         3456            CALL    FCMP            ;SEE IF TOS IS < 0FFFH
0D2C 400F           3457            JC      S13             ;EXIT IF GREATER
0D2E 12138F         3458            CALL    AABS            ;GET THE SIGN
0D31 7007           3459            JNZ     OOPS            ;WASTE IF NEGATIVE
0D33 D190           3460            ACALL   IFIXL
0D35 121985         3461            CALL    FP_BASE11       ;PRINT HEXMODE
0D38 813F           3462            AJMP    SP2
0D3A 1213A1         3463    OOPS:   CALL    ANEG            ;MAKE IT NEGATIVE
                    3464            ;
0D3D 12197D         3465    S13:    CALL    FP_BASE7        ;DO FP OUTPUT
0D40 7401           3466            MOV     A,#1            ;OUTPUT A SPACE
0D42 8157           3467            AJMP    SP7
                    3468            ;
                    3469            ;***************************************************************
                    3470            ;
                    3471            ; ANU -  Get variable name from text - set carry if not found
                    3472            ;        if succeeds returns variable in R7:R6
                    3473            ;        R6 = 0 if no digit in name
                    3474            ;
                    3475            ;***************************************************************
                    3476            ;
0D44 D1CB           3477    ANU:    ACALL   IGC             ;INCREMENT AND GET CHARACTER
0D46 121FED         3478            LCALL   DIGIT_CHECK     ;CHECK FOR DIGIT
0D49 400C           3479            JC      AL2             ;EXIT IF VALID DIGIT
0D4B B45F01         3480            CJNE    A,#'_',AL       ;SEE IF A _
0D4E 22             3481            RET
                    3482            ;
0D4F B44100         3483    AL:     CJNE    A,#'A',AL1      ;IS IT AN ASCII A?
0D52 4004           3484    AL1:    JC      AL3             ;EXIT IF CARRY IS SET
0D54 B45B00         3485            CJNE    A,#'Z'+1,AL2    ;IS IT LESS THAN AN ASCII Z
0D57 B3             3486    AL2:    CPL     C               ;FLIP CARRY
0D58 22             3487    AL3:    RET
                    3488            ;
0D59 30D53E         3489    SD01:   JNB     F0,VAR2
                    3490            ;
0D5C 901761         3491    SD0:    MOV     DPTR,#E6X
0D5F 810E           3492            AJMP    EK
                    3493            ;
0D61 D2D5           3494    SDIMX:  SETB    F0              ;SAYS DOING A DIMENSION
0D63 8002           3495            SJMP    VAR1
                    3496            ;
0D65 C2D5           3497    VAR:    CLR     F0              ;SAYS DOING A VARIABLE
                    3498            ;
0D67 D1CD           3499    VAR1:   ACALL   GC              ;GET THE CHARACTER
0D69 B14F           3500            ACALL   AL              ;CHECK FOR ALPHA
0D6B 5004           3501            JNC     VAR11           ;ERROR IF IN DIM
0D6D 20D5EC         3502            JB      F0,SD0
BASIC52Q                                                                                                      PAGE 62

0D70 22             3503            RET
0D71 FF             3504    VAR11:  MOV     R7,A            ;SAVE ALPHA CHARACTER
0D72 E4             3505            CLR     A               ;ZERO IN CASE OF FAILURE
0D73 FD             3506            MOV     R5,A            ;SAVE IT
                    3507            ;
0D74 FE             3508    VY:     MOV     R6,A
0D75 B144           3509            ACALL   ANU             ;CHECK FOR ALPHA OR NUMBER
0D77 4007           3510            JC      VX              ;EXIT IF NO ALPHA OR NUM
                    3511            ;
0D79 CF             3512            XCH     A,R7
0D7A 2D             3513            ADD     A,R5            ;NUMBER OF CHARACTERS IN ALPHABET
0D7B CF             3514            XCH     A,R7            ;PUT IT BACK
0D7C 7D1A           3515            MOV     R5,#26          ;FOR THE SECOND TIME AROUND
0D7E 80F4           3516            SJMP    VY
                    3517            ;
0D80 C215           3518    VX:     CLR     LINEB           ;TELL EDITOR A VARIABLE IS DECLARED
0D82 B4E02F         3519            CJNE    A,#T_LPAR,V4    ;SEE IF A LEFT PAREN
                    3520            ;
0D85 430680         3521            ORL     R6B0,#80H       ;SET BIT 7 TO SIGINIFY MATRIX
0D88 120619         3522            CALL    F_VAR           ;FIND THE VARIABLE
0D8B C002           3523            PUSH    R2B0            ;SAVE THE LOCATION
0D8D C000           3524            PUSH    R0B0
0D8F 50C8           3525            JNC     SD01            ;DEFAULT IF NOT IN TABLE
0D91 20D528         3526            JB      F0,SDI          ;NO DEFAULT FOR DIMENSION
0D94 790A           3527            MOV     R1,#10
0D96 7B00           3528            MOV     R3,#0
0D98 B1CC           3529            ACALL   D_CHK
                    3530            ;
0D9A D197           3531    VAR2:   ACALL   PAREN_INT       ;EVALUATE INTEGER IN PARENS
0D9C BB00BD         3532            CJNE    R3,#0,SD0       ;ERROR IF R3<>0
0D9F D082           3533            POP     DPL             ;GET VAR FOR LOOKUP
0DA1 D083           3534            POP     DPH
0DA3 E0             3535            MOVX    A,@DPTR         ;GET DIMENSION
0DA4 14             3536            DEC     A               ;BUMP OFFSET
0DA5 99             3537            SUBB    A,R1            ;A MUST BE > R1
0DA6 40B4           3538            JC      SD0
0DA8 1205C0         3539            LCALL   DECDP2          ;BUMP POINTER TWICE
0DAB 510D           3540            ACALL   VARB            ;CALCULATE THE BASE
                    3541            ;
0DAD C9             3542    X3120:  XCH     A,R1            ;SWAP R2:R0, R3:R1
0DAE C8             3543            XCH     A,R0
0DAF C9             3544            XCH     A,R1
0DB0 CB             3545            XCH     A,R3
0DB1 CA             3546            XCH     A,R2
0DB2 CB             3547            XCH     A,R3
0DB3 22             3548            RET
                    3549            ;
0DB4 20D5A5         3550    V4:     JB      F0,SD0          ;ERROR IF NO LPAR FOR DIM
0DB7 120619         3551            LCALL   F_VAR           ;GET SCALAR VARIABLE
0DBA C3             3552            CLR     C
0DBB 22             3553            RET
                    3554            ;
0DBC D197           3555    SDI:    ACALL   PAREN_INT       ;EVALUATE PAREN EXPRESSION
0DBE BB009B         3556            CJNE    R3,#0,SD0       ;ERROR IF NOT ZERO
0DC1 D000           3557            POP     R0B0            ;SET UP R2:R0
0DC3 D002           3558            POP     R2B0
0DC5 B1CC           3559            ACALL   D_CHK           ;DO DIM
0DC7 D1C6           3560            ACALL   C_TST           ;CHECK FOR COMMA
BASIC52Q                                                                                                      PAGE 63

0DC9 5096           3561            JNC     SDIMX           ;LOOP IF COMMA
0DCB 22             3562            RET                     ;RETURN IF NO COMMA
                    3563            ;
0DCC 09             3564    D_CHK:  INC     R1              ;BUMP FOR TABLE LOOKUP
0DCD E9             3565            MOV     A,R1
0DCE 608C           3566            JZ      SD0             ;ERROR IF 0FFFFH
0DD0 FC             3567            MOV     R4,A            ;SAVE FOR LATER
0DD1 900108         3568            MOV     DPTR,#MT_ALL    ;GET MATRIX ALLOCATION
0DD4 510D           3569            ACALL   VARB            ;DO THE CALCULATION
0DD6 AF83           3570            MOV     R7,DPH          ;SAVE MATRIX ALLOCATION
0DD8 AE82           3571            MOV     R6,DPL
0DDA 900106         3572            MOV     DPTR,#ST_ALL    ;SEE IF TOO MUCH MEMORY TAKEN
0DDD 1215B0         3573            CALL    FUL1            ;ST_ALL SHOULD BE > R3:R1
0DE0 900108         3574            MOV     DPTR,#MT_ALL    ;SAVE THE NEW MATRIX POINTER
0DE3 120605         3575            CALL    S31DP
0DE6 8882           3576            MOV     DPL,R0          ;GET VARIABLE ADDRESS
0DE8 8A83           3577            MOV     DPH,R2
0DEA EC             3578            MOV     A,R4            ;DIMENSION SIZE
0DEB F0             3579            MOVX    @DPTR,A         ;SAVE IT
0DEC 1205C0         3580            CALL    DECDP2          ;SAVE TARGET ADDRESS
                    3581            ;
0DEF EF             3582    R76S:   MOV     A,R7
0DF0 F0             3583            MOVX    @DPTR,A
0DF1 A3             3584            INC     DPTR
0DF2 EE             3585            MOV     A,R6            ;ELEMENT SIZE
0DF3 F0             3586            MOVX    @DPTR,A
0DF4 22             3587            RET                     ;R2:R0 STILL HAS SYMBOL TABLE ADDRESS
                    3588            ;
                    3589            ;***************************************************************
                    3590            ;
                    3591            ; The statement action routine - INPUT
                    3592            ;
                    3593            ;***************************************************************
                    3594            ;
0DF5 D1A9           3595    SINPUT: ACALL   CPS             ;PRINT STRING IF THERE
                    3596            ;
0DF7 D1C6           3597            ACALL   C_TST           ;CHECK FOR A COMMA
0DF9 5007           3598            JNC     IN2A            ;NO CRLF
0DFB 913C           3599            ACALL   SP0             ;DO A CRLF
                    3600            ;
0DFD 7D3F           3601    IN2:    MOV     R5,#'?'         ;OUTPUT A ?
0DFF 120711         3602            CALL    TEROT
                    3603            ;
0E02 D222           3604    IN2A:   SETB    INP_B           ;DOING INPUT
0E04 1206D8         3605            CALL    INLINE          ;INPUT THE LINE
0E07 C222           3606            CLR     INP_B
0E09 750F00         3607            MOV     TEMP5,#HIGH IBUF
0E0C 750E07         3608            MOV     TEMP4,#LOW IBUF
                    3609            ;
0E0F D1BF           3610    IN3:    ACALL   S_C             ;SEE IF A STRING
0E11 400D           3611            JC      IN3A            ;IF CARRY IS SET, NO STRING
0E13 B1AD           3612            ACALL   X3120           ;FLIP THE ADDRESSES
0E15 AB0F           3613            MOV     R3,TEMP5
0E17 A90E           3614            MOV     R1,TEMP4
0E19 319D           3615            ACALL   SSOOP
0E1B D1C6           3616            ACALL   C_TST           ;SEE IF MORE TO DO
0E1D 50DE           3617            JNC     IN2
0E1F 22             3618            RET
BASIC52Q                                                                                                      PAGE 64

                    3619            ;
0E20 12184D         3620    IN3A:   CALL    DTEMP           ;GET THE USER LOCATION
0E23 121957         3621            CALL    GET_NUM         ;GET THE USER SUPPLIED NUMBER
0E26 7018           3622            JNZ     IN5             ;ERROR IF NOT ZERO
0E28 121854         3623            CALL    TEMPD           ;SAVE THE DATA POINTER
0E2B F101           3624            ACALL   VAR_ER          ;GET THE VARIABLE
0E2D F1D1           3625            ACALL   XPOP            ;SAVE THE VARIABLE
0E2F 12184D         3626            CALL    DTEMP           ;GET DPTR BACK FROM VAR_ER
0E32 D1C6           3627            ACALL   C_TST           ;SEE IF MORE TO DO
0E34 4013           3628            JC      IN6             ;EXIT IF NO COMMA
0E36 E0             3629            MOVX    A,@DPTR         ;GET INPUT TERMINATOR
0E37 B42C06         3630            CJNE    A,#',',IN5      ;IF NOT A COMMA DO A CR AND TRY AGAIN
0E3A A3             3631            INC     DPTR            ;BUMP PAST COMMA AND READ NEXT VALUE
0E3B 121854         3632            CALL    TEMPD
0E3E 80CF           3633            SJMP    IN3
                    3634            ;
0E40 9000F3         3635    IN5:    MOV     DPTR,#IAN       ;PRINT INPUT A NUMBER
0E43 1206AD         3636            CALL    CRP             ;DO A CR, THEN, PRINT FROM ROM
0E46 021844         3637            LJMP    CC1             ;TRY IT AGAIN
                    3638            ;
0E49 E0             3639    IN6:    MOVX    A,@DPTR
0E4A B40D01         3640            CJNE    A,#CR,EIGP
0E4D 22             3641            RET
                    3642            ;
0E4E 90036D         3643    EIGP:   MOV     DPTR,#EIG
0E51 1206AD         3644            CALL    CRP             ;PRINT THE MESSAGE AND EXIT
0E54 813C           3645            AJMP    SP0             ;EXIT WITH A CRLF
                    3646            ;
                    3647            ;***************************************************************
                    3648            ;
0E56                3649    SOT:    ; On timer interrupt
                    3650            ;
                    3651            ;***************************************************************
                    3652            ;
0E56 D185           3653            ACALL   TWO             ;GET THE NUMBERS
0E58 8B4B           3654            MOV     SP_H,R3
0E5A 894C           3655            MOV     SP_L,R1
0E5C 900126         3656            MOV     DPTR,#TIV       ;SAVE THE NUMBER
0E5F D210           3657            SETB    OTS
0E61 A1EF           3658            AJMP    R76S            ;EXIT
                    3659            ;
                    3660            ;
                    3661            ;***************************************************************
                    3662            ;
0E63                3663    SCALL:  ; Call a user rountine
                    3664            ;
                    3665            ;***************************************************************
                    3666            ;
0E63 F130           3667            ACALL   INTERR          ;CONVERT INTEGER
0E65 BA000A         3668            CJNE    R2,#0,S_C_1     ;SEE IF TRAP
0E68 E8             3669            MOV     A,R0
0E69 20E706         3670            JB      ACC.7,S_C_1
0E6C 28             3671            ADD     A,R0
0E6D 904100         3672            MOV     DPTR,#4100H
0E70 F582           3673            MOV     DPL,A
                    3674            ;
0E72 316C           3675    S_C_1:  ACALL   AC1             ;JUMP TO USER PROGRAM
0E74 53D0E7         3676            ANL     PSW,#11100111B  ;BACK TO BANK 0
BASIC52Q                                                                                                      PAGE 65

0E77 22             3677            RET                     ;EXIT
                    3678            ;
                    3679            ;**************************************************************
                    3680            ;
0E78                3681    THREE:  ; Save value for timer function
                    3682            ;
                    3683            ;**************************************************************
                    3684            ;
0E78 D18E           3685            ACALL   ONE             ;GET THE FIRST INTEGER
0E7A 12167B         3686            CALL    CBIAS           ;BIAS FOR TIMER LOAD
0E7D 8B40           3687            MOV     T_HH,R3
0E7F 8941           3688            MOV     T_LL,R1
0E81 7F2C           3689            MOV     R7,#','         ;WASTE A COMMA
0E83 91E5           3690            ACALL   EATC            ;FALL THRU TO TWO
                    3691            ;
                    3692            ;**************************************************************
                    3693            ;
0E85                3694    TWO:    ; Get two values seperated by a comma off the stack
                    3695            ;
                    3696            ;**************************************************************
                    3697            ;
0E85 F143           3698            ACALL   EXPRB
0E87 7F2C           3699            MOV     R7,#','         ;WASTE THE COMMA
0E89 F141           3700            ACALL   WE
0E8B 0214A1         3701            JMP     TWOL            ;EXIT
                    3702            ;
                    3703            ;*************************************************************
                    3704            ;
0E8E                3705    ONE:    ; Evaluate an expression and get an integer
                    3706            ;
                    3707            ;*************************************************************
                    3708            ;
0E8E F143           3709            ACALL   EXPRB           ;EVALUATE EXPERSSION
                    3710            ;
0E90 121223         3711    IFIXL:  CALL    IFIX            ;INTEGERS IN R3:R1
0E93 E9             3712            MOV     A,R1
0E94 22             3713            RET
                    3714            ;
                    3715            ;
                    3716            ;*************************************************************
                    3717            ;
0E95                3718    I_PI:   ; Increment text pointer then get an integer
                    3719            ;
                    3720            ;*************************************************************
                    3721            ;
0E95 D1D7           3722            ACALL   GCI1            ;BUMP TEXT, THEN GET INTEGER
                    3723            ;
0E97                3724    PAREN_INT:; Get an integer in parens ( )
                    3725            ;
0E97 91DF           3726            ACALL   P_E
0E99 80F5           3727            SJMP    IFIXL
                    3728            ;
0E9B 851383         3729    DP_B:   MOV     DPH,BOFAH
0E9E 851482         3730            MOV     DPL,BOFAL
0EA1 22             3731            RET
                    3732            ;
0EA2 850A83         3733    DP_T:   MOV     DPH,TXAH
0EA5 850882         3734            MOV     DPL,TXAL
BASIC52Q                                                                                                      PAGE 66

0EA8 22             3735            RET
                    3736            ;
0EA9 D1CD           3737    CPS:    ACALL   GC              ;GET THE CHARACTER
0EAB B42273         3738            CJNE    A,#'"',NOPASS   ;EXIT IF NO STRING
0EAE D1A2           3739            ACALL   DP_T            ;GET TEXT POINTER
0EB0 A3             3740            INC     DPTR            ;BUMP PAST "
0EB1 7C22           3741            MOV     R4,#'"'
0EB3 1206C3         3742            CALL    PN0             ;DO THE PRINT
0EB6 A3             3743            INC     DPTR            ;GO PAST QUOTE
0EB7 C3             3744            CLR     C               ;PASSED TEST
                    3745            ;
0EB8 85830A         3746    T_DP:   MOV     TXAH,DPH        ;TEXT POINTER GETS DPTR
0EBB 858208         3747            MOV     TXAL,DPL
0EBE 22             3748            RET
                    3749            ;
                    3750            ;*************************************************************
                    3751            ;
0EBF                3752    S_C:    ; Check for a string
                    3753            ;
                    3754            ;*************************************************************
                    3755            ;
0EBF D1CD           3756            ACALL   GC              ;GET THE CHARACTER
0EC1 B4245D         3757            CJNE    A,#'$',NOPASS   ;SET CARRY IF NOT A STRING
0EC4 21E7           3758            AJMP    IST_CAL         ;CLEAR CARRY, CALCULATE OFFSET
                    3759            ;
                    3760            ;
                    3761            ;
                    3762            ;**************************************************************
                    3763            ;
0EC6 D1CD           3764    C_TST:  ACALL   GC              ;GET A CHARACTER
0EC8 B42C56         3765            CJNE    A,#',',NOPASS   ;SEE IF A COMMA
                    3766            ;
                    3767            ;***************************************************************
                    3768            ;
                    3769            ;GC AND GCI - GET A CHARACTER FROM TEXT (NO BLANKS)
                    3770            ;             PUT CHARACTER IN THE ACC
                    3771            ;
                    3772            ;***************************************************************
                    3773            ;
0ECB D1D7           3774    IGC:    ACALL   GCI1            ;BUMP POINTER, THEN GET CHARACTER
                    3775            ;
0ECD D2D3           3776    GC:     SETB    RS0             ;USE BANK 1
0ECF 8AA0           3777            MOV     P2,R2           ;SET UP PORT 2
0ED1 E2             3778            MOVX    A,@R0           ;GET EXTERNAL BYTE
0ED2 C2D3           3779            CLR     RS0             ;BACK TO BANK 0
0ED4 22             3780            RET                     ;EXIT
                    3781            ;
0ED5 D1CD           3782    GCI:    ACALL   GC
                    3783            ;
                    3784            ; This routine bumps txa by one and always clears the carry
                    3785            ;
0ED7 D2D3           3786    GCI1:   SETB    RS0             ;BANK 1
0ED9 08             3787            INC     R0              ;BUMP TXA
0EDA B80001         3788            CJNE    R0,#0,GCI11
0EDD 0A             3789            INC     R2
0EDE C2D3           3790    GCI11:  CLR     RS0
0EE0 22             3791            RET                     ;EXIT
                    3792            ;
BASIC52Q                                                                                                      PAGE 67

                    3793            ;**************************************************************
                    3794            ;
                    3795            ; Check delimiters
                    3796            ;
                    3797            ;**************************************************************
                    3798            ;
0EE1 D1CD           3799    DELTST: ACALL   GC              ;GET A CHARACTER
0EE3 B40D02         3800    DELTST1:CJNE    A,#CR,DT1       ;SEE IF A CR
0EE6 E4             3801            CLR     A
0EE7 22             3802            RET
                    3803            ;
0EE8 B43A36         3804    DT1:    CJNE    A,#':',NOPASS   ;SET CARRY IF NO MATCH
                    3805            ;
0EEB 22             3806    L_RET:  RET
                    3807            ;
                    3808            ;
                    3809            ;***************************************************************
                    3810            ;
                    3811            ; FINDC - Find the character in R7, update TXA
                    3812            ;
                    3813            ;***************************************************************
                    3814            ;
0EEC 7F0D           3815    FINDCR: MOV     R7,#CR          ;KILL A STATEMENT LINE
                    3816            ;
0EEE D1E1           3817    FINDC:  ACALL   DELTST
0EF0 50F9           3818            JNC     L_RET
                    3819            ;
0EF2 B50701         3820            CJNE    A,R7B0,FNDCL2   ;MATCH?
0EF5 22             3821            RET
                    3822            ;
0EF6 D1D7           3823    FNDCL2: ACALL   GCI1
0EF8 80F4           3824            SJMP    FINDC           ;LOOP
                    3825            ;
0EFA D1D7           3826    FNDCL3: ACALL   GCI1
                    3827            ;
0EFC D1E1           3828    WCR:    ACALL   DELTST          ;WASTE UNTIL A "REAL" CR
0EFE 70FA           3829            JNZ     FNDCL3
0F00 22             3830            RET
                    3831            ;
                    3832            ;***************************************************************
                    3833            ;
                    3834            ; VAR_ER - Check for a variable, exit if error
                    3835            ;
                    3836            ;***************************************************************
                    3837            ;
0F01 B165           3838    VAR_ER: ACALL   VAR
0F03 802D           3839            SJMP    INTERR1
                    3840            ;
                    3841            ;
                    3842            ;***************************************************************
                    3843            ;
                    3844            ; S_D0 - The Statement Action Routine DO
                    3845            ;
                    3846            ;***************************************************************
                    3847            ;
0F05 71BD           3848    S_DO:   ACALL   CSC             ;FINISH UP THE LINE
0F07 7C03           3849            MOV     R4,#DTYPE       ;TYPE FOR STACK
0F09 7135           3850            ACALL   SGS1            ;SAVE ON STACK
BASIC52Q                                                                                                      PAGE 68

0F0B 0113           3851            AJMP    ILOOP           ;EXIT
                    3852            ;
                    3853            ;***************************************************************
                    3854            ;
                    3855            ; CLN_UP - Clean up the end of a statement, see if at end of
                    3856            ;          file, eat character and line count after CR
                    3857            ;
                    3858            ;***************************************************************
                    3859            ;
0F0D B43A02         3860    C_2:    CJNE    A,#':',C_1      ;SEE IF A TERMINATOR
0F10 C1D7           3861            AJMP    GCI1            ;BUMP POINTER AND EXIT, IF SO
                    3862            ;
0F12 B4A86D         3863    C_1:    CJNE    A,#T_ELSE,EP5
0F15 D1FC           3864            ACALL   WCR             ;WASTE UNTIL A CR
                    3865            ;
0F17 D1CD           3866    CLN_UP: ACALL   GC              ;GET THE CHARACTER
0F19 B40DF1         3867            CJNE    A,#CR,C_2       ;SEE IF A CR
0F1C D1CB           3868            ACALL   IGC             ;GET THE NEXT CHARACTER
0F1E B40102         3869            CJNE    A,#EOF,B_TXA    ;SEE IF TERMINATOR
                    3870            ;
0F21 D3             3871    NOPASS: SETB    C
0F22 22             3872            RET
                    3873            ;
0F23 C508           3874    B_TXA:  XCH     A,TXAL          ;BUMP TXA BY THREE
0F25 2403           3875            ADD     A,#3
0F27 C508           3876            XCH     A,TXAL
0F29 10D701         3877            JBC     CY,B_TXA1
0F2C 22             3878            RET
0F2D 050A           3879    B_TXA1: INC     TXAH
0F2F 22             3880            RET
                    3881            ;
                    3882            ;***************************************************************
                    3883            ;
                    3884            ;         Get an INTEGER from the text
                    3885            ;         sets CARRY if not found
                    3886            ;         returns the INTGER value in DPTR and R2:R0
                    3887            ;         returns the terminator in ACC
                    3888            ;
                    3889            ;***************************************************************
                    3890            ;
0F30 F135           3891    INTERR: ACALL   INTGER          ;GET THE INTEGER
0F32 404E           3892    INTERR1:JC      EP5             ;ERROR IF NOT FOUND
0F34 22             3893            RET                     ;EXIT IF FOUND
                    3894            ;
0F35 D1A2           3895    INTGER: ACALL   DP_T
0F37 121981         3896            CALL    FP_BASE9        ;CONVERT THE INTEGER
0F3A D1B8           3897            ACALL   T_DP
0F3C 8A83           3898            MOV     DPH,R2          ;PUT THE RETURNED VALUE IN THE DPTR
0F3E 8882           3899            MOV     DPL,R0
                    3900            ;
0F40 22             3901    ITRET:  RET                     ;EXIT
                    3902            ;
                    3903            ;
0F41 91E5           3904    WE:     ACALL   EATC            ;WASTE THE CHARACTER
                    3905            ;
                    3906            ; Fall thru to evaluate the expression
                    3907            ;
                    3908            ;***************************************************************
BASIC52Q                                                                                                      PAGE 69

                    3909            ;
                    3910            ; EXPRB - Evaluate an expression
                    3911            ;
                    3912            ;***************************************************************
                    3913            ;
0F43 7ACF           3914    EXPRB:  MOV     R2,#LOW OPBOL   ;BASE PRECEDENCE
                    3915            ;
0F45 C002           3916    EP1:    PUSH    R2B0            ;SAVE OPERATOR PRECEDENCE
0F47 C224           3917            CLR     ARGF            ;RESET STACK DESIGNATOR
                    3918            ;
0F49 E581           3919    EP2:    MOV     A,SP            ;GET THE STACK POINTER
0F4B 240C           3920            ADD     A,#12           ;NEED AT LEAST 12 BYTES
0F4D 5003           3921            JNC     EP21
0F4F 02188C         3922            LJMP    E1XX2
0F52 E509           3923    EP21:   MOV     A,ASTKA         ;GET THE ARG STACK
0F54 9438           3924            SUBB    A,#LOW TM_TOP+12;NEED 12 BYTES ALSO
0F56 5003           3925            JNC     EP22
0F58 02121A         3926            LJMP    E4YY
0F5B 202413         3927    EP22:   JB      ARGF,EP4        ;MUST BE AN OPERATOR, IF SET
0F5E B165           3928            ACALL   VAR             ;IS THE VALUE A VARIABLE?
0F60 500D           3929            JNC     EP3             ;PUT VARIABLE ON STACK
                    3930            ;
0F62 F1EF           3931            ACALL   CONST           ;IS THE VALUE A NUMERIC CONSTANT?
0F64 500B           3932            JNC     EP4             ;IF SO, CONTINUE, IF NOT, SEE WHAT
0F66 D1CD           3933            CALL    GC              ;GET THE CHARACTER
0F68 B4E006         3934            CJNE    A,#T_LPAR,EP4   ;SEE IF A LEFT PAREN
0F6B 74D0           3935            MOV     A,#(LOW OPBOL+1)
0F6D 8055           3936            SJMP    XLPAR           ;PROCESS THE LEFT PAREN
                    3937            ;
0F6F F1DD           3938    EP3:    ACALL   PUSHAS          ;SAVE VAR ON STACK
                    3939            ;
0F71 D1CD           3940    EP4:    ACALL   GC              ;GET THE OPERATOR
                    3941            ;
0F73 B4E000         3942            CJNE    A,#T_LPAR,EP41  ;IS IT AN OPERATOR
0F76 500E           3943    EP41:   JNC     XOP             ;PROCESS OPERATOR
0F78 B4B000         3944            CJNE    A,#T_UOP,EP42   ;IS IT A UNARY OPERATOR
0F7B 503B           3945    EP42:   JNC     XBILT           ;PROCESS UNARY (BUILT IN) OPERATOR
0F7D D002           3946            POP     R2B0            ;GET BACK PREVIOUS OPERATOR PRECEDENCE
0F7F 2024BE         3947            JB      ARGF,ITRET      ;OK IF ARG FLAG IS SET
                    3948            ;
0F82 C3             3949    EP5:    CLR     C               ;NO RECOVERY
0F83 021887         3950            LJMP    E1XX1
                    3951            ;
                    3952            ; Process the operator
                    3953            ;
0F86 541F           3954    XOP:    ANL     A,#1FH          ;STRIP OFF THE TOKE BITS
0F88 202405         3955            JB      ARGF,XOP1       ;IF ARG FLAG IS SET, PROCESS
0F8B B4053C         3956            CJNE    A,#T_SUB-T_LPAR,XOP3
0F8E 7409           3957            MOV     A,#T_NEG-T_LPAR
                    3958            ;
0F90 24D0           3959    XOP1:   ADD     A,#LOW OPBOL+1  ;BIAS THE TABLE
0F92 FA             3960            MOV     R2,A
0F93 900000         3961            MOV     DPTR,#00H
0F96 93             3962            MOVC    A,@A+DPTR       ;GET THE CURRENT PRECEDENCE
0F97 FC             3963            MOV     R4,A
0F98 D0E0           3964            POP     ACC             ;GET THE PREVIOUS PRECEDENCE
0F9A FD             3965            MOV     R5,A            ;SAVE THE PREVIOUS PRECEDENCE
0F9B 93             3966            MOVC    A,@A+DPTR       ;GET IT
BASIC52Q                                                                                                      PAGE 70

0F9C B50404         3967            CJNE    A,R4B0,XOP11    ;SEE WHICH HAS HIGHER PRECEDENCE
0F9F B40C9E         3968            CJNE    A,#12,ITRET     ;SEE IF ANEG
0FA2 D3             3969            SETB    C
0FA3 509B           3970    XOP11:  JNC     ITRET           ;PROCESS NON-INCREASING PRECEDENCE
                    3971            ;
                    3972            ; Save increasing precedence
                    3973            ;
0FA5 C005           3974            PUSH    R5B0            ;SAVE OLD PRECEDENCE ADDRESS
0FA7 C002           3975            PUSH    R2B0            ;SAVE NEW PRECEDENCE ADDRESS
0FA9 D1D7           3976            ACALL   GCI1            ;EAT THE OPERATOR
0FAB F145           3977            ACALL   EP1             ;EVALUATE REMAINING EXPRESSION
0FAD D0E0           3978    XOP12:  POP     ACC
                    3979            ;
                    3980            ; R2 has the action address, now setup and perform operation
                    3981            ;
0FAF 900057         3982    XOP2:   MOV     DPTR,#OPTAB
0FB2 2430           3983            ADD     A,#LOW (NOT OPBOL)
0FB4 315C           3984            CALL    ISTA1           ;SET UP TO RETURN TO EP2
0FB6 E149           3985            AJMP    EP2             ;JUMP TO EVALUATE EXPRESSION
                    3986            ;
                    3987            ; Built-in operator processing
                    3988            ;
0FB8 D1D7           3989    XBILT:  ACALL   GCI1            ;EAT THE TOKEN
0FBA 2430           3990            ADD     A,#LOW (50H+LOW UOPBOL)
0FBC 2024C3         3991            JB      ARGF,EP5        ;XBILT MUST COME AFTER AN OPERATOR
0FBF B4EE00         3992            CJNE    A,#STP,XBILT1
0FC2 50EB           3993    XBILT1: JNC     XOP2
                    3994            ;
0FC4 C0E0           3995    XLPAR:  PUSH    ACC             ;PUT ADDRESS ON THE STACK
0FC6 91DF           3996            ACALL   P_E
0FC8 80E3           3997            SJMP    XOP12           ;PERFORM OPERATION
                    3998            ;
0FCA B403B5         3999    XOP3:   CJNE    A,#T_ADD-T_LPAR,EP5
0FCD D1D7           4000            ACALL   GCI1
0FCF E149           4001            AJMP    EP2             ;WASTE + SIGN
                    4002            ;
0FD1 B1AD           4003    XPOP:   ACALL   X3120           ;FLIP ARGS THEN POP
                    4004            ;
                    4005            ;***************************************************************
                    4006            ;
                    4007            ; POPAS - Pop arg stack and copy variable to R3:R1
                    4008            ;
                    4009            ;***************************************************************
                    4010            ;
0FD3 12124F         4011    POPAS:  LCALL   INC_ASTKA
0FD6 021472         4012            JMP     VARCOP          ;COPY THE VARIABLE
                    4013            ;
0FD9 7A01           4014    AXTAL:  MOV     R2,#HIGH CXTAL
0FDB 7813           4015            MOV     R0,#LOW CXTAL
                    4016            ;
                    4017            ; fall thru
                    4018            ;
                    4019            ;***************************************************************
                    4020            ;
0FDD                4021    PUSHAS: ; Push the Value addressed by R2:R0 onto the arg stack
                    4022            ;
                    4023            ;***************************************************************
                    4024            ;
BASIC52Q                                                                                                      PAGE 71

0FDD 12120B         4025            CALL    DEC_ASTKA
0FE0 D224           4026            SETB    ARGF            ;SAYS THAT SOMTHING IS ON THE STACK
0FE2 021472         4027            LJMP    VARCOP
                    4028            ;
                    4029            ;
                    4030            ;***************************************************************
                    4031            ;
0FE5                4032    ST_A:   ; Store at expression
                    4033            ;
                    4034            ;***************************************************************
                    4035            ;
0FE5 D18E           4036            ACALL   ONE             ;GET THE EXPRESSION
0FE7 80EA           4037            SJMP    POPAS           ;SAVE IT
                    4038            ;
                    4039            ;
                    4040            ;***************************************************************
                    4041            ;
0FE9                4042    LD_A:   ; Load at expression
                    4043            ;
                    4044            ;***************************************************************
                    4045            ;
0FE9 D18E           4046            ACALL   ONE             ;GET THE EXPRESSION
0FEB B1AD           4047            ACALL   X3120           ;FLIP ARGS
0FED 80EE           4048            SJMP    PUSHAS
                    4049            ;
                    4050            ;***************************************************************
                    4051            ;
0FEF                4052    CONST:  ; Get a constant fron the text
                    4053            ;
                    4054            ;***************************************************************
                    4055            ;
0FEF D1CD           4056            CALL    GC              ;FIRST SEE IF LITERAL
0FF1 B4D131         4057            CJNE    A,#T_ASC,C0C    ;SEE IF ASCII TOKEN
0FF4 D1CB           4058            CALL    IGC             ;GET THE CHARACTER AFTER TOKEN
0FF6 B42405         4059            CJNE    A,#'$',CN0      ;SEE IF A STRING
                    4060            ;
0FF9 511E           4061    CNX:    CALL    CSY             ;CALCULATE IT
0FFB 0213C0         4062            JMP     AXBYTE1         ;SAVE IT ON THE STACK
                    4063    ;
                    4064    ;*****************************************************************************
                    4065    ;****** Correct ASC(x) bug ***************************************************
                    4066    ;****** Wulf 5 ***************************************************************
                    4067    ;
                    4068    ;
0FFE 30E71B         4069    CN0:    jnb     acc.7,cn0t      ;jump if possibly ascii
1001 900175         4070            mov     dptr,#toktab
1004 FE             4071            mov     r6,a            ;save search token
1005 F4             4072    cn0t1:  cpl     a
1006 6013           4073            jz      cn0t4           ;jump if EOT
1008 E4             4074            clr     a
1009 93             4075            movc    a,@a+dptr       ;read token from token table
100A A3             4076            inc     dptr
100B B506F7         4077            cjne    a,r6b0,cn0t1    ;jump if wrong entry
                    4078            ;
100E FD             4079            mov     r5,a            ;save search token
100F E4             4080            clr     a
1010 93             4081    cn0t2:  movc    a,@a+dptr
1011 FE             4082            mov     r6,a            ;save first ascii of token text
BASIC52Q                                                                                                      PAGE 72

                    4083            ;
1012 E4             4084    cn0t3:  clr     a
1013 93             4085            movc    a,@a+dptr
1014 A3             4086            inc     dptr
1015 30E7FA         4087            jnb     acc.7,cn0t3     ;jump if possibly ascii
                    4088            ;
1018 6D             4089            xrl     a,r5
1019 60F5           4090            jz      cn0t2           ;jump if same search token again
                    4091            ;
101B EE             4092    cn0t4:  mov     a,r6            ;get saved ascii
101C 1214B1         4093    CN0t:   CALL    TWO_R2          ;PUT IT ON THE STACK
                    4094    ;
                    4095    ;****** continue with original code: *****************************************
                    4096    ;
101F 120ED7         4097            CALL    GCI1            ;BUMP THE POINTER
1022 020CE3         4098            JMP     ERPAR           ;WASTE THE RIGHT PAREN
                    4099            ;
1025 120EA2         4100    C0C:    CALL    DP_T            ;GET THE TEXT POINTER
1028 121957         4101            CALL    GET_NUM         ;GET THE NUMBER
102B B4FF02         4102            CJNE    A,#0FFH,C1C     ;SEE IF NO NUMBER
102E D3             4103            SETB    C
102F 22             4104    C2C:    RET
                    4105            ;
1030 7006           4106    C1C:    JNZ     FPTST
1032 C3             4107            CLR     C
1033 D224           4108            SETB    ARGF
                    4109            ;
1035 020EB8         4110    C3C:    JMP     T_DP
                    4111            ;
1038 540B           4112    FPTST:  ANL     A,#00001011B    ;CHECK FOR ERROR
103A 60F3           4113            JZ      C2C             ;EXIT IF ZERO
                    4114            ;
                    4115            ; Handle the error condition
                    4116            ;
103C 901751         4117            MOV     DPTR,#E2X       ;DIVIDE BY ZERO
103F 30E003         4118            JNB     ACC.0,FPTST1    ;UNDERFLOW
1042 901804         4119            MOV     DPTR,#E7X
1045 30E103         4120    FPTST1: JNB     ACC.1,FPTS      ;OVERFLOW
1048 901F89         4121            MOV     DPTR,#E11X
                    4122            ;
104B 02188F         4123    FPTS:   JMP     ERROR
                    4124            ;
                    4125            ;***************************************************************
                    4126            ;
                    4127            ; The Command action routine - LIST
                    4128            ;
                    4129            ;***************************************************************
                    4130            ;
104E 120C19         4131    CLIST:  CALL    NUMC            ;SEE IF TO LINE PORT
1051 71CB           4132            ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
1053 120F35         4133            CALL    INTGER          ;SEE IF USER SUPPLIES LN
1056 E4             4134            CLR     A               ;LN = 0 TO START
1057 FB             4135            MOV     R3,A
1058 F9             4136            MOV     R1,A
1059 4014           4137            JC      CL1             ;START FROM ZERO
                    4138            ;
105B 121854         4139            CALL    TEMPD           ;SAVE THE START ADDTESS
105E 120ED5         4140            CALL    GCI             ;GET THE CHARACTER AFTER LIST
BASIC52Q                                                                                                      PAGE 73

1061 B4E507         4141            CJNE    A,#T_SUB,CLIST1 ;CHECK FOR TERMINATION ADDRESS '-'
1064 514F           4142            ACALL   INC_ASTKA       ;WASTE 0FFFFH
1066 120F30         4143            LCALL   INTERR          ;GET TERMINATION ADDRESS
1069 91B4           4144            ACALL   TWO_EY          ;PUT TERMINATION ON THE ARG STACK
106B AB0F           4145    CLIST1: MOV     R3,TEMP5        ;GET THE START ADDTESS
106D A90E           4146            MOV     R1,TEMP4
                    4147            ;
106F 12058C         4148    CL1:    CALL    GETLIN          ;GET THE LINE NO IN R3:R1
1072 601E           4149            JZ      CL3             ;RET IF AT END
                    4150            ;
1074 1135           4151    CL2:    ACALL   C3C             ;SAVE THE ADDRESS
1076 A3             4152            INC     DPTR            ;POINT TO LINE NUMBER
1077 D152           4153            ACALL   PMTOP1          ;PUT LINE NUMBER ON THE STACK
1079 5108           4154            ACALL   CMPLK           ;COMPARE LN TO END ADDRESS
107B 4015           4155            JC      CL3             ;EXIT IF GREATER
107D 12078D         4156            CALL    BCK             ;CHECK FOR A CONTROL C
1080 510B           4157            ACALL   DEC_ASTKA       ;SAVE THE COMPARE ADDRESS
1082 120EA2         4158            CALL    DP_T            ;RESTORE ADDRESS
1085 11A3           4159            ACALL   UPPL            ;UN-PROCESS THE LINE
1087 1135           4160            ACALL   C3C             ;SAVE THE CR ADDRESS
1089 1194           4161            ACALL   CL6             ;PRINT IT
108B A3             4162            INC     DPTR            ;BUMP POINTER TO NEXT LINE
108C E0             4163            MOVX    A,@DPTR         ;GET LIN LENGTH
108D D5E0E4         4164            DJNZ    ACC,CL2         ;LOOP
1090 514F           4165            ACALL   INC_ASTKA       ;WASTE THE COMPARE BYTE
                    4166            ;
1092 E187           4167    CL3:    AJMP    CMND1           ;BACK TO COMMAND PROCESSOR
                    4168            ;
1094 900007         4169    CL6:    MOV     DPTR,#IBUF      ;PRINT IBUF
1097 1206C1         4170            CALL    PRNTCR          ;PRINT IT
109A 120EA2         4171            CALL    DP_T
                    4172            ;
109D 0206A5         4173    CL7:    JMP     CRLF
                    4174            ;
10A0 120579         4175    UPPL0:  LCALL   X31DP
                    4176            ;
                    4177            ;***************************************************************
                    4178            ;
                    4179            ;UPPL - UN PREPROCESS A LINE ADDRESSED BY DPTR INTO IBUF
                    4180            ;       RETURN SOURCE ADDRESS OF CR IN DPTR ON RETURN
                    4181            ;
                    4182            ;***************************************************************
                    4183            ;
10A3 7B00           4184    UPPL:   MOV     R3,#HIGH IBUF   ;POINT R3 AT HIGH IBUF
10A5 7907           4185            MOV     R1,#LOW IBUF    ;POINT R1 AT IBUF
10A7 A3             4186            INC     DPTR            ;SKIP OVER LINE LENGTH
                    4187    ;
                    4188    ;*****************************************************************************
                    4189    ;****** Elektor 1 Patch ******************************************************
                    4190    ;
                    4191    ;       ACALL   C3C             ;SAVE THE DPTR (DP_T)
                    4192    ;       CALL    L20DPI          ;PUT LINE NUMBER IN R2:R0
                    4193    ;       CALL    FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4194    ;       CALL    DP_T
                    4195    ;       INC     DPTR            ;BUMP DPTR PAST THE LINE NUMBER
                    4196    ;
                    4197    ;****** Proper code starts here: *********************************************
                    4198    ;
BASIC52Q                                                                                                      PAGE 74

10A8 120573         4199            lcall   L20DPI          ;PUT LINE NUMBER IN R2:R0
10AB 12197F         4200            lcall   FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4201    ;
                    4202    ;****** continue with original code: *****************************************
                    4203    ;
10AE B90D00         4204    UPP0:   CJNE    R1,#LOW IBUF+6,UPP01
10B1 4022           4205    UPP01:  JC      UPP91           ;PUT SPACES IN TEXT
10B3 A3             4206            INC     DPTR            ;BUMP PAST LN HIGH
10B4 E0             4207            MOVX    A,@DPTR         ;GET USER TEXT
10B5 FE             4208            MOV     R6,A            ;SAVE A IN R6 FOR TOKE COMPARE
10B6 20E724         4209            JB      ACC.7,UPP1      ;IF TOKEN, PROCESS
10B9 B42000         4210            CJNE    A,#20H,UPP02    ;TRAP THE USER TOKENS
10BC 5003           4211    UPP02:  JNC     UPP03
10BE B40D1C         4212            CJNE    A,#CR,UPP1      ;DO IT IF NOT A CR
10C1 B42209         4213    UPP03:  CJNE    A,#'"',UPP9     ;SEE IF STRING
10C4 3121           4214            ACALL   UPP7            ;SAVE IT
10C6 3123           4215    UPP04:  ACALL   UPP8            ;GET THE NEXT CHARACTER AND SAVE IT
10C8 B422FB         4216            CJNE    A,#'"',UPP04    ;LOOP ON QUOTES
10CB 80E1           4217            SJMP    UPP0
                    4218            ;
10CD B43A09         4219    UPP9:   CJNE    A,#':',UPP1A    ;PUT A SPACE IN DELIMITER
10D0 311F           4220            ACALL   UPP7A
10D2 EE             4221            MOV     A,R6
10D3 3121           4222            ACALL   UPP7
10D5 311F           4223    UPP91:  ACALL   UPP7A
10D7 80D5           4224            SJMP    UPP0
                    4225            ;
10D9 3125           4226    UPP1A:  ACALL   UPP81           ;SAVE THE CHARACTER, UPDATE POINTER
10DB 80D1           4227            SJMP    UPP0            ;EXIT IF A CR, ELSE LOOP
                    4228            ;
10DD 1135           4229    UPP1:   ACALL   C3C             ;SAVE THE TEXT POINTER
10DF A22D           4230            MOV     C,XBIT
10E1 92D5           4231            MOV     F0,C            ;SAVE XBIT IN F0
10E3 900175         4232    UPP11:  MOV     DPTR,#TOKTAB    ;POINT AT TOKEN TABLE
10E6 30D503         4233            JNB     F0,UPP2
10E9 122078         4234            LCALL   2078H           ;SET UP DPTR FOR LOOKUP
                    4235            ;
10EC E4             4236    UPP2:   CLR     A               ;ZERO A FOR LOOKUP
10ED 93             4237            MOVC    A,@A+DPTR       ;GET TOKEN
10EE A3             4238            INC     DPTR            ;ADVANCE THE TOKEN POINTER
10EF B4FF05         4239            CJNE    A,#0FFH,UP_2    ;SEE IF DONE
10F2 10D5EE         4240            JBC     F0,UPP11        ;NOW DO NORMAL TABLE
10F5 E187           4241            AJMP    CMND1           ;EXIT IF NOT FOUND
                    4242            ;
10F7 B506F2         4243    UP_2:   CJNE    A,R6B0,UPP2     ;LOOP UNTIL THE SAME
                    4244            ;
10FA B4B000         4245    UP_3:   CJNE    A,#T_UOP,UP_4
10FD 5002           4246    UP_4:   JNC     UPP3
10FF 311F           4247            ACALL   UPP7A           ;PRINT THE SPACE IF OK
                    4248            ;
1101 E4             4249    UPP3:   CLR     A               ;DO LOOKUP
1102 93             4250            MOVC    A,@A+DPTR
1103 20E707         4251            JB      ACC.7,UPP4      ;EXIT IF DONE, ELSE SAVE
1106 6005           4252            JZ      UPP4            ;DONE IF ZERO
1108 3121           4253            ACALL   UPP7            ;SAVE THE CHARACTER
110A A3             4254            INC     DPTR
110B 80F4           4255            SJMP    UPP3            ;LOOP
                    4256            ;
BASIC52Q                                                                                                      PAGE 75

110D 120EA2         4257    UPP4:   CALL    DP_T            ;GET IT BACK
1110 EE             4258            MOV     A,R6            ;SEE IF A REM TOKEN
1111 6496           4259            XRL     A,#T_REM
1113 7004           4260            JNZ     UPP42
1115 3123           4261    UPP41:  ACALL   UPP8
1117 80FC           4262            SJMP    UPP41
1119 5093           4263    UPP42:  JNC     UPP0            ;START OVER AGAIN IF NO TOKEN
111B 311F           4264            ACALL   UPP7A           ;PRINT THE SPACE IF OK
111D 808F           4265            SJMP    UPP0            ;DONE
                    4266            ;
111F 7420           4267    UPP7A:  MOV     A,#' '          ;OUTPUT A SPACE
                    4268            ;
1121 C144           4269    UPP7:   AJMP    PPL91           ;SAVE A
                    4270            ;
1123 A3             4271    UPP8:   INC     DPTR
1124 E0             4272            MOVX    A,@DPTR
1125 B40DF9         4273    UPP81:  CJNE    A,#CR,UPP7
1128 C130           4274            AJMP    PPL71
                    4275            ;
                    4276            ;**************************************************************
                    4277            ;
                    4278            ; This table contains all of the floating point constants
                    4279            ;
                    4280            ; The constants in ROM are stored "backwards" from the way
                    4281            ; basic normally treats floating point numbers. Instead of
                    4282            ; loading from the exponent and decrementing the pointer,
                    4283            ; ROM constants pointers load from the most significant
                    4284            ; digits and increment the pointers. This is done to 1) make
                    4285            ; arg stack loading faster and 2) compensate for the fact that
                    4286            ; no decrement data pointer instruction exsist.
                    4287            ;
                    4288            ; The numbers are stored as follows:
                    4289            ;
                    4290            ; BYTE X+5    = MOST SIGNIFICANT DIGITS IN BCD
                    4291            ; BYTE X+4    = NEXT MOST SIGNIFICANT DIGITS IN BCD
                    4292            ; BYTE X+3    = NEXT LEAST SIGNIFICANT DIGITS IN BCD
                    4293            ; BYTE X+2    = LEAST SIGNIFICANT DIGITS IN BCD
                    4294            ; BYTE X+1    = SIGN OF THE ABOVE MANTISSA 0 = +, 1 = -
                    4295            ; BYTE X      = EXPONENT IN TWO'S COMPLEMENT BINARY
                    4296            ;               ZERO EXPONENT = THE NUMBER ZERO
                    4297            ;
                    4298            ;**************************************************************
                    4299            ;
112A 7E             4300    ATTAB:  DB      128-2           ; ARCTAN LOOKUP
112B 00             4301            DB      00H
112C 57             4302            DB      57H
112D 22             4303            DB      22H
112E 66             4304            DB      66H
112F 28             4305            DB      28H
                    4306            ;
1130 7F             4307            DB      128-1
1131 01             4308            DB      01H
1132 37             4309            DB      37H
1133 57             4310            DB      57H
1134 16             4311            DB      16H
1135 16             4312            DB      16H
                    4313            ;
1136 7F             4314            DB      128-1
BASIC52Q                                                                                                      PAGE 76

1137 00             4315            DB      00H
1138 14             4316            DB      14H
1139 96             4317            DB      96H
113A 90             4318            DB      90H
113B 42             4319            DB      42H
                    4320            ;
113C 7F             4321            DB      128-1
113D 01             4322            DB      01H
113E 40             4323            DB      40H
113F 96             4324            DB      96H
1140 28             4325            DB      28H
1141 75             4326            DB      75H
                    4327            ;
1142 80             4328            DB      128
1143 00             4329            DB      00H
1144 64             4330            DB      64H
1145 62             4331            DB      62H
1146 65             4332            DB      65H
1147 10             4333            DB      10H
                    4334            ;
1148 80             4335            DB      128
1149 01             4336            DB      01H
114A 99             4337            DB      99H
114B 88             4338            DB      88H
114C 20             4339            DB      20H
114D 14             4340            DB      14H
                    4341            ;
114E 80             4342            DB      128
114F 00             4343            DB      00H
1150 51             4344            DB      51H
1151 35             4345            DB      35H
1152 99             4346            DB      99H
1153 19             4347            DB      19H
                    4348            ;
1154 80             4349            DB      128
1155 01             4350            DB      01H
1156 45             4351            DB      45H
1157 31             4352            DB      31H
1158 33             4353            DB      33H
1159 33             4354            DB      33H
                    4355            ;
115A 81             4356            DB      129
115B 00             4357            DB      00H
115C 00             4358            DB      00H
115D 00             4359            DB      00H
115E 00             4360            DB      00H
115F 10             4361            DB      10H
                    4362            ;
1160 FF             4363            DB      0FFH            ;END OF TABLE
                    4364            ;
1161 81             4365    NTWO:   DB      129
1162 00             4366            DB      0
1163 00             4367            DB      0
1164 00             4368            DB      0
1165 00             4369            DB      0
1166 20             4370            DB      20H
                    4371    ;
                    4372    ;*****************************************************************************
BASIC52Q                                                                                                      PAGE 77

                    4373    ;****** Use XTAL up to 47 MHz ************************************************
                    4374    ;****** Wulf 2 ***************************************************************
                    4375    ;
                    4376    ;TTIME: DB      128-4           ; CLOCK CALCULATION
                    4377    ;       DB      00H
                    4378    ;       DB      00H
                    4379    ;       DB      00H
                    4380    ;       DB      04H
                    4381    ;       DB      13H
                    4382    ;
1167 7B             4383    ttime:  db      128-5           ;New clock calculation for timer 0 in
1168 00             4384            db      00H             ;16 bit mode
1169 42             4385            db      42H
116A 60             4386            db      60H
116B 27             4387            db      27H
116C 16             4388            db      16H
                    4389    ;
                    4390    ;*****************************************************************************
                    4391    ;
                    4392            ;***************************************************************
                    4393            ;
                    4394            ; COSINE - Add pi/2 to stack, then fall thru to SIN
                    4395            ;
                    4396            ;***************************************************************
                    4397            ;
116D 3192           4398    ACOS:   ACALL   POTWO           ;PUT PI/2 ON THE STACK
116F F141           4399            ACALL   AADD            ;TOS = TOS+PI/2
                    4400            ;
                    4401            ;***************************************************************
                    4402            ;
                    4403            ; SINE - use taylor series to calculate sin function
                    4404            ;
                    4405            ;***************************************************************
                    4406            ;
1171 917F           4407    ASIN:   ACALL   PIPI            ;PUT PI ON THE STACK
1173 31B5           4408            ACALL   RV              ;REDUCE THE VALUE
1175 E546           4409            MOV     A,MT2           ;CALCULATE THE SIGN
1177 5401           4410            ANL     A,#01H          ;SAVE LSB
1179 6245           4411            XRL     MT1,A           ;SAVE SIGN IN MT1
117B 912C           4412            ACALL   CSTAKA          ;NOW CONVERT TO ONE QUADRANT
117D 3192           4413            ACALL   POTWO
117F 5108           4414            ACALL   CMPLK           ;DO COMPARE
1181 4004           4415            JC      ASIN1
1183 917F           4416            ACALL   PIPI
1185 F11C           4417            ACALL   ASUB
1187 718F           4418    ASIN1:  ACALL   AABS
1189 9016CE         4419            MOV     DPTR,#SINTAB    ;SET UP LOOKUP TABLE
118C 319B           4420            ACALL   POLYC           ;CALCULATE THE POLY
118E 31DA           4421            ACALL   STRIP
1190 21FC           4422            AJMP    SIN0
                    4423            ;
                    4424            ; Put PI/2 on the stack
                    4425            ;
1192 917F           4426    POTWO:  ACALL   PIPI            ;PUT PI ON THE STACK, NOW DIVIDE
                    4427            ;
1194 901161         4428    DBTWO:  MOV     DPTR,#NTWO
1197 9133           4429            ACALL   PUSHC
                    4430            ;MOV    A,#2            ;BY TWO
BASIC52Q                                                                                                      PAGE 78

                    4431            ;ACALL  TWO_R2
1199 810A           4432            AJMP    ADIV
                    4433            ;
                    4434            ;*************************************************************
                    4435            ;
119B                4436    POLYC:  ; Expand a power series to calculate a polynomial
                    4437            ;
                    4438            ;*************************************************************
                    4439            ;
119B 912A           4440            ACALL   CSTAKA2         ;COPY THE STACK
119D 31B0           4441            ACALL   AMUL            ;SQUARE THE STACK
119F 9148           4442            ACALL   POP_T1          ;SAVE X*X
11A1 9133           4443            ACALL   PUSHC           ;PUT CONSTANT ON STACK
                    4444            ;
11A3 914F           4445    POLY1:  ACALL   PUSH_T1         ;PUT COMPUTED VALUE ON STACK
11A5 31B0           4446            ACALL   AMUL            ;MULTIPLY CONSTANT AND COMPUTED VALUE
11A7 9133           4447            ACALL   PUSHC           ;PUT NEXT CONSTANT ON STACK
11A9 F141           4448            ACALL   AADD            ;ADD IT TO THE OLD VALUE
11AB E4             4449            CLR     A               ;CHECK TO SEE IF DONE
11AC 93             4450            MOVC    A,@A+DPTR
11AD B4FFF3         4451            CJNE    A,#0FFH,POLY1   ;LOOP UNTIL DONE
                    4452            ;
11B0 121975         4453    AMUL:   LCALL   FP_BASE3
11B3 0138           4454            AJMP    FPTST
                    4455            ;
                    4456            ;*************************************************************
                    4457            ;
11B5                4458    RV:     ; Reduce a value for Trig and A**X functions
                    4459            ;
                    4460            ; value = (value/x - INT(value/x)) * x
                    4461            ;
                    4462            ;*************************************************************
                    4463            ;
11B5 916C           4464            ACALL   C2_T2           ;COPY TOS TO T2
11B7 910A           4465            ACALL   ADIV            ;TOS = TOS/TEMP2
11B9 718F           4466            ACALL   AABS            ;MAKE THE TOS A POSITIVE NUMBER
11BB F545           4467            MOV     MT1,A           ;SAVE THE SIGN
11BD 912A           4468            ACALL   CSTAKA2         ;COPY THE STACK TWICE
11BF 5123           4469            ACALL   IFIX            ;PUT THE NUMBER IN R3:R1
11C1 C003           4470            PUSH    R3B0            ;SAVE R3
11C3 8946           4471            MOV     MT2,R1          ;SAVE THE LS BYTE IN MT2
11C5 716D           4472            ACALL   AINT            ;MAKE THE TOS AN INTEGER
11C7 F11C           4473            ACALL   ASUB            ;TOS = TOS/T2 - INT(TOS/T2)
11C9 9156           4474            ACALL   P_T2            ;TOS = T2
11CB 31B0           4475            ACALL   AMUL            ;TOS = T2*(TOS/T2 - INT(TOS/T2)
11CD D003           4476            POP     R3B0            ;RESTORE R3
11CF 22             4477            RET                     ;EXIT
                    4478            ;
                    4479            ;**************************************************************
                    4480            ;
                    4481            ; TAN
                    4482            ;
                    4483            ;**************************************************************
                    4484            ;
11D0 912C           4485    ATAN:   ACALL   CSTAKA          ;DUPLACATE STACK
11D2 3171           4486            ACALL   ASIN            ;TOS = SIN(X)
11D4 915A           4487            ACALL   SWAP_ASTKA      ;TOS = X
11D6 316D           4488            ACALL   ACOS            ;TOS = COS(X)
BASIC52Q                                                                                                      PAGE 79

11D8 810A           4489            AJMP    ADIV            ;TOS = SIN(X)/COS(X)
                    4490            ;
11DA 5153           4491    STRIP:  ACALL   SETREG          ;SETUP R0
11DC 7B01           4492            MOV     R3,#1           ;LOOP COUNT
11DE 6181           4493            AJMP    AI11            ;WASTE THE LSB
                    4494            ;
                    4495            ;************************************************************
                    4496            ;
                    4497            ; ARC TAN
                    4498            ;
                    4499            ;************************************************************
                    4500            ;
11E0 718F           4501    AATAN:  ACALL   AABS
11E2 F545           4502            MOV     MT1,A           ;SAVE THE SIGN
11E4 5153           4503            ACALL   SETREG          ;GET THE EXPONENT
11E6 247F           4504            ADD     A,#7FH          ;BIAS THE EXPONENT
11E8 922A           4505            MOV     UBIT,C          ;SAVE CARRY STATUS
11EA 5002           4506            JNC     AATAN1          ;SEE IF > 1
11EC 517C           4507            ACALL   RECIP           ;IF > 1, TAKE RECIP
11EE 90112A         4508    AATAN1: MOV     DPTR,#ATTAB     ;SET UP TO CALCULATE THE POLY
11F1 319B           4509            ACALL   POLYC           ;CALCULATE THE POLY
11F3 302A06         4510            JNB     UBIT,SIN0       ;JUMP IF NOT SET
11F6 71A1           4511            ACALL   ANEG            ;MAKE X POLY NEGATIVE
11F8 3192           4512            ACALL   POTWO           ;SUBTRACT PI/2
11FA F141           4513            ACALL   AADD
                    4514            ;
11FC E545           4515    SIN0:   MOV     A,MT1           ;GET THE SIGN
11FE 6019           4516            JZ      SRT
1200 61A1           4517            AJMP    ANEG
                    4518            ;
                    4519            ;*************************************************************
                    4520            ;
                    4521            ; FCOMP - COMPARE 0FFFFH TO TOS
                    4522            ;
                    4523            ;*************************************************************
                    4524            ;
1202 912C           4525    FCMP:   ACALL   CSTAKA          ;COPY THE STACK
1204 71CB           4526            ACALL   FSTK            ;MAKE THE TOS = 0FFFFH
1206 915A           4527            ACALL   SWAP_ASTKA      ;NOW COMPARE IS 0FFFFH - X
                    4528            ;
1208 021973         4529    CMPLK:  JMP     FP_BASE2        ;DO THE COMPARE
                    4530            ;
                    4531            ;*************************************************************
                    4532            ;
120B                4533    DEC_ASTKA:      ;Push ARG STACK and check for underflow
                    4534            ;
                    4535            ;*************************************************************
                    4536            ;
120B 74FA           4537            MOV     A,#-FPSIZ
120D 2509           4538            ADD     A,ASTKA
120F B43200         4539            CJNE    A,#LOW TM_TOP+6,DEC_ASTKA1
1212                4540    DEC_ASTKA1:
1212 4006           4541            JC      E4YY
1214 F509           4542            MOV     ASTKA,A
1216 F9             4543            MOV     R1,A
1217 7B01           4544            MOV     R3,#ASTKAH
                    4545            ;
1219 22             4546    SRT:    RET
BASIC52Q                                                                                                      PAGE 80

                    4547            ;
121A 90037B         4548    E4YY:   MOV     DPTR,#EXA
121D 014B           4549            AJMP    FPTS            ;ARG STACK ERROR
                    4550            ;
                    4551            ;
121F 9133           4552    AXTAL3: ACALL   PUSHC           ;PUSH CONSTANT, THEN MULTIPLY
1221 31B0           4553            ACALL   AMUL
                    4554            ;
                    4555            ; Fall thru to IFIX
                    4556            ;
                    4557            ;***************************************************************
                    4558            ;
1223                4559    IFIX:   ; Convert a floating point number to an integer, put in R3:R1
                    4560            ;
                    4561            ;***************************************************************
                    4562            ;
1223 E4             4563            CLR     A               ;RESET THE START
1224 FB             4564            MOV     R3,A
1225 F9             4565            MOV     R1,A
1226 A809           4566            MOV     R0,ASTKA        ;GET THE ARG STACK
1228 75A001         4567            MOV     P2,#ASTKAH
122B E2             4568            MOVX    A,@R0           ;READ EXPONENT
122C C3             4569            CLR     C
122D 9481           4570            SUBB    A,#81H          ;BASE EXPONENT
122F FC             4571            MOV     R4,A            ;SAVE IT
1230 18             4572            DEC     R0              ;POINT AT SIGN
1231 E2             4573            MOVX    A,@R0           ;GET THE SIGN
1232 7056           4574            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1234 4019           4575            JC      INC_ASTKA       ;EXIT IF EXPONENT IS < 81H
1236 0C             4576            INC     R4              ;ADJUST LOOP COUNTER
1237 E8             4577            MOV     A,R0            ;BUMP THE POINTER REGISTER
1238 9405           4578            SUBB    A,#FPSIZ-1
123A F8             4579            MOV     R0,A
                    4580            ;
123B 08             4581    I2:     INC     R0              ;POINT AT DIGIT
123C E2             4582            MOVX    A,@R0           ;GET DIGIT
123D C4             4583            SWAP    A               ;FLIP
123E 121983         4584            CALL    FP_BASE10       ;ACCUMULATE
1241 4047           4585            JC      SQ_ERR
1243 DC02           4586            DJNZ    R4,I21
1245 8008           4587            SJMP    INC_ASTKA
1247 E2             4588    I21:    MOVX    A,@R0           ;GET DIGIT
1248 121983         4589            CALL    FP_BASE10
124B 403D           4590            JC      SQ_ERR
124D DCEC           4591            DJNZ    R4,I2
                    4592            ;
                    4593            ;************************************************************
                    4594            ;
124F                4595    INC_ASTKA:      ; Pop the ARG STACK and check for overflow
                    4596            ;
                    4597            ;************************************************************
                    4598            ;
124F 7406           4599            MOV     A,#FPSIZ        ;NUMBER TO POP
1251 8001           4600            SJMP    SETREG1
                    4601            ;
1253 E4             4602    SETREG: CLR     A               ;DON'T POP ANYTHING
1254 A809           4603    SETREG1:MOV     R0,ASTKA
1256 7A01           4604            MOV     R2,#ASTKAH
BASIC52Q                                                                                                      PAGE 81

1258 8AA0           4605            MOV     P2,R2
125A 28             4606            ADD     A,R0
125B 40BD           4607            JC      E4YY
125D F509           4608            MOV     ASTKA,A
125F E2             4609            MOVX    A,@R0
1260 22             4610    A_D:    RET
                    4611            ;
                    4612            ;************************************************************
                    4613            ;
                    4614            ; EBIAS - Bias a number for E to the X calculations
                    4615            ;
                    4616            ;************************************************************
                    4617            ;
1261 9143           4618    EBIAS:  ACALL   PUSH_ONE
1263 31B5           4619            ACALL   RV
1265 BB0022         4620            CJNE    R3,#00H,SQ_ERR  ;ERROR IF R3 <> 0
1268 916C           4621            ACALL   C2_T2           ;TEMP 2 GETS FRACTIONS
126A 514F           4622            ACALL   INC_ASTKA
126C 9148           4623            ACALL   POP_T1
126E 9143           4624            ACALL   PUSH_ONE
                    4625            ;
1270 E546           4626    AELP:   MOV     A,MT2
1272 700E           4627            JNZ     AEL1
                    4628            ;
1274 E545           4629            MOV     A,MT1
1276 60E8           4630            JZ      A_D
1278 90011E         4631            MOV     DPTR,#FPT2-1
127B F0             4632            MOVX    @DPTR,A         ;MAKE THE FRACTIONS NEGATIVE
                    4633            ;
127C 9143           4634    RECIP:  ACALL   PUSH_ONE
127E 915A           4635            ACALL   SWAP_ASTKA
1280 810A           4636            AJMP    ADIV
                    4637            ;
1282 1546           4638    AEL1:   DEC     MT2
1284 914F           4639            ACALL   PUSH_T1
1286 31B0           4640            ACALL   AMUL
1288 80E6           4641            SJMP    AELP
                    4642            ;
128A 0209BD         4643    SQ_ERR: LJMP    E3XX            ;LINK TO BAD ARG
                    4644            ;
                    4645            ;************************************************************
                    4646            ;
                    4647            ; SQUARE ROOT
                    4648            ;
                    4649            ;************************************************************
                    4650            ;
128D 718F           4651    ASQR:   ACALL   AABS            ;GET THE SIGN
128F 70F9           4652            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1291 916C           4653            ACALL   C2_T2           ;COPY VARIABLE TO T2
1293 9148           4654            ACALL   POP_T1          ;SAVE IT IN T1
1295 7819           4655            MOV     R0,#LOW FPT1
1297 E2             4656            MOVX    A,@R0           ;GET EXPONENT
1298 6024           4657            JZ      SQR41           ;EXIT IF ZERO
129A 2480           4658            ADD     A,#128          ;BIAS THE EXPONENT
129C 5005           4659            JNC     SQR1            ;SEE IF < 80H
129E 03             4660            RR      A
129F 547F           4661            ANL     A,#127
12A1 8007           4662            SJMP    SQR2
BASIC52Q                                                                                                      PAGE 82

                    4663            ;
12A3 F4             4664    SQR1:   CPL     A               ;FLIP BITS
12A4 04             4665            INC     A
12A5 03             4666            RR      A
12A6 547F           4667            ANL     A,#127          ;STRIP MSB
12A8 F4             4668            CPL     A
12A9 04             4669            INC     A
                    4670            ;
12AA 2480           4671    SQR2:   ADD     A,#128          ;BIAS EXPONENT
12AC F2             4672            MOVX    @R0,A           ;SAVE IT
                    4673            ;
                    4674            ; NEWGUESS = ( X/OLDGUESS + OLDGUESS) / 2
                    4675            ;
12AD 9156           4676    SQR4:   ACALL   P_T2            ;TOS = X
12AF 914F           4677            ACALL   PUSH_T1         ;PUT NUMBER ON STACK
12B1 910A           4678            ACALL   ADIV            ;TOS = X/GUESS
12B3 914F           4679            ACALL   PUSH_T1         ;PUT ON AGAIN
12B5 F141           4680            ACALL   AADD            ;TOS = X/GUESS + GUESS
12B7 3194           4681            ACALL   DBTWO           ;TOS = ( X/GUESS + GUESS ) / 2
12B9 711C           4682            ACALL   TEMP_COMP       ;SEE IF DONE
12BB 30D5EF         4683            JNB     F0,SQR4
                    4684            ;
12BE 814F           4685    SQR41:  AJMP    PUSH_T1         ;PUT THE ANSWER ON THE STACK
                    4686            ;
                    4687            ;*************************************************************
                    4688            ;
                    4689            ; NATURAL LOG
                    4690            ;
                    4691            ;*************************************************************
                    4692            ;
12C0 718F           4693    ALN:    ACALL   AABS            ;MAKE SURE THAT NUM IS POSITIVE
12C2 70C6           4694            JNZ     SQ_ERR          ;ERROR IF NOT
12C4 F546           4695            MOV     MT2,A           ;CLEAR FOR LOOP
12C6 08             4696            INC     R0              ;POINT AT EXPONENT
12C7 E2             4697            MOVX    A,@R0           ;READ THE EXPONENT
12C8 60C0           4698            JZ      SQ_ERR          ;ERROR IF EXPONENT IS ZERO
12CA B48100         4699            CJNE    A,#81H,ALN1     ;SEE IF NUM >= 1
12CD 922A           4700    ALN1:   MOV     UBIT,C          ;SAVE CARRY STATUS
12CF 4002           4701            JC      ALNL            ;TAKE RECIP IF >= 1
12D1 517C           4702            ACALL   RECIP
                    4703            ;
                    4704            ; Loop to reduce
                    4705            ;
12D3 912C           4706    ALNL:   ACALL   CSTAKA          ;COPY THE STACK FOR COMPARE
12D5 9143           4707            ACALL   PUSH_ONE        ;COMPARE NUM TO ONE
12D7 5108           4708            ACALL   CMPLK
12D9 501D           4709            JNC     ALNO            ;EXIT IF DONE
12DB 5153           4710            ACALL   SETREG          ;GET THE EXPONENT
12DD 2485           4711            ADD     A,#85H          ;SEE HOW BIG IT IS
12DF 500E           4712            JNC     ALN11           ;BUMP BY EXP(11) IF TOO SMALL
12E1 9130           4713            ACALL   PLNEXP          ;PUT EXP(1) ON STACK
12E3 7401           4714            MOV     A,#1            ;BUMP COUNT
                    4715            ;
12E5 2546           4716    ALNE:   ADD     A,MT2
12E7 40A1           4717            JC      SQ_ERR
12E9 F546           4718            MOV     MT2,A
12EB 31B0           4719            ACALL   AMUL            ;BIAS THE NUMBER
12ED 80E4           4720            SJMP    ALNL
BASIC52Q                                                                                                      PAGE 83

                    4721            ;
12EF 9017F2         4722    ALN11:  MOV     DPTR,#EXP11     ;PUT EXP(11) ON STACK
12F2 9133           4723            ACALL   PUSHC
12F4 740B           4724            MOV     A,#11
12F6 80ED           4725            SJMP    ALNE
                    4726            ;
12F8 916C           4727    ALNO:   ACALL   C2_T2           ;PUT NUM IN TEMP 2
12FA 9143           4728            ACALL   PUSH_ONE        ;TOS = 1
12FC F11C           4729            ACALL   ASUB            ;TOS = X - 1
12FE 9156           4730            ACALL   P_T2            ;TOS = X
1300 9143           4731            ACALL   PUSH_ONE        ;TOS = 1
1302 F141           4732            ACALL   AADD            ;TOS = X + 1
1304 910A           4733            ACALL   ADIV            ;TOS = (X-1)/(X+1)
1306 9016A9         4734            MOV     DPTR,#LNTAB     ;LOG TABLE
1309 319B           4735            ACALL   POLYC
130B A3             4736            INC     DPTR            ;POINT AT LN(10)
130C 9133           4737            ACALL   PUSHC
130E 31B0           4738            ACALL   AMUL
1310 E546           4739            MOV     A,MT2           ;GET THE COUNT
1312 91B1           4740            ACALL   TWO_R2          ;PUT IT ON THE STACK
1314 F11C           4741            ACALL   ASUB            ;INT - POLY
1316 31DA           4742            ACALL   STRIP
1318 302A74         4743            JNB     UBIT,AABS
                    4744            ;
131B 22             4745    LN_D:   RET
                    4746            ;
                    4747            ;*************************************************************
                    4748            ;
131C                4749    TEMP_COMP:      ; Compare FPTEMP1 to TOS, FPTEMP1 gets TOS
                    4750            ;
                    4751            ;*************************************************************
                    4752            ;
131C 914F           4753            ACALL   PUSH_T1         ;SAVE THE TEMP
131E 915A           4754            ACALL   SWAP_ASTKA      ;TRADE WITH THE NEXT NUMBER
1320 912C           4755            ACALL   CSTAKA          ;COPY THE STACK
1322 9148           4756            ACALL   POP_T1          ;SAVE THE NEW NUMBER
1324 021973         4757            JMP     FP_BASE2        ;DO THE COMPARE
                    4758            ;
1327 9130           4759    AETOX:  ACALL   PLNEXP          ;EXP(1) ON TOS
1329 915A           4760            ACALL   SWAP_ASTKA      ;X ON TOS
                    4761            ;
132B                4762    AEXP:   ;EXPONENTIATION
                    4763            ;
132B 5161           4764            ACALL   EBIAS           ;T1=BASE,T2=FRACTIONS,TOS=INT MULTIPLIED
132D 90011F         4765            MOV     DPTR,#FPT2      ;POINT AT FRACTIONS
1330 E0             4766            MOVX    A,@DPTR         ;READ THE EXP OF THE FRACTIONS
1331 60E8           4767            JZ      LN_D            ;EXIT IF ZERO
1333 9156           4768            ACALL   P_T2            ;TOS = FRACTIONS
1335 914F           4769            ACALL   PUSH_T1         ;TOS = BASE
1337 5153           4770            ACALL   SETREG          ;SEE IF BASE IS ZERO
1339 6002           4771            JZ      AEXP1
133B 51C0           4772            ACALL   ALN             ;TOS = LN(BASE)
133D 31B0           4773    AEXP1:  ACALL   AMUL            ;TOS = FRACTIONS * LN(BASE)
133F 9130           4774            ACALL   PLNEXP          ;TOS = EXP(1)
1341 915A           4775            ACALL   SWAP_ASTKA      ;TOS = FRACTIONS * LN(BASE)
1343 5161           4776            ACALL   EBIAS           ;T2 = FRACTIONS, TOS = INT MULTIPLIED
1345 754600         4777            MOV     MT2,#00H        ;NOW CALCULATE E**X
1348 9143           4778            ACALL   PUSH_ONE
BASIC52Q                                                                                                      PAGE 84

134A 912C           4779            ACALL   CSTAKA
134C 9148           4780            ACALL   POP_T1          ;T1 = 1
                    4781            ;
134E 9156           4782    AEXL:   ACALL   P_T2            ;TOS = FRACTIONS
1350 31B0           4783            ACALL   AMUL            ;TOS = FRACTIONS * ACCUMLATION
1352 0546           4784            INC     MT2             ;DO THE DEMONIATOR
1354 E546           4785            MOV     A,MT2
1356 91B1           4786            ACALL   TWO_R2
1358 910A           4787            ACALL   ADIV
135A 912C           4788            ACALL   CSTAKA          ;SAVE THE ITERATION
135C 914F           4789            ACALL   PUSH_T1         ;NOW ACCUMLATE
135E F141           4790            ACALL   AADD            ;ADD ACCUMLATION
1360 711C           4791            ACALL   TEMP_COMP
1362 30D5E9         4792            JNB     F0,AEXL         ;LOOP UNTIL DONE
                    4793            ;
1365 514F           4794            ACALL   INC_ASTKA
1367 914F           4795            ACALL   PUSH_T1
1369 31B0           4796            ACALL   AMUL            ;LAST INT MULTIPLIED
                    4797            ;
136B 21B0           4798    MU1:    AJMP    AMUL            ;FIRST INT MULTIPLIED
                    4799            ;
                    4800            ;***************************************************************
                    4801            ;
                    4802            ; integer operator - INT
                    4803            ;
                    4804            ;***************************************************************
                    4805            ;
136D 5153           4806    AINT:   ACALL   SETREG          ;SET UP THE REGISTERS, CLEAR CARRY
136F 9481           4807            SUBB    A,#129          ;SUBTRACT EXPONENT BIAS
1371 5007           4808            JNC     AI1             ;JUMP IF ACC > 81H
                    4809            ;
                    4810            ; Force the number to be a zero
                    4811            ;
1373 514F           4812            ACALL   INC_ASTKA       ;BUMP THE STACK
                    4813            ;
1375 9004E0         4814    P_Z:    MOV     DPTR,#ZRO       ;PUT ZERO ON THE STACK
1378 8133           4815            AJMP    PUSHC
                    4816            ;
137A 9407           4817    AI1:    SUBB    A,#7
137C 5010           4818            JNC     AI3
137E F4             4819            CPL     A
137F 04             4820            INC     A
1380 FB             4821            MOV     R3,A
1381 18             4822    AI11:   DEC     R0              ;POINT AT SIGN
                    4823            ;
1382 18             4824    AI2:    DEC     R0              ;NOW AT LSB'S
1383 E2             4825            MOVX    A,@R0           ;READ BYTE
1384 54F0           4826            ANL     A,#0F0H         ;STRIP NIBBLE
1386 F2             4827            MOVX    @R0,A           ;WRITE BYTE
1387 DB01           4828            DJNZ    R3,AI21
1389 22             4829            RET
138A E4             4830    AI21:   CLR     A
138B F2             4831            MOVX    @R0,A           ;CLEAR THE LOCATION
138C DBF4           4832            DJNZ    R3,AI2
                    4833            ;
138E 22             4834    AI3:    RET                     ;EXIT
                    4835            ;
                    4836            ;***************************************************************
BASIC52Q                                                                                                      PAGE 85

                    4837            ;
138F                4838    AABS:   ; Absolute value - Make sign of number positive
                    4839            ;                  return sign in ACC
                    4840            ;
                    4841            ;***************************************************************
                    4842            ;
138F 71A1           4843            ACALL   ANEG            ;CHECK TO SEE IF + OR -
1391 7019           4844            JNZ     ALPAR           ;EXIT IF NON ZERO, BECAUSE THE NUM IS
1393 F2             4845            MOVX    @R0,A           ;MAKE A POSITIVE SIGN
1394 22             4846            RET
                    4847            ;
                    4848            ;***************************************************************
                    4849            ;
1395                4850    ASGN:   ; Returns the sign of the number 1 = +, -1 = -
                    4851            ;
                    4852            ;***************************************************************
                    4853            ;
1395 514F           4854            ACALL   INC_ASTKA       ;POP STACK, GET EXPONENT
1397 60DC           4855            JZ      P_Z             ;EXIT IF ZERO
1399 18             4856            DEC     R0              ;BUMP TO SIGN
139A E2             4857            MOVX    A,@R0           ;GET THE SIGN
139B FF             4858            MOV     R7,A            ;SAVE THE SIGN
139C 9143           4859            ACALL   PUSH_ONE        ;PUT A ONE ON THE STACK
139E EF             4860            MOV     A,R7            ;GET THE SIGN
139F 600B           4861            JZ      ALPAR           ;EXIT IF ZERO
                    4862            ;
                    4863            ; Fall thru to ANEG
                    4864            ;
                    4865            ;***************************************************************
                    4866            ;
13A1                4867    ANEG:   ; Flip the sign of the number on the tos
                    4868            ;
                    4869            ;***************************************************************
                    4870            ;
13A1 5153           4871            ACALL   SETREG
13A3 18             4872            DEC     R0              ;POINT AT THE SIGN OF THE NUMBER
13A4 6006           4873            JZ      ALPAR           ;EXIT IF ZERO
13A6 E2             4874            MOVX    A,@R0
13A7 6401           4875            XRL     A,#01H          ;FLIP THE SIGN
13A9 F2             4876            MOVX    @R0,A
13AA 6401           4877            XRL     A,#01H          ;RESTORE THE SIGN
                    4878            ;
13AC 22             4879    ALPAR:  RET
                    4880            ;
                    4881            ;***************************************************************
                    4882            ;
13AD                4883    ACBYTE: ; Read the ROM
                    4884            ;
                    4885            ;***************************************************************
                    4886            ;
13AD 5123           4887            ACALL   IFIX            ;GET EXPRESSION
13AF 120579         4888            CALL    X31DP           ;PUT R3:R1 INTO THE DP
13B2 E4             4889            CLR     A
13B3 93             4890            MOVC    A,@A+DPTR
13B4 81B1           4891            AJMP    TWO_R2
                    4892            ;
                    4893            ;***************************************************************
                    4894            ;
BASIC52Q                                                                                                      PAGE 86

13B6                4895    ADBYTE: ; Read internal memory
                    4896            ;
                    4897            ;***************************************************************
                    4898            ;
13B6 5123           4899            ACALL   IFIX            ;GET THE EXPRESSION
13B8 1209D5         4900            CALL    R3CK            ;MAKE SURE R3 = 0
13BB E7             4901            MOV     A,@R1
13BC 81B1           4902            AJMP    TWO_R2
                    4903            ;
                    4904            ;***************************************************************
                    4905            ;
13BE                4906    AXBYTE: ; Read external memory
                    4907            ;
                    4908            ;***************************************************************
                    4909            ;
13BE 5123           4910            ACALL   IFIX            ;GET THE EXPRESSION
13C0 8BA0           4911    AXBYTE1:MOV     P2,R3
13C2 E3             4912            MOVX    A,@R1
13C3 81B1           4913            AJMP    TWO_R2
                    4914            ;
                    4915            ;***************************************************************
                    4916            ;
                    4917            ; The relational operators - EQUAL                        (=)
                    4918            ;                            GREATER THAN                 (>)
                    4919            ;                            LESS THAN                    (<)
                    4920            ;                            GREATER THAN OR EQUAL        (>=)
                    4921            ;                            LESS THAN OR EQUAL           (<=)
                    4922            ;                            NOT EQUAL                    (<>)
                    4923            ;
                    4924            ;***************************************************************
                    4925            ;
13C5 5108           4926    AGT:    ACALL   CMPLK
13C7 72D5           4927            ORL     C,F0            ;SEE IF EITHER IS A ONE
13C9 40AA           4928    AGT1:   JC      P_Z
                    4929            ;
13CB 9013D0         4930    FSTK:   MOV     DPTR,#FS
13CE 8133           4931            AJMP    PUSHC
                    4932            ;
13D0 85             4933    FS:     DB      85H
13D1 00             4934            DB      00H
13D2 00             4935            DB      00H
13D3 50             4936            DB      50H
13D4 53             4937            DB      53H
13D5 65             4938            DB      65H
                    4939            ;
13D6 5108           4940    ALT:    ACALL   CMPLK
13D8 B3             4941    ALT1:   CPL     C
13D9 80EE           4942            SJMP    AGT1
                    4943            ;
13DB 5108           4944    AEQ:    ACALL   CMPLK
13DD A2D5           4945    AEQ1:   MOV     C,F0
13DF 80F7           4946            SJMP    ALT1
                    4947            ;
13E1 5108           4948    ANE:    ACALL   CMPLK
13E3 B2D5           4949            CPL     F0
13E5 80F6           4950            SJMP    AEQ1
                    4951            ;
13E7 5108           4952    AGE:    ACALL   CMPLK
BASIC52Q                                                                                                      PAGE 87

13E9 80DE           4953            SJMP    AGT1
                    4954            ;
13EB 5108           4955    ALE:    ACALL   CMPLK
13ED 72D5           4956            ORL     C,F0
13EF 80E7           4957            SJMP    ALT1
                    4958            ;
                    4959            ;***************************************************************
                    4960            ;
13F1                4961    ARND:   ; Generate a random number
                    4962            ;
                    4963            ;***************************************************************
                    4964            ;
13F1 90010C         4965            MOV     DPTR,#RCELL     ;GET THE BINARY SEED
13F4 1205BA         4966            CALL    L31DPI
13F7 E9             4967            MOV     A,R1
13F8 C3             4968            CLR     C
13F9 13             4969            RRC     A
13FA F8             4970            MOV     R0,A
13FB 7406           4971            MOV     A,#6
13FD 13             4972            RRC     A
13FE 29             4973            ADD     A,R1
13FF C8             4974            XCH     A,R0
1400 3B             4975            ADDC    A,R3
1401 FA             4976            MOV     R2,A
1402 1582           4977            DEC     DPL             ;SAVE THE NEW SEED
1404 9124           4978            ACALL   S20DP
1406 91B4           4979            ACALL   TWO_EY
1408 71CB           4980            ACALL   FSTK
                    4981            ;
140A 121977         4982    ADIV:   LCALL   FP_BASE4
140D 0138           4983            AJMP    FPTST
                    4984            ;
                    4985            ;***************************************************************
                    4986            ;
140F                4987    SONERR: ; ON ERROR Statement
                    4988            ;
                    4989            ;***************************************************************
                    4990            ;
140F 120F30         4991            LCALL   INTERR          ;GET THE LINE NUMBER
1412 D213           4992            SETB    ON_ERR
1414 900102         4993            MOV     DPTR,#ERRNUM    ;POINT AT THR ERROR LOCATION
1417 800B           4994            SJMP    S20DP
                    4995            ;
                    4996            ;
                    4997            ;**************************************************************
                    4998            ;
1419                4999    SONEXT: ; ON EXT1 Statement
                    5000            ;
                    5001            ;**************************************************************
                    5002            ;
1419 120F30         5003            LCALL   INTERR
141C D212           5004            SETB    INTBIT
141E 43A884         5005            ORL     IE,#10000100B   ;ENABLE INTERRUPTS
1421 900120         5006            MOV     DPTR,#INTLOC
                    5007            ;
1424 EA             5008    S20DP:  MOV     A,R2            ;SAVE R2:R0 @DPTR
1425 F0             5009            MOVX    @DPTR,A
1426 A3             5010            INC     DPTR
BASIC52Q                                                                                                      PAGE 88

1427 E8             5011            MOV     A,R0
1428 F0             5012            MOVX    @DPTR,A
1429 22             5013            RET
                    5014            ;
                    5015            ;***************************************************************
                    5016            ;
                    5017            ; CASTAK - Copy and push another top of arg stack
                    5018            ;
                    5019            ;***************************************************************
                    5020            ;
142A 912C           5021    CSTAKA2:ACALL   CSTAKA          ;COPY STACK TWICE
                    5022            ;
142C 5153           5023    CSTAKA: ACALL   SETREG          ;SET UP R2:R0
142E 8023           5024            SJMP    PUSH_T12
                    5025            ;
1430 9017F8         5026    PLNEXP: MOV     DPTR,#EXP1
                    5027            ;
                    5028            ;***************************************************************
                    5029            ;
                    5030            ; PUSHC - Push constant on to the arg stack
                    5031            ;
                    5032            ;***************************************************************
                    5033            ;
1433 510B           5034    PUSHC:  ACALL   DEC_ASTKA
1435 8BA0           5035            MOV     P2,R3
1437 7B06           5036            MOV     R3,#FPSIZ       ;LOOP COUNTER
                    5037            ;
1439 E4             5038    PCL:    CLR     A               ;SET UP A
143A 93             5039            MOVC    A,@A+DPTR       ;LOAD IT
143B F3             5040            MOVX    @R1,A           ;SAVE IT
143C A3             5041            INC     DPTR            ;BUMP POINTERS
143D 19             5042            DEC     R1
143E DBF9           5043            DJNZ    R3,PCL          ;LOOP
                    5044            ;
1440 D224           5045            SETB    ARGF
1442 22             5046            RET                     ;EXIT
                    5047            ;
1443                5048    PUSH_ONE:;
                    5049            ;
1443 9016F2         5050            MOV     DPTR,#FPONE
1446 8133           5051            AJMP    PUSHC
                    5052            ;
1448                5053    POP_T1:
                    5054            ;
1448 7B01           5055            MOV     R3,#HIGH FPT1
144A 7919           5056            MOV     R1,#LOW FPT1
144C 020FD3         5057            JMP     POPAS
                    5058            ;
144F                5059    PUSH_T1:
                    5060            ;
144F 7819           5061            MOV     R0,#LOW FPT1
1451                5062    PUSH_T11:
1451 7A01           5063            MOV     R2,#HIGH FPT1
1453                5064    PUSH_T12:
1453 020FDD         5065            LJMP    PUSHAS
                    5066            ;
1456 781F           5067    P_T2:   MOV     R0,#LOW FPT2
1458 80F7           5068            SJMP    PUSH_T11                ;JUMP TO PUSHAS
BASIC52Q                                                                                                      PAGE 89

                    5069            ;
                    5070            ;****************************************************************
                    5071            ;
145A                5072    SWAP_ASTKA:     ; SWAP TOS<>TOS-1
                    5073            ;
                    5074            ;****************************************************************
                    5075            ;
145A 5153           5076            ACALL   SETREG          ;SET UP R2:R0 AND P2
145C 7406           5077            MOV     A,#FPSIZ        ;PUT TOS+1 IN R1
145E FA             5078            MOV     R2,A
145F 28             5079            ADD     A,R0
1460 F9             5080            MOV     R1,A
                    5081            ;
1461 E2             5082    S_L:    MOVX    A,@R0
1462 FB             5083            MOV     R3,A
1463 E3             5084            MOVX    A,@R1
1464 F2             5085            MOVX    @R0,A
1465 EB             5086            MOV     A,R3
1466 F3             5087            MOVX    @R1,A
1467 19             5088            DEC     R1
1468 18             5089            DEC     R0
1469 DAF6           5090            DJNZ    R2,S_L
146B 22             5091            RET
                    5092            ;
146C 5153           5093    C2_T2:  ACALL   SETREG          ;SET UP R2:R0
146E 7B01           5094            MOV     R3,#HIGH FPT2
1470 791F           5095            MOV     R1,#LOW FPT2    ;TEMP VALUE
                    5096            ;
                    5097            ; Fall thru
                    5098            ;
                    5099            ;***************************************************************
                    5100            ;
                    5101            ; VARCOP - Copy a variable from R2:R0 to R3:R1
                    5102            ;
                    5103            ;***************************************************************
                    5104            ;
1472 7C06           5105    VARCOP: MOV     R4,#FPSIZ       ;LOAD THE LOOP COUNTER
                    5106            ;
1474 8AA0           5107    V_C:    MOV     P2,R2           ;SET UP THE PORTS
1476 E2             5108            MOVX    A,@R0           ;READ THE VALUE
1477 8BA0           5109            MOV     P2,R3           ;PORT TIME AGAIN
1479 F3             5110            MOVX    @R1,A           ;SAVE IT
147A B18B           5111            ACALL   DEC3210         ;BUMP POINTERS
147C DCF6           5112            DJNZ    R4,V_C          ;LOOP
147E 22             5113            RET                     ;EXIT
                    5114            ;
147F 9017FE         5115    PIPI:   MOV     DPTR,#PIE
1482 8133           5116            AJMP    PUSHC
                    5117            ;
                    5118            ;***************************************************************
                    5119            ;
                    5120            ; The logical operators ANL, ORL, XRL, NOT
                    5121            ;
                    5122            ;***************************************************************
                    5123            ;
1484 91A1           5124    AANL:   ACALL   TWOL            ;GET THE EXPRESSIONS
1486 EB             5125            MOV     A,R3            ;DO THE AND
1487 5F             5126            ANL     A,R7
BASIC52Q                                                                                                      PAGE 90

1488 FA             5127            MOV     R2,A
1489 E9             5128            MOV     A,R1
148A 5E             5129            ANL     A,R6
148B 8026           5130            SJMP    TWO_EX
                    5131            ;
148D 91A1           5132    AORL:   ACALL   TWOL            ;SAME THING FOR OR
148F EB             5133            MOV     A,R3
1490 4F             5134            ORL     A,R7
1491 FA             5135            MOV     R2,A
1492 E9             5136            MOV     A,R1
1493 4E             5137            ORL     A,R6
1494 801D           5138            SJMP    TWO_EX
                    5139            ;
1496 71CB           5140    ANOT:   ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
                    5141            ;
1498 91A1           5142    AXRL:   ACALL   TWOL
149A EB             5143            MOV     A,R3
149B 6F             5144            XRL     A,R7
149C FA             5145            MOV     R2,A
149D E9             5146            MOV     A,R1
149E 6E             5147            XRL     A,R6
149F 8012           5148            SJMP    TWO_EX
                    5149            ;
14A1 5123           5150    TWOL:   ACALL   IFIX
14A3 AF03           5151            MOV     R7,R3B0
14A5 AE01           5152            MOV     R6,R1B0
14A7 4123           5153            AJMP    IFIX
                    5154            ;
                    5155            ;*************************************************************
                    5156            ;
14A9                5157    AGET:   ; READ THE BREAK BYTE AND PUT IT ON THE ARG STACK
                    5158            ;
                    5159            ;*************************************************************
                    5160            ;
14A9 900100         5161            MOV     DPTR,#GTB       ;GET THE BREAK BYTE
14AC E0             5162            MOVX    A,@DPTR
14AD 101801         5163            JBC     GTRD,TWO_R2
14B0 E4             5164            CLR     A
                    5165            ;
14B1 7A00           5166    TWO_R2: MOV     R2,#00H         ;ACC GOES TO STACK
                    5167            ;
                    5168            ;
14B3 F8             5169    TWO_EX: MOV     R0,A            ;R2:ACC GOES TO STACK
                    5170            ;
                    5171            ;
14B4 D224           5172    TWO_EY: SETB    ARGF            ;R2:R0 GETS PUT ON THE STACK
14B6 021987         5173            JMP     FP_BASE12       ;DO IT
                    5174            ;
                    5175            ;*************************************************************
                    5176            ;
                    5177            ; Put directs onto the stack
                    5178            ;
                    5179            ;**************************************************************
                    5180            ;
14B9 E5A8           5181    A_IE:   MOV     A,IE            ;IE
14BB 80F4           5182            SJMP    TWO_R2
                    5183            ;
14BD E5B8           5184    A_IP:   MOV     A,IP            ;IP
BASIC52Q                                                                                                      PAGE 91

14BF 80F0           5185            SJMP    TWO_R2
                    5186            ;
14C1 AA8C           5187    ATIM0:  MOV     R2,TH0          ;TIMER 0
14C3 A88A           5188            MOV     R0,TL0
14C5 80ED           5189            SJMP    TWO_EY
                    5190            ;
14C7 AA8D           5191    ATIM1:  MOV     R2,TH1          ;TIMER 1
14C9 A88B           5192            MOV     R0,TL1
14CB 80E7           5193            SJMP    TWO_EY
                    5194            ;
14CD AACD           5195    ATIM2:  MOV     R2,TH2
14CF A8CC           5196            MOV     R0,TL2
                    5197    ;       DB      0AAH            ;MOV R2 DIRECT OP CODE
                    5198    ;       DB      0CDH            ;T2 HIGH
                    5199    ;       DB      0A8H            ;MOV R0 DIRECT OP CODE
                    5200    ;       DB      0CCH            ;T2 LOW
14D1 80E1           5201            SJMP    TWO_EY          ;TIMER 2
                    5202            ;
14D3 E5C8           5203    AT2CON: MOV     A,T2CON
                    5204    ;       DB      0E5H            ;MOV A,DIRECT OPCODE
                    5205    ;       DB      0C8H            ;T2CON LOCATION
14D5 80DA           5206            SJMP    TWO_R2
                    5207            ;
14D7 E588           5208    ATCON:  MOV     A,TCON          ;TCON
14D9 80D6           5209            SJMP    TWO_R2
                    5210            ;
14DB E589           5211    ATMOD:  MOV     A,TMOD          ;TMOD
14DD 80D2           5212            SJMP    TWO_R2
                    5213            ;
14DF AACB           5214    ARCAP2: MOV     R2,RCAPH2
14E1 A8CA           5215            MOV     R0,RCAPL2
                    5216    ;       DB      0AAH            ;MOV R2, DIRECT OP CODE
                    5217    ;       DB      0CBH            ;RCAP2H LOCATION
                    5218    ;       DB      0A8H            ;MOV R0, DIRECT OP CODE
                    5219    ;       DB      0CAH            ;R2CAPL LOCATION
14E3 80CF           5220            SJMP    TWO_EY
                    5221            ;
14E5 E590           5222    AP1:    MOV     A,P1            ;GET P1
14E7 80C8           5223            SJMP    TWO_R2          ;PUT IT ON THE STACK
                    5224            ;
14E9 E587           5225    APCON:  MOV     A,PCON
                    5226    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    5227    ;       DB      87H             ;ADDRESS OF PCON
14EB 80C4           5228            SJMP    TWO_R2          ;PUT PCON ON THE STACK
                    5229            ;
                    5230            ;***************************************************************
                    5231            ;
                    5232            ;THIS IS THE LINE EDITOR
                    5233            ;
                    5234            ;TAKE THE PROCESSED LINE IN IBUF AND INSERT IT INTO THE
                    5235            ;BASIC TEXT FILE.
                    5236            ;
                    5237            ;***************************************************************
                    5238            ;
14ED 02056E         5239    LINE0:  LJMP    NOGO            ;CAN'T EDIT A ROM
                    5240            ;
14F0 E513           5241    LINE:   MOV     A,BOFAH
14F2 B402F8         5242            CJNE    A,#HIGH PSTART,LINE0
BASIC52Q                                                                                                      PAGE 92

14F5 1205A9         5243            CALL    G4              ;GET END ADDRESS FOR EDITING
14F8 AC82           5244            MOV     R4,DPL
14FA AD83           5245            MOV     R5,DPH
14FC AB0F           5246            MOV     R3,TEMP5        ;GET HIGH ORDER IBLN
14FE A90E           5247            MOV     R1,TEMP4        ;LOW ORDER IBLN
                    5248            ;
1500 12058C         5249            CALL    GETLIN          ;FIND THE LINE
1503 7012           5250            JNZ     INSR            ;INSERT IF NOT ZERO, ELSE APPEND
                    5251            ;
                    5252            ;APPEND THE LINE AT THE END
                    5253            ;
1505 E50D           5254            MOV     A,TEMP3         ;PUT IBCNT IN THE ACC
1507 B40401         5255            CJNE    A,#4H,LINE1     ;SEE IF NO ENTRY
150A 22             5256            RET                     ;RET IF NO ENTRY
                    5257            ;
150B B1A8           5258    LINE1:  ACALL   FULL            ;SEE IF ENOUGH SPACE LEFT
150D AA05           5259            MOV     R2,R5B0         ;PUT END ADDRESS A INTO TRANSFER
150F A804           5260            MOV     R0,R4B0         ;REGISTERS
1511 B166           5261            ACALL   IMOV            ;DO THE BLOCK MOVE
                    5262            ;
1513 7401           5263    UE:     MOV     A,#EOF          ;SAVE EOF CHARACTER
1515 A199           5264            AJMP    TBR
                    5265            ;
                    5266            ;INSERT A LINE INTO THE FILE
                    5267            ;
1517 FF             5268    INSR:   MOV     R7,A            ;SAVE IT IN R7
1518 121854         5269            CALL    TEMPD           ;SAVE INSERATION ADDRESS
151B E50D           5270            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN THE ACC
151D 4009           5271            JC      LTX             ;JUMP IF NEW LINE # NOT = OLD LINE #
151F B40401         5272            CJNE    A,#04H,INSR1    ;SEE IF NULL
1522 E4             5273            CLR     A
                    5274            ;
1523 9F             5275    INSR1:  SUBB    A,R7            ;SUBTRACT LINE COUNT FROM ACC
1524 6036           5276            JZ      LIN1            ;LINE LENGTHS EQUAL
1526 401F           5277            JC      GTX             ;SMALLER LINE
                    5278            ;
                    5279            ;EXPAND FOR A NEW LINE OR A LARGER LINE
                    5280            ;
1528 FF             5281    LTX:    MOV     R7,A            ;SAVE A IN R7
1529 E50D           5282            MOV     A,TEMP3         ;GET THE COUNT IN THE ACC
152B B40401         5283            CJNE    A,#04H,LTX1     ;DO NO INSERTATION IF NULL LINE
152E 22             5284            RET                     ;EXIT IF IT IS
                    5285            ;
152F EF             5286    LTX1:   MOV     A,R7            ;GET THE COUNT BACK - DELTA IN A
1530 B1A8           5287            ACALL   FULL            ;SEE IF ENOUGH MEMORY NEW EOFA IN R3:R1
1532 12184D         5288            CALL    DTEMP           ;GET INSERATION ADDRESS
1535 B19D           5289            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
1537 120DAD         5290            CALL    X3120
153A A904           5291            MOV     R1,R4B0         ;EOFA LOW
153C AB05           5292            MOV     R3,R5B0         ;EOFA HIGH
153E 0E             5293            INC     R6              ;INCREMENT BYTE COUNT
153F BE0001         5294            CJNE    R6,#00,LTX2     ;NEED TO BUMP HIGH BYTE?
1542 0F             5295            INC     R7
                    5296            ;
1543 B181           5297    LTX2:   ACALL   RMOV            ;GO DO THE INSERTION
1545 8015           5298            SJMP    LIN1            ;INSERT THE CURRENT LINE
                    5299            ;
1547 F4             5300    GTX:    CPL     A               ;FLIP ACC
BASIC52Q                                                                                                      PAGE 93

1548 04             5301            INC     A               ;TWOS COMPLEMENT
1549 1205DE         5302            CALL    ADDPTR          ;DO THE ADDITION
154C B19D           5303            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
154E A982           5304            MOV     R1,DPL          ;SET UP THE REGISTERS
1550 AB83           5305            MOV     R3,DPH
1552 AA0F           5306            MOV     R2,TEMP5        ;PUT INSERTATION ADDRESS IN THE RIGHT REG
1554 A80E           5307            MOV     R0,TEMP4
1556 6002           5308            JZ      GTX1            ;IF ACC WAS ZERO FROM NMOV, JUMP
1558 B16D           5309            ACALL   LMOV            ;IF NO ZERO DO A LMOV
                    5310            ;
155A B113           5311    GTX1:   ACALL   UE              ;SAVE NEW END ADDRESS
                    5312            ;
155C AA0F           5313    LIN1:   MOV     R2,TEMP5        ;GET THE INSERTATION ADDRESS
155E A80E           5314            MOV     R0,TEMP4
1560 E50D           5315            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN ACC
1562 B40401         5316            CJNE    A,#04H,IMOV     ;SEE IF NULL
1565 22             5317            RET                     ;EXIT IF NULL
                    5318            ;
                    5319            ;***************************************************************
                    5320            ;
                    5321            ;INSERT A LINE AT ADDRESS R2:R0
                    5322            ;
                    5323            ;***************************************************************
                    5324            ;
1566 E4             5325    IMOV:   CLR     A               ;TO SET UP
1567 7904           5326            MOV     R1,#LOW IBCNT   ;INITIALIZE THE REGISTERS
1569 FB             5327            MOV     R3,A
156A AE0D           5328            MOV     R6,TEMP3        ;PUT THE BYTE COUNT IN R6 FOR LMOV
156C FF             5329            MOV     R7,A            ;PUT A 0 IN R7 FOR LMOV
                    5330            ;
                    5331            ;***************************************************************
                    5332            ;
                    5333            ;COPY A BLOCK FROM THE BEGINNING
                    5334            ;
                    5335            ;R2:R0 IS THE DESTINATION ADDRESS
                    5336            ;R3:R1 IS THE SOURCE ADDRESS
                    5337            ;R7:R6 IS THE COUNT REGISTER
                    5338            ;
                    5339            ;***************************************************************
                    5340            ;
156D B196           5341    LMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
156F B176           5342            ACALL   INC3210         ;BUMP THE POINTER
1571 D147           5343            ACALL   DEC76           ;BUMP R7:R6
1573 70F8           5344            JNZ     LMOV            ;LOOP
1575 22             5345            RET                     ;GO BACK TO CALLING ROUTINE
                    5346            ;
1576 08             5347    INC3210:INC     R0
1577 B80001         5348            CJNE    R0,#00H,INC3211
157A 0A             5349            INC     R2
                    5350            ;
157B 09             5351    INC3211:INC     R1
157C B90001         5352            CJNE    R1,#00H,INC3212
157F 0B             5353            INC     R3
1580 22             5354    INC3212:RET
                    5355            ;
                    5356            ;***************************************************************
                    5357            ;
                    5358            ;COPY A BLOCK STARTING AT THE END
BASIC52Q                                                                                                      PAGE 94

                    5359            ;
                    5360            ;R2:R0 IS THE DESTINATION ADDRESS
                    5361            ;R3:R1 IS THE SOURCE ADDRESS
                    5362            ;R6:R7 IS THE COUNT REGISTER
                    5363            ;
                    5364            ;***************************************************************
                    5365            ;
1581 B196           5366    RMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
1583 B18B           5367            ACALL   DEC3210         ;DEC THE LOCATIONS
1585 D147           5368            ACALL   DEC76           ;BUMP THE COUNTER
1587 70F8           5369            JNZ     RMOV            ;LOOP
                    5370            ;
1589 00             5371    DEC_R:  NOP                     ;CREATE EQUAL TIMING
158A 22             5372            RET                     ;EXIT
                    5373            ;
158B 18             5374    DEC3210:DEC     R0              ;BUMP THE POINTER
158C B8FF01         5375            CJNE    R0,#0FFH,DEC3212;SEE IF OVERFLOWED
158F 1A             5376    DEC3211:DEC     R2              ;BUMP THE HIGH BYTE
1590 19             5377    DEC3212:DEC     R1              ;BUMP THE POINTER
1591 B9FFF5         5378            CJNE    R1,#0FFH,DEC_R  ;SEE IF OVERFLOWED
1594 1B             5379            DEC     R3              ;CHANGE THE HIGH BYTE
1595 22             5380            RET                     ;EXIT
                    5381            ;
                    5382            ;***************************************************************
                    5383            ;
                    5384            ;TBYTE - TRANSFER A BYTE
                    5385            ;
                    5386            ;***************************************************************
                    5387            ;
1596 8BA0           5388    TBYTE:  MOV     P2,R3           ;OUTPUT SOURCE REGISTER TO PORT
1598 E3             5389            MOVX    A,@R1           ;PUT BYTE IN ACC
                    5390            ;
1599 8AA0           5391    TBR:    MOV     P2,R2           ;OUTPUT DESTINATION TO PORT
159B F2             5392            MOVX    @R0,A           ;SAVE THE BYTE
159C 22             5393            RET                     ;EXIT
                    5394            ;
                    5395            ;***************************************************************
                    5396            ;
                    5397            ;NMOV - R7:R6 = END ADDRESS - DPTR
                    5398            ;
                    5399            ;ACC GETS CLOBBERED
                    5400            ;
                    5401            ;***************************************************************
                    5402            ;
159D EC             5403    NMOV:   MOV     A,R4            ;THE LOW BYTE OF EOFA
159E C3             5404            CLR     C               ;CLEAR THE CARRY FOR SUBB
159F 9582           5405            SUBB    A,DPL           ;SUBTRACT DATA POINTER LOW
15A1 FE             5406            MOV     R6,A            ;PUT RESULT IN R6
15A2 ED             5407            MOV     A,R5            ;HIGH BYTE OF EOFA
15A3 9583           5408            SUBB    A,DPH           ;SUBTRACT DATA POINTER HIGH
15A5 FF             5409            MOV     R7,A            ;PUT RESULT IN R7
15A6 4E             5410            ORL     A,R6            ;SEE IF ZERO
15A7 22             5411    NMOV1:  RET                     ;EXIT
                    5412            ;
                    5413            ;***************************************************************
                    5414            ;
                    5415            ;CHECK FOR A FILE OVERFLOW
                    5416            ;LEAVES THE NEW END ADDRESS IN R3:R1
BASIC52Q                                                                                                      PAGE 95

                    5417            ;A HAS THE INCREASE IN SIZE
                    5418            ;
                    5419            ;***************************************************************
                    5420            ;
15A8 2C             5421    FULL:   ADD     A,R4            ;ADD A TO END ADDRESS
15A9 F9             5422            MOV     R1,A            ;SAVE IT
15AA E4             5423            CLR     A
15AB 3D             5424            ADDC    A,R5            ;ADD THE CARRY
15AC FB             5425            MOV     R3,A
15AD 900104         5426            MOV     DPTR,#VARTOP    ;POINT AT VARTOP
                    5427            ;
15B0 1205CC         5428    FUL1:   CALL    DCMPX           ;COMPARE THE TWO
15B3 40F2           5429            JC      NMOV1           ;OUT OF ROOM
                    5430            ;
15B5 901816         5431    TB:     MOV     DPTR,#E5X       ;OUT OF MEMORY
15B8 014B           5432            AJMP    FPTS
                    5433            ;
                    5434            ;***************************************************************
                    5435            ;
                    5436            ; PP - Preprocesses the line in IBUF back into IBUF
                    5437            ;      sets F0 if no line number
                    5438            ;      leaves the correct length of processed line in IBCNT
                    5439            ;      puts the line number in IBLN
                    5440            ;      wastes the text address TXAL and TXAH
                    5441            ;
                    5442            ;***************************************************************
                    5443            ;
15BA F16C           5444    PP:     ACALL   T_BUF           ;TXA GETS IBUF
15BC 120F35         5445            CALL    INTGER          ;SEE IF A NUMBER PRESENT
15BF 121854         5446            CALL    TEMPD           ;SAVE THE INTEGER IN TEMP5:TEMP4
15C2 92D5           5447            MOV     F0,C            ;SAVE INTEGER IF PRESENT
15C4 900005         5448            MOV     DPTR,#IBLN      ;SAVE THE LINE NUMBER, EVEN IF NONE
15C7 9124           5449            ACALL   S20DP
15C9 A808           5450            MOV     R0,TXAL         ;TEXT POINTER
15CB 7907           5451            MOV     R1,#LOW IBUF    ;STORE POINTER
                    5452            ;
                    5453            ; Now process the line back into IBUF
                    5454            ;
15CD C224           5455    PPL:    CLR     ARGF            ;FIRST PASS DESIGNATOR
15CF 900175         5456            MOV     DPTR,#TOKTAB    ;POINT DPTR AT LOOK UP TABLE
                    5457            ;
15D2 8805           5458    PPL1:   MOV     R5B0,R0         ;SAVE THE READ POINTER
15D4 E4             5459            CLR     A               ;ZERO A FOR LOOKUP
15D5 93             5460            MOVC    A,@A+DPTR       ;GET THE TOKEN
15D6 FF             5461            MOV     R7,A            ;SAVE TOKEN IN CASE OF MATCH
                    5462            ;
15D7 E2             5463    PPL2:   MOVX    A,@R0           ;GET THE USER CHARACTER
15D8 FB             5464            MOV     R3,A            ;SAVE FOR REM
15D9 B46100         5465            CJNE    A,#'a',PPL21
15DC 4007           5466    PPL21:  JC      PPX             ;CONVERT LOWER TO UPPER CASE
15DE B47B00         5467            CJNE    A,#('z'+1),PPL22
15E1 5002           5468    PPL22:  JNC     PPX
15E3 C2E5           5469            CLR     ACC.5
                    5470            ;
15E5 FA             5471    PPX:    MOV     R2,A
15E6 F2             5472            MOVX    @R0,A           ;SAVE UPPER CASE
15E7 A3             5473            INC     DPTR            ;BUMP THE LOOKUP POINTER
15E8 E4             5474            CLR     A
BASIC52Q                                                                                                      PAGE 96

15E9 93             5475            MOVC    A,@A+DPTR
15EA B50203         5476            CJNE    A,R2B0,PPL3     ;LEAVE IF NOT THE SAME
15ED 08             5477            INC     R0              ;BUMP THE USER POINTER
15EE 80E7           5478            SJMP    PPL2            ;CONTINUE TO LOOP
                    5479            ;
15F0 20E72F         5480    PPL3:   JB      ACC.7,PPL6      ;JUMP IF FOUND MATCH
15F3 602D           5481            JZ      PPL6            ;USER MATCH
                    5482            ;
                    5483            ;
                    5484            ; Scan to the next TOKTAB entry
                    5485            ;
15F5 A3             5486    PPL4:   INC     DPTR            ;ADVANCE THE POINTER
15F6 E4             5487            CLR     A               ;ZERO A FOR LOOKUP
15F7 93             5488            MOVC    A,@A+DPTR       ;LOAD A WITH TABLE
15F8 20E703         5489            JB      ACC.7,PPL41     ;KEEP SCANNING IF NOT A RESERVED WORD
15FB 70F8           5490            JNZ     PPL4
15FD A3             5491            INC     DPTR
                    5492            ;
                    5493            ; See if at the end of TOKTAB
                    5494            ;
15FE A805           5495    PPL41:  MOV     R0,R5B0         ;RESTORE THE POINTER
1600 B4FFCF         5496            CJNE    A,#0FFH,PPL1    ;SEE IF END OF TABLE
                    5497            ;
                    5498            ; Character not in TOKTAB, so see what it is
                    5499            ;
1603 BA2003         5500            CJNE    R2,#' ',PPLX    ;SEE IF A SPACE
1606 08             5501            INC     R0              ;BUMP USER POINTER
1607 80C4           5502            SJMP    PPL             ;TRY AGAIN
                    5503            ;
1609 302D0A         5504    PPLX:   JNB     XBIT,PPLY       ;EXTERNAL TRAP
160C 202407         5505            JB      ARGF,PPLY
160F D224           5506            SETB    ARGF            ;SAYS THAT THE USER HAS TABLE
1611 122078         5507            LCALL   2078H           ;SET UP POINTER
1614 A1D2           5508            AJMP    PPL1
                    5509            ;
1616 D12F           5510    PPLY:   ACALL   PPL7            ;SAVE CHARACTER, EXIT IF A CR
1618 B422B2         5511            CJNE    A,#'"',PPL      ;SEE IF QUOTED STRING, START AGAIN IF NOT
                    5512            ;
                    5513            ; Just copy a quoted string
                    5514            ;
161B D12F           5515    PPLY1:  ACALL   PPL7            ;SAVE THE CHARACTER, TEST FOR CR
161D B422FB         5516            CJNE    A,#'"',PPLY1    ;IS THERE AN ENDQUOTE, IF NOT LOOP
1620 80AB           5517            SJMP    PPL             ;DO IT AGAIN IF ENDQUOTE
                    5518            ;
1622 EF             5519    PPL6:   MOV     A,R7            ;GET THE TOKEN
1623 D144           5520            ACALL   PPL91           ;SAVE THE TOKEN
1625 B496A5         5521            CJNE    A,#T_REM,PPL    ;SEE IF A REM TOKEN
1628 EB             5522            MOV     A,R3
1629 D130           5523            ACALL   PPL71           ;WASTE THE REM STATEMENT
162B D12F           5524    PPL61:  ACALL   PPL7            ;LOOP UNTIL A CR
162D 80FC           5525            SJMP    PPL61
                    5526            ;
162F E2             5527    PPL7:   MOVX    A,@R0           ;GET THE CHARACTER
1630 B40D10         5528    PPL71:  CJNE    A,#CR,PPL9      ;FINISH IF A CR
1633 D000           5529            POP     R0B0            ;WASTE THE CALLING STACK
1635 D000           5530            POP     R0B0
1637 F3             5531            MOVX    @R1,A           ;SAVE CR IN MEMORY
1638 09             5532            INC     R1              ;SAVE A TERMINATOR
BASIC52Q                                                                                                      PAGE 97

1639 7401           5533            MOV     A,#EOF
163B F3             5534            MOVX    @R1,A
163C E9             5535            MOV     A,R1            ;SUBTRACT FOR LENGTH
163D 9404           5536            SUBB    A,#4
163F F50D           5537            MOV     TEMP3,A         ;SAVE LENGTH
1641 7904           5538            MOV     R1,#LOW IBCNT   ;POINT AT BUFFER COUNT
                    5539            ;
1643 08             5540    PPL9:   INC     R0
1644 F3             5541    PPL91:  MOVX    @R1,A           ;SAVE THE CHARACTER
1645 09             5542            INC     R1              ;BUMP THE POINTERS
1646 22             5543            RET                     ;EXIT TO CALLING ROUTINE
                    5544            ;
                    5545            ;
                    5546            ;***************************************************************
                    5547            ;
                    5548            ;DEC76 - DECREMENT THE REGISTER PAIR R7:R6
                    5549            ;
                    5550            ;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC DOES NOT
                    5551            ;
                    5552            ;***************************************************************
                    5553            ;
1647 1E             5554    DEC76:  DEC     R6              ;BUMP R6
1648 BEFF01         5555            CJNE    R6,#0FFH,DEC77  ;SEE IF RAPPED AROUND
164B 1F             5556            DEC     R7
164C EF             5557    DEC77:  MOV     A,R7            ;SEE IF ZERO
164D 4E             5558            ORL     A,R6
164E 22             5559            RET                     ;EXIT
                    5560            ;
                    5561            ;***************************************************************
                    5562            ;
                    5563            ; MTOP - Get or Put the top of assigned memory
                    5564            ;
                    5565            ;***************************************************************
                    5566            ;
164F 90010A         5567    PMTOP:  MOV     DPTR,#MEMTOP
1652 120573         5568    PMTOP1: CALL    L20DPI
1655 81B4           5569            AJMP    TWO_EY          ;PUT R2:R0 ON THE STACK
                    5570            ;
                    5571            ;*************************************************************
                    5572            ;
                    5573            ; AXTAL - Crystal value calculations
                    5574            ;
                    5575            ;*************************************************************
                    5576            ;
1657 9017EC         5577    AXTAL0: MOV     DPTR,#XTALV     ;CRYSTAL VALUE
165A 9133           5578            ACALL   PUSHC
                    5579            ;
165C 912A           5580    AXTAL1: ACALL   CSTAKA2         ;COPY CRYSTAL VALUE TWICE
                    5581    ;
                    5582    ;*****************************************************************************
                    5583    ;****** Disable Intel programming for to get room ****************************
                    5584    ;
                    5585    ;       ACALL   CSTAKA          ;Copy crystal value the 3rd.
                    5586    ;
                    5587    ;*****************************************************************************
                    5588    ;
165E 900709         5589            MOV     DPTR,#PTIME     ;PROM TIMER
1661 D179           5590            ACALL   AXTAL2
BASIC52Q                                                                                                      PAGE 98

1663 900128         5591            MOV     DPTR,#PROGS
1666 F10E           5592            ACALL   S31L
                    5593    ;
                    5594    ;*****************************************************************************
                    5595    ;****** Disable Intel programming for to get room ****************************
                    5596    ;
                    5597    ;       MOV     DPTR,#IPTIME    ;IPROM TIMER
                    5598    ;       ACALL   AXTAL2
                    5599    ;       MOV     DPTR,#IPROGS
                    5600    ;       ACALL   S31L
                    5601    ;
                    5602    ;*****************************************************************************
                    5603    ;
1668 901167         5604            MOV     DPTR,#TTIME     ;CLOCK CALCULATION
166B 511F           5605            ACALL   AXTAL3
166D E9             5606            MOV     A,R1
166E F4             5607            CPL     A
166F 04             5608            INC     A
1670 F54A           5609            MOV     SAVE_T,A
1672 7B01           5610            MOV     R3,#HIGH CXTAL
1674 7913           5611            MOV     R1,#LOW CXTAL
1676 020FD3         5612            JMP     POPAS
                    5613            ;
1679 511F           5614    AXTAL2: ACALL   AXTAL3
                    5615            ;
167B                5616    CBIAS:  ;Bias the crystal calculations
                    5617            ;
167B E9             5618            MOV     A,R1            ;GET THE LOW COUNT
167C F4             5619            CPL     A               ;FLIP IT FOR TIMER LOAD
167D 240F           5620            ADD     A,#15           ;BIAS FOR CALL AND LOAD TIMES
167F F9             5621            MOV     R1,A            ;RESTORE IT
1680 EB             5622            MOV     A,R3            ;GET THE HIGH COUNT
1681 F4             5623            CPL     A               ;FLIP IT
1682 3400           5624            ADDC    A,#00H          ;ADD THE CARRY
1684 FB             5625            MOV     R3,A            ;RESTORE IT
1685 22             5626            RET
                    5627            ;
                    5628            ;**************************************************************
                    5629            ;
1686                5630    STONE:  ; Toggle the I/O port
                    5631            ;
                    5632            ;**************************************************************
                    5633            ;
1686 120E78         5634            CALL    THREE           ;GET THE NUMBERS
1689 D17B           5635            ACALL   CBIAS           ;BIAS R3:R1 FOR COUNT LOOP
                    5636            ;
168B C292           5637    STONE1: CLR     T_BIT           ;TOGGLE THE BIT
168D C28E           5638            CLR     TR1             ;STOP THE TIMER
168F 8B8D           5639            MOV     TH1,R3          ;LOAD THE TIMER
1691 898B           5640            MOV     TL1,R1
1693 C28F           5641            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
1695 D28E           5642            SETB    TR1             ;TURN IT ON
1697 D147           5643            ACALL   DEC76
1699 308FFD         5644            JNB     TF1,$           ;WAIT
169C 71AC           5645            ACALL   ALPAR
169E D292           5646            SETB    T_BIT           ;BACK TO A ONE
16A0 12052F         5647            CALL    TIMER_LOAD1     ;LOAD THE HIGH VALUE
16A3 308FFD         5648            JNB     TF1,$           ;WAIT
BASIC52Q                                                                                                      PAGE 99

16A6 70E3           5649            JNZ     STONE1          ;LOOP
16A8 22             5650            RET
                    5651            ;
                    5652            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5653            ;
16A9                5654    LNTAB:  ; Natural log lookup table
                    5655            ;
                    5656            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5657            ;
16A9 80             5658            DB      80H
16AA 00             5659            DB      00H
16AB 71             5660            DB      71H
16AC 37             5661            DB      37H
16AD 13             5662            DB      13H
16AE 19             5663            DB      19H
                    5664            ;
16AF 7F             5665            DB      7FH
16B0 00             5666            DB      00H
16B1 76             5667            DB      76H
16B2 64             5668            DB      64H
16B3 37             5669            DB      37H
16B4 94             5670            DB      94H
                    5671            ;
16B5 80             5672            DB      80H
16B6 00             5673            DB      00H
16B7 07             5674            DB      07H
16B8 22             5675            DB      22H
16B9 75             5676            DB      75H
16BA 17             5677            DB      17H
                    5678            ;
16BB 80             5679            DB      80H
16BC 00             5680            DB      00H
16BD 52             5681            DB      52H
16BE 35             5682            DB      35H
16BF 93             5683            DB      93H
16C0 28             5684            DB      28H
                    5685            ;
16C1 80             5686            DB      80H
16C2 00             5687            DB      00H
16C3 71             5688            DB      71H
16C4 91             5689            DB      91H
16C5 85             5690            DB      85H
16C6 86             5691            DB      86H
                    5692            ;
16C7 FF             5693            DB      0FFH
                    5694            ;
16C8 81             5695            DB      81H
16C9 00             5696            DB      00H
16CA 51             5697            DB      51H
16CB 58             5698            DB      58H
16CC 02             5699            DB      02H
16CD 23             5700            DB      23H
                    5701            ;
                    5702            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
                    5703            ;
16CE                5704    SINTAB: ; Sin lookup table
                    5705            ;
                    5706            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
BASIC52Q                                                                                                      PAGE 100

                    5707            ;
16CE 77             5708            DB      128-9
16CF 00             5709            DB      00H
16D0 44             5710            DB      44H
16D1 90             5711            DB      90H
16D2 05             5712            DB      05H
16D3 16             5713            DB      16H
                    5714            ;
16D4 79             5715            DB      128-7
16D5 01             5716            DB      01H
16D6 08             5717            DB      08H
16D7 21             5718            DB      21H
16D8 05             5719            DB      05H
16D9 25             5720            DB      25H
                    5721            ;
16DA 7B             5722            DB      128-5
16DB 00             5723            DB      00H
16DC 19             5724            DB      19H
16DD 73             5725            DB      73H
16DE 55             5726            DB      55H
16DF 27             5727            DB      27H
16E0 7D             5728            DB      128-3
16E1 01             5729            DB      01H
16E2 70             5730            DB      70H
16E3 12             5731            DB      12H
16E4 84             5732            DB      84H
16E5 19             5733            DB      19H
                    5734            ;
16E6 7E             5735            DB      128-2
16E7 00             5736            DB      00H
16E8 33             5737            DB      33H
16E9 33             5738            DB      33H
16EA 33             5739            DB      33H
16EB 83             5740            DB      83H
                    5741            ;
16EC 80             5742            DB      128
16ED 01             5743            DB      01H
16EE 67             5744            DB      67H
16EF 66             5745            DB      66H
16F0 66             5746            DB      66H
16F1 16             5747            DB      16H
                    5748            ;
16F2 81             5749    FPONE:  DB      128+1
16F3 00             5750            DB      00H
16F4 00             5751            DB      00H
16F5 00             5752            DB      00H
16F6 00             5753            DB      00H
16F7 10             5754            DB      10H
                    5755            ;
16F8 FF             5756            DB      0FFH            ;END OF TABLE
                    5757            ;
16F9 120FD9         5758    SBAUD:  CALL    AXTAL           ;PUT CRYSTAL ON THE STACK
16FC 120F43         5759            CALL    EXPRB           ;PUT THE NUMBER AFTER BAUD ON STACK
16FF 740C           5760            MOV     A,#12
1701 91B1           5761            ACALL   TWO_R2          ;TOS = 12
1703 31B0           5762            ACALL   AMUL            ;TOS = 12*BAUD
1705 910A           5763            ACALL   ADIV            ;TOS = XTAL/(12*BAUD)
1707 5123           5764            ACALL   IFIX
BASIC52Q                                                                                                      PAGE 101

1709 D17B           5765            ACALL   CBIAS
170B 900124         5766            MOV     DPTR,#SPV
                    5767            ;
170E 020605         5768    S31L:   JMP     S31DP
                    5769            ;
1711 D14F           5770    AFREE:  CALL    PMTOP           ;PUT MTOP ON STACK
1713 1205A9         5771            CALL    G4              ;GET END ADDRESS
1716 A882           5772            MOV     R0,DPL
1718 AA83           5773            MOV     R2,DPH
171A 91B4           5774            ACALL   TWO_EY
                    5775            ;
171C 121971         5776    ASUB:   LCALL   FP_BASE1        ;DO FP SUB
171F 0138           5777            AJMP    FPTST
                    5778            ;
1721 12051C         5779    ALEN:   CALL    CCAL            ;CALCULATE THE LEN OF THE SELECTED PROGRAM
1724 AA07           5780            MOV     R2,R7B0         ;SAVE THE HIGH BYTE
1726 EE             5781            MOV     A,R6            ;SAVE THE LOW BYTE
1727 81B3           5782            AJMP    TWO_EX          ;PUT IT ON THE STACK
                    5783            ;
1729 A2AF           5784    ATIME:  MOV     C,EA            ;SAVE INTERRUTS
172B C2AF           5785            CLR     EA
172D C047           5786            PUSH    MILLIV          ;SAVE MILLI VALUE
172F AA48           5787            MOV     R2,TVH          ;GET THE TIMER
1731 E549           5788            MOV     A,TVL
1733 92AF           5789            MOV     EA,C            ;SAVE INTERRUPTS
1735 91B3           5790            ACALL   TWO_EX          ;PUT TIMER ON THE STACK
1737 D0E0           5791            POP     ACC             ;GET MILLI
1739 91B1           5792            ACALL   TWO_R2          ;PUT MILLI ON STACK
173B 74C8           5793            MOV     A,#200
173D 91B1           5794            ACALL   TWO_R2          ;DIVIDE MILLI BY 200
173F 910A           5795            ACALL   ADIV
                    5796            ;
1741 12196F         5797    AADD:   LCALL   FP_BASE         ;DO FP ADDITION
1744 0138           5798            AJMP    FPTST           ;CHECK FOR ERRORS
                    5799            ;
                    5800            ;**************************************************************
                    5801            ;
                    5802            ; Here are some error messages that were moved
                    5803            ;
                    5804            ;**************************************************************
                    5805            ;
                    5806            ;
1746 42414420       5807    E1X:    DB      'BAD SYNTAX"'
174A 53594E54   
174E 415822     
1751 8A             5808    E2X:    DB      128+10
1752 44495649       5809            DB      'DIVIDE BY ZERO"'
1756 44452042   
175A 59205A45   
175E 524F22     
                    5810            ;
1761 41525241       5811    E6X:    DB      'ARRAY SIZE"'
1765 59205349   
1769 5A4522     
                    5812            ;
                    5813            ;**************************************************************
                    5814            ;
176C                5815    T_BUF:  ; TXA gets IBUF
BASIC52Q                                                                                                      PAGE 102

                    5816            ;
                    5817            ;**************************************************************
                    5818            ;
176C 750A00         5819            MOV     TXAH,#HIGH IBUF
176F 750807         5820            MOV     TXAL,#LOW IBUF
1772 22             5821            RET
                    5822            ;
                    5823            ;
                    5824            ;***************************************************************
                    5825            ;
1773                5826    CXFER:  ; Transfer a program from rom to ram
                    5827            ;
                    5828            ;***************************************************************
                    5829            ;
1773 12051C         5830            CALL    CCAL            ;GET EVERYTHING SET UP
1776 7A02           5831            MOV     R2,#HIGH PSTART
1778 7800           5832            MOV     R0,#LOW PSTART
177A B16D           5833            ACALL   LMOV            ;DO THE TRANSFER
177C 120664         5834            CALL    RCLEAR          ;CLEAR THE MEMORY
                    5835            ;
                    5836            ; Fall thru to CRAM
                    5837            ;
                    5838            ;***************************************************************
                    5839            ;
177F                5840    CRAM:   ; The command action routine - RAM - Run out of ram
                    5841            ;
                    5842            ;***************************************************************
                    5843            ;
177F C217           5844            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
1781 751302         5845            MOV     BOFAH,#HIGH PSTART
1784 751400         5846            MOV     BOFAL,#LOW PSTART
                    5847            ;
                    5848            ; Fall thru to Command Processor
                    5849            ;
                    5850            ;***************************************************************
                    5851            ;
1787                5852    CMND1:  ; The entry point for the command processor
                    5853            ;
                    5854            ;***************************************************************
                    5855            ;
1787 120C31         5856            LCALL   SPRINT1         ;WASTE AT AND HEX
178A C22D           5857            CLR     XBIT            ;TO RESET IF NEEDED
                    5858    ;
                    5859    ;*****************************************************************************
                    5860    ;****** Karmann 1 Bugfix *****************************************************
                    5861    ;
178C F1E0           5862            acall   TEST_USER       ;check for user command extensions
                    5863    ;
                    5864    ;****** continue with original code: *****************************************
                    5865    ;
178E 9000FD         5866            MOV     DPTR,#RDYS      ;PRINT THE READY MESSAGE
1791 1206AD         5867            CALL    CRP             ;DO A CR, THEN, PRINT FROM THE ROM
                    5868            ;
1794 D22F           5869    CMNDR:  SETB    DIRF            ;SET THE DIRECT INPUT BIT
1796 853E81         5870            MOV     SP,SPSAV        ;LOAD THE STACK
1799 119D           5871            ACALL   CL7             ;DO A CRLF
                    5872            ;
179B C218           5873    CMNX:   CLR     GTRD            ;CLEAR BREAK
BASIC52Q                                                                                                      PAGE 103

179D 90005E         5874            MOV     DPTR,#5EH       ;DO RUN TRAP
17A0 E0             5875            MOVX    A,@DPTR
17A1 6434           5876            XRL     A,#52
17A3 7003           5877            JNZ     CMNX1
17A5 020802         5878            LJMP    CRUN
17A8 7D3E           5879    CMNX1:  MOV     R5,#'>'         ;OUTPUT A PROMPT
17AA 120711         5880            LCALL   TEROT
17AD 1206D8         5881            CALL    INLINE          ;INPUT A LINE INTO IBUF
17B0 B1BA           5882            CALL    PP              ;PRE-PROCESS THE LINE
17B2 20D50F         5883            JB      F0,CMND3        ;NO LINE NUMBER
17B5 91F0           5884            CALL    LINE            ;PROCESS THE LINE
17B7 1205E7         5885            LCALL   LCLR
17BA 2015DE         5886            JB      LINEB,CMNX      ;DON'T CLEAR MEMORY IF NO NEED
17BD D215           5887            SETB    LINEB
17BF 120664         5888            LCALL   RCLEAR          ;CLEAR THE MEMORY
17C2 80D7           5889            SJMP    CMNX            ;LOOP BACK
                    5890            ;
17C4 F16C           5891    CMND3:  CALL    T_BUF           ;SET UP THE TEXT POINTER
17C6 120EE1         5892            CALL    DELTST          ;GET THE CHARACTER
17C9 60C9           5893            JZ      CMNDR           ;IF CR, EXIT
17CB 90010F         5894            MOV     DPTR,#CMNDD     ;POINT AT THE COMMAND LOOKUP
17CE B4F000         5895            CJNE    A,#T_CMND,CMND31;PROCESS STATEMENT IF NOT A COMMAND
17D1 400A           5896    CMND31: JC      CMND5
17D3 120ED7         5897            CALL    GCI1            ;BUMP TXA
17D6 540F           5898            ANL     A,#0FH          ;STRIP MSB'S FOR LOOKUP
17D8 12095C         5899            LCALL   ISTA1           ;PROCESS COMMAND
17DB 80B7           5900            SJMP    CMNDR
                    5901            ;
17DD 020813         5902    CMND5:  LJMP    ILOOP           ;CHECK FOR A POSSIBLE BREAK
                    5903    ;
                    5904    ;*****************************************************************************
                    5905    ;****** Karmann 1 Bugfix *****************************************************
                    5906    ;
17E0                5907    TEST_USER:                      ;check for user command extensions
17E0 E4             5908            CLR     A
17E1 902002         5909            MOV     DPTR,#2002H     ;CHECK FOR EXTERNAL TRAP PACKAGE
17E4 93             5910            MOVC    A,@A+DPTR
17E5 B45A03         5911            CJNE    A,#5AH,CMND11   ;test for user commands
17E8 122048         5912            LCALL   2048H           ;IF PRESENT JUMP TO LOCATION 200BH
17EB 22             5913    CMND11: ret
                    5914    ;
                    5915    ;****** continue with original code: *****************************************
                    5916    ;
                    5917            ;CONSTANTS
                    5918            ;
17EC 88             5919    XTALV:  DB      128+8           ; DEFAULT CRYSTAL VALUE
17ED 00             5920            DB      00H
17EE 00             5921            DB      00H
17EF 92             5922            DB      92H
17F0 05             5923            DB      05H
17F1 11             5924            DB      11H
                    5925            ;
17F2 85             5926    EXP11:  DB      85H
17F3 00             5927            DB      00H
17F4 42             5928            DB      42H
17F5 41             5929            DB      41H
17F6 87             5930            DB      87H
17F7 59             5931            DB      59H
BASIC52Q                                                                                                      PAGE 104

                    5932            ;
17F8 81             5933    EXP1:   DB      128+1           ; EXP(1)
17F9 00             5934            DB      00H
17FA 18             5935            DB      18H
17FB 28             5936            DB      28H
17FC 18             5937            DB      18H
17FD 27             5938            DB      27H
                    5939    ;
                    5940    ;*****************************************************************************
                    5941    ;****** Disable Intel programming for to get room ****************************
                    5942    ;
                    5943    ;IPTIME: DB     128-4           ;FPROG TIMING
                    5944    ;       DB      00H
                    5945    ;       DB      00H
                    5946    ;       DB      00H
                    5947    ;       DB      75H
                    5948    ;       DB      83H
                    5949    ;
                    5950    ;*****************************************************************************
                    5951    ;
17FE 81             5952    PIE:    DB      128+1           ;PI
17FF 00             5953            DB      00H
1800 26             5954            DB      26H
1801 59             5955            DB      59H
1802 41             5956            DB      41H
1803 31             5957            DB      31H             ; 3.1415926
                    5958            ;
                    5959            ;***************************************************************
                    5960            ;
                    5961            ; The error messages, some have been moved
                    5962            ;
                    5963            ;***************************************************************
                    5964            ;
1804 9E             5965    E7X:    DB      128+30
1805 41524954       5966            DB      'ARITH. UNDERFLOW"'
1809 482E2055   
180D 4E444552   
1811 464C4F57   
1815 22         
                    5967            ;
1816 4D454D4F       5968    E5X:    DB      'MEMORY ALLOCATION"'
181A 52592041   
181E 4C4C4F43   
1822 4154494F   
1826 4E22       
                    5969            ;
1828 A8             5970    E3X:    DB      128+40
1829 42414420       5971            DB      'BAD ARGUMENT"'
182D 41524755   
1831 4D454E54   
1835 22         
                    5972            ;
1836 492D5354       5973    EXI:    DB      'I-STACK"'
183A 41434B22   
                    5974            ;
                    5975            ;***************************************************************
                    5976            ;
                    5977            ; The command action routine - CONTINUE
BASIC52Q                                                                                                      PAGE 105

                    5978            ;
                    5979            ;***************************************************************
                    5980            ;
183E 901FA6         5981    CCONT:  MOV     DPTR,#E15X
1841 30174B         5982            JNB     CONB,ERROR      ;ERROR IF CONTINUE IS NOT SET
                    5983            ;
1844                5984    CC1:    ;used for input statement entry
                    5985            ;
1844 85420A         5986            MOV     TXAH,INTXAH     ;RESTORE TXA
1847 854308         5987            MOV     TXAL,INTXAL
184A 02080F         5988            JMP     CILOOP          ;EXECUTE
                    5989            ;
184D 850F83         5990    DTEMP:  MOV     DPH,TEMP5       ;RESTORE DPTR
1850 850E82         5991            MOV     DPL,TEMP4
1853 22             5992            RET
                    5993            ;
1854 85830F         5994    TEMPD:  MOV     TEMP5,DPH
1857 85820E         5995            MOV     TEMP4,DPL
185A 22             5996            RET
                    5997            ;
                    5998            ;**************************************************************
                    5999            ;
185B                6000    I_DL:   ; IDLE
                    6001            ;
                    6002            ;**************************************************************
                    6003            ;
185B 202F27         6004            JB      DIRF,E1XX       ;SYNTAX ERROR IN DIRECT INPUT
185E C296           6005            CLR     DACK            ;ACK IDLE
                    6006            ;
1860 438701         6007    U_ID1:  ORL     PCON,#01H
                    6008    ;       DB      01000011B       ;ORL DIRECT OP CODE
                    6009    ;       DB      87H             ;PCON ADDRESS
                    6010    ;       DB      01H             ;SET IDLE BIT
1863 20160B         6011            JB      INTPEN,I_RET    ;EXIT IF EXTERNAL INTERRUPT
1866 102108         6012            JBC     U_IDL,I_RET     ;EXIT IF USER WANTS TO
1869 3010F4         6013            JNB     OTS,U_ID1       ;LOOP IF TIMER NOT ENABLED
186C 1207E3         6014            LCALL   T_CMP           ;CHECK THE TIMER
186F 40EF           6015            JC      U_ID1           ;LOOP IF TIME NOT BIG ENOUGH
                    6016            ;
1871 D296           6017    I_RET:  SETB    DACK            ;RESTORE EXECUTION
1873 22             6018            RET                     ;EXIT IF IT IS
                    6019            ;
                    6020            ;
                    6021            ;
1874 A3             6022    ER0:    INC     DPTR            ;BUMP TO TEXT
1875 202F23         6023            JB      DIRF,ERROR0     ;CAN'T GET OUT OF DIRECT MODE
1878 301320         6024            JNB     ON_ERR,ERROR0   ;IF ON ERROR ISN'T SET, GO BACK
187B 900101         6025            MOV     DPTR,#ERRLOC    ;SAVE THE ERROR CODE
187E 120673         6026            CALL    RC2             ;SAVE ERROR AND SET UP THE STACKS
1881 A3             6027            INC     DPTR            ;POINT AT ERRNUM
1882 020844         6028            JMP     ERL4            ;LOAD ERR NUM AND EXIT
                    6029            ;
                    6030            ; Syntax error
                    6031            ;
1885 A22F           6032    E1XX:   MOV     C,DIRF          ;SEE IF IN DIRECT MODE
1887 901746         6033    E1XX1:  MOV     DPTR,#E1X       ;ERROR MESSAGE
188A 8004           6034            SJMP    ERROR1          ;TRAP ON SET DIRF
                    6035            ;
BASIC52Q                                                                                                      PAGE 106

188C 901836         6036    E1XX2:  MOV     DPTR,#EXI       ;STACK ERROR
                    6037            ;
                    6038            ; Falls through
                    6039            ;
                    6040            ;***************************************************************
                    6041            ;
                    6042            ;ERROR PROCESSOR - PRINT OUT THE ERROR TYPE, CHECK TO SEE IF IN
                    6043            ;                  RUN OR COMMAND MODE, FIND AND PRINT OUT THE
                    6044            ;                  LINE NUMBER IF IN RUN MODE
                    6045            ;
                    6046            ;***************************************************************
                    6047            ;
188F C3             6048    ERROR:  CLR     C               ;RESET STACK
1890 853E81         6049    ERROR1: MOV     SP,SPSAV        ;RESET THE STACK
1893 120C31         6050            LCALL   SPRINT1         ;CLEAR LINE AND AT MODE
1896 E4             6051            CLR     A               ;SET UP TO GET ERROR CODE
1897 93             6052            MOVC    A,@A+DPTR
1898 10E7D9         6053            JBC     ACC.7,ER0       ;PROCESS ERROR
                    6054            ;
189B 1154           6055    ERROR0: ACALL   TEMPD           ;SAVE THE DATA POINTER
189D 4003           6056            JC      ERROR01         ;NO RESET IF CARRY IS SET
189F 12066F         6057            LCALL   RC1             ;RESET THE STACKS
18A2 1206A3         6058    ERROR01:CALL    CRLF2           ;DO TWO CARRIAGE RET - LINE FEED
18A5 901FF8         6059            MOV     DPTR,#ERS       ;OUTPUT ERROR MESSAGE
18A8 1206AF         6060            CALL    ROM_P
18AB 114D           6061            CALL    DTEMP           ;GET THE ERROR MESSAGE BACK
                    6062            ;
18AD 1206AF         6063    ERRS:   CALL    ROM_P           ;PRINT ERROR TYPE
18B0 302F05         6064            JNB     DIRF,ER1        ;DO NOT PRINT IN LINE IF DIRF=1
                    6065            ;
18B3 C220           6066    SERR1:  CLR     STOPBIT         ;PRINT STOP THEN EXIT, FOR LIST
18B5 021787         6067            JMP     CMND1
                    6068            ;
18B8 900103         6069    ER1:    MOV     DPTR,#INS       ;OUTPUT IN LINE
18BB 1206AF         6070            CALL    ROM_P
                    6071            ;
                    6072            ;NOW, FIND THE LINE NUMBER
                    6073            ;
                    6074            ;
18BE 120E9B         6075            CALL    DP_B            ;GET THE FIRST ADDRESS OF THE PROGRAM
18C1 E4             6076            CLR     A               ;FOR INITIALIZATION
                    6077            ;
18C2 1154           6078    ER2:    ACALL   TEMPD           ;SAVE THE DPTR
18C4 1205DE         6079            CALL    ADDPTR          ;ADD ACC TO DPTR
18C7 11FB           6080            ACALL   ER4             ;R3:R1 = TXA-DPTR
18C9 4006           6081            JC      ER3             ;EXIT IF DPTR>TXA
18CB 6004           6082            JZ      ER3             ;EXIT IF DPTR=TXA
18CD E0             6083            MOVX    A,@DPTR         ;GET LENGTH
18CE B401F1         6084            CJNE    A,#EOF,ER2      ;SEE IF AT THE END
                    6085            ;
18D1 114D           6086    ER3:    ACALL   DTEMP           ;PUT THE LINE IN THE DPTR
18D3 11FB           6087            ACALL   ER4             ;R3:R1 = TXA - BEGINNING OF LINE
18D5 E9             6088            MOV     A,R1            ;GET LENGTH
18D6 240A           6089            ADD     A,#10           ;ADD 10 TO LENGTH, DPTR STILL HAS ADR
18D8 F545           6090            MOV     MT1,A           ;SAVE THE COUNT
18DA A3             6091            INC     DPTR            ;POINT AT LINE NUMBER HIGH BYTE
18DB 121652         6092            CALL    PMTOP1          ;LOAD R2:R0, PUT IT ON THE STACK
18DE 317D           6093            ACALL   FP_BASE7        ;OUTPUT IT
BASIC52Q                                                                                                      PAGE 107

18E0 2020D0         6094            JB      STOPBIT,SERR1   ;EXIT IF STOP BIT SET
18E3 1206A3         6095            CALL    CRLF2           ;DO SOME CRLF'S
18E6 114D           6096            CALL    DTEMP
18E8 1210A3         6097            CALL    UPPL            ;UNPROCESS THE LINE
18EB 121094         6098            CALL    CL6             ;PRINT IT
18EE 7D2D           6099    ER31:   MOV     R5,#'-'         ;OUTPUT DASHES, THEN AN X
18F0 316C           6100            ACALL   T_L             ;PRINT AN X IF ERROR CHARACTER FOUND
18F2 D545F9         6101            DJNZ    MT1,ER31        ;LOOP UNTIL DONE
18F5 7D58           6102            MOV     R5,#'X'
18F7 316C           6103            ACALL   T_L
18F9 01B3           6104            AJMP    SERR1
                    6105            ;
18FB AB0A           6106    ER4:    MOV     R3,TXAH         ;GET TEXT POINTER AND PERFORM SUBTRACTION
18FD A908           6107            MOV     R1,TXAL
18FF 020A02         6108            JMP     DUBSUB
                    6109            ;
                    6110            ;**************************************************************
                    6111            ;
                    6112            ; Interrupt driven timer
                    6113            ;
                    6114            ;**************************************************************
                    6115            ;
1902 854A8C         6116    I_DR:   MOV     TH0,SAVE_T      ;LOAD THE TIMER
1905 C547           6117            XCH     A,MILLIV        ;SAVE A, GET MILLI COUNTER
1907 04             6118            INC     A               ;BUMP COUNTER
1908 B4C808         6119            CJNE    A,#200,TR       ;CHECK OUT TIMER VALUE
190B E4             6120            CLR     A               ;FORCE ACC TO BE ZERO
190C 0549           6121            INC     TVL             ;INCREMENT LOW TIMER
190E B54902         6122            CJNE    A,TVL,TR        ;CHECK LOW VALUE
1911 0548           6123            INC     TVH             ;BUMP TIMER HIGH
                    6124            ;
1913 C547           6125    TR:     XCH     A,MILLIV
1915 D0D0           6126            POP     PSW
1917 32             6127            RETI
                    6128            ;
                    6129            ;**************************************************************
                    6130            ;
                    6131            ; The statement action routine - CLOCK
                    6132            ;
                    6133            ;**************************************************************
                    6134            ;
1918 3138           6135    SCLOCK: ACALL   OTST            ;GET CHARACTER AFTER CLOCK TOKEN
191A C2A9           6136            CLR     ET0
191C C22E           6137            CLR     C_BIT
191E 500D           6138            JNC     SC_R            ;EXIT IF A ZERO
                    6139    ;
                    6140    ;*****************************************************************************
                    6141    ;****** Use XTAL up to 47 MHz ************************************************
                    6142    ;****** Wulf 2 ***************************************************************
                    6143    ;
                    6144    ;       ANL     TMOD,#0F0H      ;SET UP THE MODE
                    6145    ;
1920 5389F1         6146            anl     TMOD,#0F1H      ;Set up 16 bit mode for timer 0
1923 438901         6147            orl     TMOD,#01H
                    6148    ;
                    6149    ;*****************************************************************************
                    6150    ;
1926 D22E           6151            SETB    C_BIT           ;USER INTERRUPTS
BASIC52Q                                                                                                      PAGE 108

1928 43A882         6152            ORL     IE,#82H         ;ENABLE ET0 AND EA
192B D28C           6153            SETB    TR0             ;TURN ON THE TIMER
                    6154            ;
192D 22             6155    SC_R:   RET
                    6156            ;
                    6157            ;***************************************************************
                    6158            ;
192E                6159    SUI:    ; Statement USER IN action routine
                    6160            ;
                    6161            ;***************************************************************
                    6162            ;
192E 3138           6163            ACALL   OTST
1930 921E           6164            MOV     CIUB,C          ;SET OR CLEAR CIUB
1932 22             6165            RET
                    6166            ;
                    6167            ;***************************************************************
                    6168            ;
1933                6169    SUO:    ; Statement USER OUT action routine
                    6170            ;
                    6171            ;***************************************************************
                    6172            ;
1933 3138           6173            ACALL   OTST
1935 921C           6174            MOV     COUB,C
1937 22             6175            RET
                    6176            ;
1938                6177    OTST:   ; Check for a one
                    6178            ;
1938 120ED5         6179            LCALL   GCI             ;GET THE CHARACTER, CLEARS CARRY
193B 9431           6180            SUBB    A,#'1'          ;SEE IF A ONE
193D B3             6181            CPL     C               ;SETS CARRY IF ONE, CLEARS IT IF ZERO
193E 22             6182    OTST1:  RET
                    6183            ;
                    6184            ;**************************************************************
                    6185            ;
                    6186            ; IBLK - EXECUTE USER SUPPLIED TOKEN
                    6187            ;
                    6188            ;**************************************************************
                    6189            ;
193F 20D4FC         6190    IBLK:   JB      PSW.4,OTST1     ;EXIT IF REGISTER BANK <> 0
1942 20D3F9         6191            JB      PSW.3,OTST1
1945 10E706         6192            JBC     ACC.7,IBLK1     ;SEE IF BIT SEVEN IS SET
1948 900047         6193            MOV     DPTR,#USENT     ;USER ENTRY LOCATION
194B 02095C         6194            LJMP    ISTA1
                    6195            ;
194E 20E02A         6196    IBLK1:  JB      ACC.0,FP_BASE6  ;FLOATING POINT INPUT
1951 6019           6197            JZ      T_L             ;DO OUTPUT ON 80H
1953 90196D         6198            MOV     DPTR,#FP_BASE-2
1956 73             6199            JMP     @A+DPTR
                    6200            ;
                    6201            ;
                    6202            ;**************************************************************
                    6203            ;
                    6204            ; GET_NUM - GET A NUMBER, EITHER HEX OR FLOAT
                    6205            ;
                    6206            ;**************************************************************
                    6207            ;
1957 3179           6208    GET_NUM:ACALL   FP_BASE5        ;SCAN FOR HEX
1959 5020           6209            JNC     FP_BASE6        ;DO FP INPUT
BASIC52Q                                                                                                      PAGE 109

                    6210            ;
195B 3181           6211            ACALL   FP_BASE9        ;ASCII STRING TO R2:R0
195D 700C           6212            JNZ     H_RET
195F C083           6213            PUSH    DPH             ;SAVE THE DATA_POINTER
1961 C082           6214            PUSH    DPL
1963 3187           6215            ACALL   FP_BASE12       ;PUT R2:R0 ON THE STACK
1965 D082           6216            POP     DPL             ;RESTORE THE DATA_POINTER
1967 D083           6217            POP     DPH
1969 E4             6218            CLR     A               ;NO ERRORS
196A 22             6219            RET                     ;EXIT
                    6220            ;
                    6221            ;**************************************************************
                    6222            ;
                    6223            ; WB - THE EGO MESSAGE
                    6224            ;
                    6225            ;**************************************************************
                    6226    ;
                    6227    ;*****************************************************************************
                    6228    ;****** Sorry - but the ego message had to be disabled ***********************
                    6229    ;
                    6230    ;WB:
                    6231    ;
                    6232    ;       DB      'W'+80H,'R'+80H
                    6233    ;       DB      'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
                    6234    ;       DB      ' ','B'+80H,'Y'+80H,' '
                    6235    ;       DB      'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '+80H
                    6236    ;       DB      'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
                    6237    ;       DB      'S','K'+80H,'Y'+80H
                    6238    ;       DB      ', I','N'+80H,'T'+80H,'E'+80H,'L'+80H
                    6239    ;       DB      ' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'+80H
                    6240    ;       DB      '. 1','9'+80H,'85'
                    6241    ;
                    6242    ;*****************************************************************************
                    6243            ;
196B 22             6244    H_RET:  RET
                    6245            ;
                    6246    ;************************************************************
                    6247    ;
                    6248    ; This is a complete BCD floating point package for the 8051 micro-
                    6249    ; controller. It provides 8 digits of accuracy with exponents that
                    6250    ; range from +127 to -127. The mantissa is in packed BCD, while the
                    6251    ; exponent is expressed in pseudo-twos complement. A ZERO exponent
                    6252    ; is used to express the number ZERO. An exponent value of 80H or
                    6253    ; greater than means the exponent is positive, i.e. 80H = E 0,
                    6254    ; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
                    6255    ; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
                    6256    ; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
                    6257    ; normalized after calculation. A normalized mantissa is >=.10 and
                    6258    ; <=.99999999.
                    6259    ;
                    6260    ; The numbers in memory assumed to be stored as follows:
                    6261    ;
                    6262    ; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
                    6263    ; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
                    6264    ; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
                    6265    ; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
                    6266    ; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
                    6267    ; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
BASIC52Q                                                                                                      PAGE 110

                    6268    ;
                    6269    ; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
                    6270    ; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
                    6271    ; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
                    6272    ; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
                    6273    ; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
                    6274    ; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
                    6275    ;
                    6276    ; The operations are performed thusly:
                    6277    ;
                    6278    ; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
                    6279    ;
                    6280    ; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
                    6281    ;
                    6282    ; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
                    6283    ;
                    6284    ; Note that the stack gets popped after an operation.
                    6285    ;
                    6286    ; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
                    6287    ;
                    6288    ;**********************************************************************
                    6289    ;
                    6290    ;**********************************************************************
                    6291    ;
                    6292    ; STATUS ON RETURN - After performing an operation (+, -, *, /)
                    6293    ;                    the accumulator contains the following status
                    6294    ;
                    6295    ; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
                    6296    ;
                    6297    ;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED
                    6298    ;
                    6299    ;             - BIT 2 - RESULT WAS ZER0
                    6300    ;
                    6301    ;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
                    6302    ;
                    6303    ;             - BIT 4 - NOT USED, 0 RETURNED
                    6304    ;
                    6305    ;             - BIT 5 - NOT USED, 0 RETURNED
                    6306    ;
                    6307    ;             - BIT 6 - NOT USED, 0 RETURNED
                    6308    ;
                    6309    ;             - BIT 7 - NOT USED, 0 RETURNED
                    6310    ;
                    6311    ; NOTE: When underflow occures, a ZERO result is returned.
                    6312    ;       When overflow or divide by zero occures, a result of
                    6313    ;       .99999999 E+127 is returned and it is up to the user
                    6314    ;       to handle these conditions as needed in the program.
                    6315    ;
                    6316    ; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
                    6317    ;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
                    6318    ;
                    6319    ;***********************************************************************
                    6320    ;
                    6321    ;***********************************************************************
                    6322    ;
                    6323    ; The following values MUST be provided by the user
                    6324    ;
                    6325    ;***********************************************************************
BASIC52Q                                                                                                      PAGE 111

                    6326    ;
  0009              6327    ARG_STACK       EQU     9       ;ARGUMENT STACK POINTER
  0001              6328    ARG_STACK_PAGE  EQU     1
                    6329    ;OUTPUT          EQU     1990H   ;CALL LOCATION TO OUTPUT A CHARACTER
  0058              6330    CONVERT         EQU     58H     ;LOCATION TO CONVERT NUMBERS
  0019              6331    INTGRC          BIT     25      ;BIT SET IF INTGER ERROR
                    6332    ;
                    6333    ;***********************************************************************
                    6334    ;
                    6335    ; The following equates are used internally
                    6336    ;
                    6337    ;***********************************************************************
                    6338    ;
  0006              6339    FP_NUMBER_SIZE  EQU     6
  0000              6340    UNDERFLOW       EQU     0
  0001              6341    OVERFLOW        EQU     1
  0002              6342    ZERO            EQU     2
  0003              6343    ZERO_DIVIDE     EQU     3
                    6344    ;
                    6345    ;***********************************************************************
                    6346    ;
                    6347            ;**************************************************************
                    6348            ;
                    6349            ; The following internal locations are used by the math pack
                    6350            ; ordering is important and the FP_DIGITS must be bit
                    6351            ; addressable
                    6352            ;
                    6353            ;***************************************************************
                    6354            ;
  0028              6355    FP_STATUS       EQU     28H             ;NOT USED
  0029              6356    FP_TEMP         EQU     FP_STATUS+1     ;NOT USED
  002A              6357    FP_CARRY        EQU     FP_STATUS+2     ;USED FOR BITS
  0023              6358    ADD_IN          BIT     35              ;DCMPXZ IN BASIC BACKAGE
  0050              6359    XSIGN           BIT     FP_CARRY.0
  0051              6360    FOUND_RADIX     BIT     FP_CARRY.1
  0052              6361    FIRST_RADIX     BIT     FP_CARRY.2
  0053              6362    DONE_LOAD       BIT     FP_CARRY.3
  002B              6363    FP_DIG12        EQU     FP_CARRY+1
  002C              6364    FP_DIG34        EQU     FP_CARRY+2
  002D              6365    FP_DIG56        EQU     FP_CARRY+3
  002E              6366    FP_DIG78        EQU     FP_CARRY+4
  002F              6367    FP_SIGN         EQU     FP_CARRY+5
  0078              6368    MSIGN           BIT     FP_SIGN.0
  0030              6369    FP_EXP          EQU     FP_CARRY+6
  002B              6370    FP_NIB1         EQU     FP_DIG12
  002C              6371    FP_NIB2         EQU     FP_NIB1+1
  002D              6372    FP_NIB3         EQU     FP_NIB1+2
  002E              6373    FP_NIB4         EQU     FP_NIB1+3
  002F              6374    FP_NIB5         EQU     FP_NIB1+4
  0030              6375    FP_NIB6         EQU     FP_NIB1+5
  0031              6376    FP_NIB7         EQU     FP_NIB1+6
  0032              6377    FP_NIB8         EQU     FP_NIB1+7
  0033              6378    FP_ACCX         EQU     FP_NIB1+8
  0034              6379    FP_ACCC         EQU     FP_NIB1+9
  0035              6380    FP_ACC1         EQU     FP_NIB1+10
  0036              6381    FP_ACC2         EQU     FP_NIB1+11
  0037              6382    FP_ACC3         EQU     FP_NIB1+12
  0038              6383    FP_ACC4         EQU     FP_NIB1+13
BASIC52Q                                                                                                      PAGE 112

  0039              6384    FP_ACC5         EQU     FP_NIB1+14
  003A              6385    FP_ACC6         EQU     FP_NIB1+15
  003B              6386    FP_ACC7         EQU     FP_NIB1+16
  003C              6387    FP_ACC8         EQU     FP_NIB1+17
  003D              6388    FP_ACCS         EQU     FP_NIB1+18
                    6389            ;
                    6390    ;        ORG     1990H
                    6391            ;
196C                6392    OUTPUT:
196C 020711         6393    T_L:    LJMP    TEROT
                    6394            ;
                    6395            ;
                    6396            ;**************************************************************
                    6397            ;
                    6398            ; The floating point entry points and jump table
                    6399            ;
                    6400            ;**************************************************************
                    6401            ;
196F 2193           6402    FP_BASE:        AJMP    FLOATING_ADD
1971 2189           6403    FP_BASE1:       AJMP    FLOATING_SUB
1973 4143           6404    FP_BASE2:       AJMP    FLOATING_COMP
1975 4173           6405    FP_BASE3:       AJMP    FLOATING_MUL
1977 41B0           6406    FP_BASE4:       AJMP    FLOATING_DIV
1979 8189           6407    FP_BASE5:       AJMP    HEXSCAN
197B 81C2           6408    FP_BASE6:       AJMP    FLOATING_POINT_INPUT
197D A17A           6409    FP_BASE7:       AJMP    FLOATING_POINT_OUTPUT
197F C1F7           6410    FP_BASE8:       AJMP    CONVERT_BINARY_TO_ASCII_STRING
1981 C19E           6411    FP_BASE9:       AJMP    CONVERT_ASCII_STRING_TO_BINARY
1983 C1D3           6412    FP_BASE10:      AJMP    MULNUM10
1985 E130           6413    FP_BASE11:      AJMP    HEXOUT
1987 81B6           6414    FP_BASE12:      AJMP    PUSHR2R0
                    6415            ;
                    6416            ;
1989                6417    FLOATING_SUB:
                    6418            ;
1989 75A001         6419            MOV     P2,#ARG_STACK_PAGE
198C A809           6420            MOV     R0,ARG_STACK
198E 18             6421            DEC     R0              ;POINT TO SIGN
198F E2             6422            MOVX    A,@R0           ;READ SIGN
1990 B2E0           6423            CPL     ACC.0
1992 F2             6424            MOVX    @R0,A
                    6425            ;
                    6426            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6427            ;
1993                6428    FLOATING_ADD:
                    6429            ;
                    6430            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6431            ;
                    6432            ;
1993 916A           6433            ACALL   MDES1           ;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
                    6434                                    ;R3=TOS-1 SIGN, OPERATION IS R1 # R0
                    6435            ;
1995 EF             6436            MOV     A,R7            ;GET TOS EXPONENT
1996 600D           6437            JZ      POP_AND_EXIT    ;IF TOS=0 THEN POP AND EXIT
1998 BE0012         6438            CJNE    R6,#0,LOAD1     ;CLEAR CARRY EXIT IF ZERO
                    6439            ;
                    6440            ;**************************************************************
                    6441            ;
BASIC52Q                                                                                                      PAGE 113

199B                6442    SWAP_AND_EXIT:  ; Swap external args and return
                    6443            ;
                    6444            ;**************************************************************
                    6445            ;
199B 915E           6446            ACALL   LOAD_POINTERS
199D 7F06           6447            MOV     R7,#FP_NUMBER_SIZE
                    6448            ;
199F E2             6449    SE1:    MOVX    A,@R0           ;SWAP THE ARGUMENTS
19A0 F3             6450            MOVX    @R1,A
19A1 18             6451            DEC     R0
19A2 19             6452            DEC     R1
19A3 DFFA           6453            DJNZ    R7,SE1
                    6454            ;
19A5                6455    POP_AND_EXIT:
                    6456            ;
19A5 E509           6457            MOV     A,ARG_STACK     ;POP THE STACK
19A7 2406           6458            ADD     A,#FP_NUMBER_SIZE
19A9 F509           6459            MOV     ARG_STACK,A
19AB E4             6460            CLR     A
19AC 22             6461            RET
                    6462            ;
                    6463            ;
19AD 9E             6464    LOAD1:  SUBB    A,R6            ;A = ARG 1 EXP - ARG 2 EXP
19AE 8F30           6465            MOV     FP_EXP,R7       ;SAVE EXPONENT AND SIGN
19B0 8C2F           6466            MOV     FP_SIGN,R4
19B2 5009           6467            JNC     LOAD2           ;ARG1 EXPONENT IS LARGER OR SAME
19B4 8E30           6468            MOV     FP_EXP,R6
19B6 8B2F           6469            MOV     FP_SIGN,R3
19B8 F4             6470            CPL     A
19B9 04             6471            INC     A               ;COMPENSATE FOR EXP DELTA
19BA C8             6472            XCH     A,R0            ;FORCE R0 TO POINT AT THE LARGEST
19BB C9             6473            XCH     A,R1            ;EXPONENT
19BC C8             6474            XCH     A,R0
                    6475            ;
19BD FF             6476    LOAD2:  MOV     R7,A            ;SAVE THE EXPONENT DELTA IN R7
19BE C223           6477            CLR     ADD_IN
19C0 BD0002         6478            CJNE    R5,#0,LOAD21
19C3 D223           6479            SETB    ADD_IN
                    6480            ;
                    6481            ; Load the R1 mantissa
                    6482            ;
19C5 917B           6483    LOAD21: ACALL   LOADR1_MANTISSA ;LOAD THE SMALLEST NUMBER
                    6484            ;
                    6485            ; Now align the number to the delta exponent
                    6486            ; R4 points to the string of the last digits lost
                    6487            ;
19C7 BF0B00         6488            CJNE    R7,#DIGIT+DIGIT+3,LOAD22
19CA 4002           6489    LOAD22: JC      LOAD23
19CC 7F0A           6490            MOV     R7,#DIGIT+DIGIT+2
                    6491            ;
19CE 752A00         6492    LOAD23: MOV     FP_CARRY,#00    ;CLEAR THE CARRY
19D1 71BB           6493            ACALL   RIGHT           ;SHIFT THE NUMBER
                    6494            ;
                    6495            ; Set up for addition and subtraction
                    6496            ;
19D3 7F04           6497            MOV     R7,#DIGIT       ;LOOP COUNT
19D5 792E           6498            MOV     R1,#FP_DIG78
                    6499    ;
BASIC52Q                                                                                                      PAGE 114

                    6500    ;*****************************************************************************
                    6501    ;****** Elektor 2 Patch ******************************************************
                    6502    ;****** Floting Point Error, found by D. Mudric and Z. Stojsavljevic *********
                    6503    ;
                    6504    ;       MOV     A,#9EH
                    6505    ;****** Error Number 1
                    6506    ;
                    6507    ;****** Value in R4 must be complemented with 100D (#9AH), it must be the
                    6508    ;****** first complement
                    6509    ;
                    6510    ;       CLR     C
                    6511    ;       SUBB    A,R4
                    6512    ;       DA      A
                    6513    ;       XCH     A,R4
                    6514    ;       JNZ     LOAD24
                    6515    ;       MOV     R4,A
                    6516    ;****** Error Number 2
                    6517    ;
                    6518    ;****** With substraction, after reducing both the minuend and the
                    6519    ;****** subtrahend to the same exponents, when R4 <> 0, it is obvious
                    6520    ;****** that one always has to make a borrowing from the first higher
                    6521    ;****** position of the minuend, not as it is stated by the original
                    6522    ;****** were it is made only when R4 = 50H
                    6523    ;
                    6524    ;LOAD24: CJNE    A,#50H,LOAD25   ;TEST FOR SUBTRACTION
                    6525    ;LOAD25: JNB     ADD_IN,SUBLP    ;DO SUBTRACTION IF NO ADD_IN
                    6526    ;
                    6527    ;*****************************************************************************
                    6528    ;****** Proper code starts here: *********************************************
                    6529    ;
19D7 749A           6530            mov     A,#9AH
19D9 C3             6531            clr     C
19DA 9C             6532            subb    A,R4
19DB D4             6533            da      A
19DC CC             6534            xch     A,R4
19DD 30231B         6535            jnb     ADD_IN,SUBLP
19E0 B45000         6536            cjne    A,#50H,LOAD25
                    6537    ;
                    6538    ;****** continue with original code: *****************************************
                    6539    ;
19E3 B3             6540    LOAD25: CPL     C               ;FLIP CARRY FOR ADDITION
19E4 31F2           6541            ACALL   ADDLP           ;DO ADDITION
                    6542            ;
19E6 5008           6543            JNC     ADD_R
19E8 052A           6544            INC     FP_CARRY
19EA 7F01           6545            MOV     R7,#1
19EC 71BB           6546            ACALL   RIGHT
19EE 7172           6547            ACALL   INC_FP_EXP      ;SHIFT AND BUMP EXPONENT
                    6548            ;
19F0 6163           6549    ADD_R:  AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6550            ;
19F2 E2             6551    ADDLP:  MOVX    A,@R0
19F3 37             6552            ADDC    A,@R1
19F4 D4             6553            DA      A
19F5 F7             6554            MOV     @R1,A
19F6 18             6555            DEC     R0
19F7 19             6556            DEC     R1
19F8 DFF8           6557            DJNZ    R7,ADDLP        ;LOOP UNTIL DONE
BASIC52Q                                                                                                      PAGE 115

19FA 22             6558            RET
                    6559            ;
19FB E2             6560    SUBLP:  MOVX    A,@R0           ;NOW DO SUBTRACTION
19FC FE             6561            MOV     R6,A
19FD E4             6562            CLR     A
19FE 3499           6563            ADDC    A,#99H
1A00 97             6564            SUBB    A,@R1
1A01 2E             6565            ADD     A,R6
1A02 D4             6566            DA      A
1A03 F7             6567            MOV     @R1,A
1A04 18             6568            DEC     R0
1A05 19             6569            DEC     R1
1A06 DFF3           6570            DJNZ    R7,SUBLP
1A08 4011           6571            JC      FSUB6
                    6572            ;
                    6573            ; Need to complement the result and sign because the floating
                    6574            ; point accumulator mantissa was larger than the external
                    6575            ; memory and their signs were equal.
                    6576            ;
1A0A B278           6577            CPL     FP_SIGN.0
1A0C 792E           6578            MOV     R1,#FP_DIG78
1A0E 7F04           6579            MOV     R7,#DIGIT       ;LOOP COUNT
                    6580            ;
1A10 749A           6581    FSUB5:  MOV     A,#9AH
1A12 97             6582            SUBB    A,@R1
1A13 2400           6583            ADD     A,#0
1A15 D4             6584            DA      A
1A16 F7             6585            MOV     @R1,A
1A17 19             6586            DEC     R1
1A18 B3             6587            CPL     C
1A19 DFF5           6588            DJNZ    R7,FSUB5        ;LOOP
                    6589            ;
                    6590            ; Now see how many zeros their are
                    6591            ;
1A1B 782B           6592    FSUB6:  MOV     R0,#FP_DIG12
1A1D 7F00           6593            MOV     R7,#0
                    6594            ;
1A1F E6             6595    FSUB7:  MOV     A,@R0
1A20 7008           6596            JNZ     FSUB8
1A22 0F             6597            INC     R7
1A23 0F             6598            INC     R7
1A24 08             6599            INC     R0
1A25 B82FF7         6600            CJNE    R0,#FP_SIGN,FSUB7
1A28 61AB           6601            AJMP    ZERO_AND_EXIT
                    6602            ;
1A2A B41000         6603    FSUB8:  CJNE    A,#10H,FSUB81
1A2D 5001           6604    FSUB81: JNC     FSUB9
1A2F 0F             6605            INC     R7
                    6606            ;
                    6607            ; Now R7 has the number of leading zeros in the FP ACC
                    6608            ;
1A30 E530           6609    FSUB9:  MOV     A,FP_EXP        ;GET THE OLD EXPONENT
1A32 C3             6610            CLR     C
1A33 9F             6611            SUBB    A,R7            ;SUBTRACT FROM THE NUMBER OF ZEROS
1A34 600B           6612            JZ      FSUB10
1A36 4009           6613            JC      FSUB10
                    6614            ;
1A38 F530           6615            MOV     FP_EXP,A        ;SAVE THE NEW EXPONENT
BASIC52Q                                                                                                      PAGE 116

                    6616            ;
1A3A 71F5           6617            ACALL   LEFT1           ;SHIFT THE FP ACC
1A3C 752A00         6618            MOV     FP_CARRY,#0
1A3F 6163           6619            AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6620            ;
1A41 61A5           6621    FSUB10: AJMP    UNDERFLOW_AND_EXIT
                    6622            ;
                    6623            ;***************************************************************
                    6624            ;
1A43                6625    FLOATING_COMP:  ; Compare two floating point numbers
                    6626                    ; used for relational operations and is faster
                    6627                    ; than subtraction. ON RETURN, The carry is set
                    6628                    ; if ARG1 is > ARG2, else carry is not set
                    6629                    ; if ARG1 = ARG2, F0 gets set
                    6630            ;
                    6631            ;***************************************************************
                    6632            ;
1A43 916A           6633            ACALL   MDES1           ;SET UP THE REGISTERS
1A45 E509           6634            MOV     A,ARG_STACK
1A47 240C           6635            ADD     A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1A49 F509           6636            MOV     ARG_STACK,A     ;POP THE STACK TWICE, CLEAR THE CARRY
1A4B EE             6637            MOV     A,R6            ;CHECK OUT EXPONENTS
1A4C C2D5           6638            CLR     F0
1A4E 9F             6639            SUBB    A,R7
1A4F 600A           6640            JZ      EXPONENTS_EQUAL
1A51 4003           6641            JC      ARG1_EXP_IS_LARGER
                    6642            ;
                    6643            ; Now the ARG2 EXPONENT is > ARG1 EXPONENT
                    6644            ;
1A53                6645    SIGNS_DIFFERENT:
                    6646            ;
1A53 EB             6647            MOV     A,R3            ;SEE IF SIGN OF ARG2 IS POSITIVE
1A54 8001           6648            SJMP    ARG1_EXP_IS_LARGER1
                    6649            ;
1A56                6650    ARG1_EXP_IS_LARGER:
                    6651            ;
1A56 EC             6652            MOV     A,R4            ;GET THE SIGN OF ARG1 EXPONENT
1A57                6653    ARG1_EXP_IS_LARGER1:
1A57 6001           6654            JZ      ARG1_EXP_IS_LARGER2
1A59 B3             6655            CPL     C
1A5A                6656    ARG1_EXP_IS_LARGER2:
1A5A 22             6657            RET
                    6658            ;
1A5B                6659    EXPONENTS_EQUAL:
                    6660            ;
                    6661            ; First, test the sign, then the mantissa
                    6662            ;
1A5B BD00F5         6663            CJNE    R5,#0,SIGNS_DIFFERENT
                    6664            ;
1A5E                6665    BOTH_PLUS:
                    6666            ;
1A5E 7F04           6667            MOV     R7,#DIGIT       ;POINT AT MS DIGIT
1A60 18             6668            DEC     R0
1A61 18             6669            DEC     R0
1A62 18             6670            DEC     R0
1A63 19             6671            DEC     R1
1A64 19             6672            DEC     R1
1A65 19             6673            DEC     R1
BASIC52Q                                                                                                      PAGE 117

                    6674            ;
                    6675            ; Now do the compare
                    6676            ;
1A66 E2             6677    CLOOP:  MOVX    A,@R0
1A67 FE             6678            MOV     R6,A
1A68 E3             6679            MOVX    A,@R1
1A69 9E             6680            SUBB    A,R6
1A6A 70EA           6681            JNZ     ARG1_EXP_IS_LARGER
1A6C 08             6682            INC     R0
1A6D 09             6683            INC     R1
1A6E DFF6           6684            DJNZ    R7,CLOOP
                    6685            ;
                    6686            ; If here, the numbers are the same, the carry is cleared
                    6687            ;
1A70 D2D5           6688            SETB    F0
1A72 22             6689            RET                     ;EXIT WITH EQUAL
                    6690            ;
                    6691    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                    6692    ;
1A73                6693    FLOATING_MUL:   ; Floating point multiply
                    6694    ;
                    6695    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                    6696    ;
1A73 9168           6697            ACALL   MUL_DIV_EXP_AND_SIGN
                    6698            ;
                    6699            ; check for zero exponents
                    6700            ;
1A75 BE0002         6701            CJNE    R6,#00,FMUL1    ;ARG 2 EXP ZERO?
1A78 61AB           6702    FMUL0:  AJMP    ZERO_AND_EXIT
                    6703            ;
                    6704            ; calculate the exponent
                    6705            ;
1A7A 8D2F           6706    FMUL1:  MOV     FP_SIGN,R5      ;SAVE THE SIGN, IN CASE OF FAILURE
                    6707            ;
1A7C EF             6708            MOV     A,R7
1A7D 60F9           6709            JZ      FMUL0
1A7F 2E             6710            ADD     A,R6            ;ADD THE EXPONENTS
1A80 20E705         6711            JB      ACC.7,FMUL_OVER
1A83 10D708         6712            JBC     CY,FMUL21       ;SEE IF CARRY IS SET
                    6713            ;
1A86 61A5           6714            AJMP    UNDERFLOW_AND_EXIT
                    6715            ;
1A88                6716    FMUL_OVER:
                    6717            ;
1A88 5002           6718            JNC     FMUL2           ;OK IF SET
                    6719            ;
1A8A 6194           6720    FOV:    AJMP    OVERFLOW_AND_EXIT
                    6721    ;*****************************************************************************
                    6722    ;****** Wulf 1 Bugfix 1 ******************************************************
                    6723    ;****** Multiplication Error, found by D. Wulf *******************************
                    6724    ;
                    6725    ; FMUL2: SUBB    A,#129          ;SUBTRACT THE EXPONENT BIAS
                    6726    ;
                    6727    ;*****************************************************************************
                    6728    ;****** Proper code starts here: *********************************************
                    6729    ;
1A8C D228           6730    FMUL2:  setb    mul_underflow   ;Flag of multiplication limit case
1A8E 9483           6731    FMUL21: subb    A,#83H          ;exp. multipl. results are within the limits
BASIC52Q                                                                                                      PAGE 118

1A90 04             6732            inc     A               ;Correct SUBB 83H
1A91 04             6733            inc     A               ;to original SUBB 81H
1A92 4002           6734            jc     NMARK_L          ;Limit case
1A94 C228           6735            clr     mul_underflow   ;No limit case
1A96                6736    NMARK_L:
                    6737    ;
                    6738    ;****** continue with original code: *****************************************
                    6739    ;
1A96 FE             6740            MOV     R6,A            ;SAVE IT FOR LATER
                    6741            ;
                    6742            ; Unpack and load R0
                    6743            ;
1A97 717E           6744            ACALL   UNPACK_R0
                    6745            ;
                    6746            ; Now set up for loop multiply
                    6747            ;
1A99 7B04           6748            MOV     R3,#DIGIT
1A9B AC01           6749            MOV     R4,R1B0
                    6750            ;
                    6751            ; Now, do the multiply and accumulate the product
                    6752            ;
1A9D 8C01           6753    FMUL3:  MOV     R1B0,R4
1A9F E3             6754            MOVX    A,@R1
1AA0 FA             6755            MOV     R2,A
1AA1 912B           6756            ACALL   MUL_NIBBLE
                    6757            ;
1AA3 EA             6758            MOV     A,R2
1AA4 C4             6759            SWAP    A
1AA5 912B           6760            ACALL   MUL_NIBBLE
1AA7 1C             6761            DEC     R4
1AA8 DBF3           6762            DJNZ    R3,FMUL3
                    6763            ;
                    6764            ; Now, pack and restore the sign
                    6765            ;
1AAA 8E30           6766            MOV     FP_EXP,R6
1AAC 8D2F           6767            MOV     FP_SIGN,R5
1AAE 6111           6768            AJMP    PACK            ;FINISH IT OFF
                    6769            ;
                    6770            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6771            ;
1AB0                6772    FLOATING_DIV:
                    6773            ;
                    6774            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6775            ;
1AB0 916A           6776            ACALL   MDES1
                    6777            ;
                    6778            ; Check the exponents
                    6779            ;
1AB2 8D2F           6780            MOV     FP_SIGN,R5      ;SAVE THE SIGN
1AB4 BF0006         6781            CJNE    R7,#0,DIV0      ;CLEARS THE CARRY
1AB7 7194           6782            ACALL   OVERFLOW_AND_EXIT
1AB9 E4             6783            CLR     A
1ABA D2E3           6784            SETB    ACC.ZERO_DIVIDE
1ABC 22             6785            RET
                    6786            ;
1ABD EE             6787    DIV0:   MOV     A,R6            ;GET EXPONENT
1ABE 60B8           6788            JZ      FMUL0           ;EXIT IF ZERO
1AC0 9F             6789            SUBB    A,R7            ;DELTA EXPONENT
BASIC52Q                                                                                                      PAGE 119

1AC1 20E704         6790            JB      ACC.7,D_UNDER
1AC4 5004           6791            JNC     DIV3
1AC6 61A5           6792            AJMP    UNDERFLOW_AND_EXIT
                    6793            ;
1AC8 50C0           6794    D_UNDER:JNC     FOV
                    6795            ;
1ACA 2481           6796    DIV3:   ADD     A,#129          ;CORRECTLY BIAS THE EXPONENT
1ACC F530           6797            MOV     FP_EXP,A        ;SAVE THE EXPONENT
1ACE 917B           6798            ACALL   LOADR1_MANTISSA ;LOAD THE DIVIDED
                    6799            ;
1AD0 7A34           6800            MOV     R2,#FP_ACCC     ;SAVE LOCATION
1AD2 AB00           6801            MOV     R3,R0B0         ;SAVE POINTER IN R3
1AD4 752A00         6802            MOV     FP_CARRY,#0     ;ZERO CARRY BYTE
                    6803            ;
1AD7 7DFF           6804    DIV4:   MOV     R5,#0FFH        ;LOOP COUNT
1AD9 D3             6805            SETB    C
                    6806            ;
1ADA 8B00           6807    DIV5:   MOV     R0B0,R3         ;RESTORE THE EXTERNAL POINTER
1ADC 792E           6808            MOV     R1,#FP_DIG78    ;SET UP INTERNAL POINTER
1ADE 7F04           6809            MOV     R7,#DIGIT       ;LOOP COUNT
1AE0 5017           6810            JNC     DIV7            ;EXIT IF NO CARRY
                    6811            ;
1AE2 E2             6812    DIV6:   MOVX    A,@R0           ;DO ACCUMLATION
1AE3 FE             6813            MOV     R6,A
1AE4 E4             6814            CLR     A
1AE5 3499           6815            ADDC    A,#99H
1AE7 9E             6816            SUBB    A,R6
1AE8 27             6817            ADD     A,@R1
1AE9 D4             6818            DA      A
1AEA F7             6819            MOV     @R1,A
1AEB 18             6820            DEC     R0
1AEC 19             6821            DEC     R1
1AED DFF3           6822            DJNZ    R7,DIV6         ;LOOP
                    6823            ;
1AEF 0D             6824            INC     R5              ;SUBTRACT COUNTER
1AF0 40E8           6825            JC      DIV5            ;KEEP LOOPING IF CARRY
1AF2 E7             6826            MOV     A,@R1           ;GET CARRY
1AF3 9401           6827            SUBB    A,#1            ;CARRY IS CLEARED
1AF5 F7             6828            MOV     @R1,A           ;SAVE CARRY DIGIT
1AF6 B3             6829            CPL     C
1AF7 80E1           6830            SJMP    DIV5            ;LOOP
                    6831            ;
                    6832            ; Restore the result if carry was found
                    6833            ;
1AF9 31F2           6834    DIV7:   ACALL   ADDLP           ;ADD NUMBER BACK
1AFB 7700           6835            MOV     @R1,#0          ;CLEAR CARRY
1AFD 8A00           6836            MOV     R0B0,R2         ;GET SAVE COUNTER
1AFF A605           6837            MOV     @R0,5           ;SAVE COUNT BYTE
                    6838            ;
1B01 0A             6839            INC     R2              ;ADJUST SAVE COUNTER
1B02 7F01           6840            MOV     R7,#1           ;BUMP DIVIDEND
1B04 71F3           6841            ACALL   LEFT
1B06 BA3ECE         6842            CJNE    R2,#FP_ACC8+2,DIV4
                    6843            ;
1B09 D53002         6844            DJNZ    FP_EXP,DIV8
1B0C 61A5           6845            AJMP    UNDERFLOW_AND_EXIT
                    6846            ;
1B0E 752A00         6847    DIV8:   MOV     FP_CARRY,#0
BASIC52Q                                                                                                      PAGE 120

                    6848            ;
                    6849            ;***************************************************************
                    6850            ;
1B11                6851    PACK:   ; Pack the mantissa
                    6852            ;
                    6853            ;***************************************************************
                    6854            ;
                    6855            ; First, set up the pointers
                    6856            ;
1B11 7834           6857            MOV     R0,#FP_ACCC
1B13 E6             6858            MOV     A,@R0           ;GET FP_ACCC
1B14 FE             6859            MOV     R6,A            ;SAVE FOR ZERO COUNT
1B15 6003           6860            JZ      PACK0           ;JUMP OVER IF ZERO
1B17 7172           6861            ACALL   INC_FP_EXP      ;BUMP THE EXPONENT
1B19 18             6862            DEC     R0
                    6863            ;
1B1A 08             6864    PACK0:  INC     R0              ;POINT AT FP_ACC1
                    6865            ;
1B1B 7408           6866    PACK1:  MOV     A,#8            ;ADJUST NIBBLE POINTER
1B1D F9             6867            MOV     R1,A
1B1E 28             6868            ADD     A,R0
1B1F F8             6869            MOV     R0,A
1B20 B60500         6870            CJNE    @R0,#5,PACK11   ;SEE IF ADJUSTING NEEDED
1B23 4013           6871    PACK11: JC      PACK31
                    6872            ;
1B25 D3             6873    PACK2:  SETB    C
1B26 E4             6874            CLR     A
1B27 18             6875            DEC     R0
1B28 36             6876            ADDC    A,@R0
1B29 D4             6877            DA      A
1B2A D6             6878            XCHD    A,@R0           ;SAVE THE VALUE
1B2B 30E409         6879            JNB     ACC.4,PACK3
1B2E D9F5           6880            DJNZ    R1,PACK2
                    6881            ;
1B30 18             6882            DEC     R0
1B31 7601           6883            MOV     @R0,#1
1B33 7172           6884            ACALL   INC_FP_EXP
1B35 8018           6885            SJMP    PACK4
                    6886            ;
1B37 19             6887    PACK3:  DEC     R1
1B38 E9             6888    PACK31: MOV     A,R1
1B39 C3             6889            CLR     C
1B3A C8             6890            XCH     A,R0
1B3B 98             6891            SUBB    A,R0
1B3C F8             6892            MOV     R0,A
                    6893    ;
                    6894    ;*****************************************************************************
                    6895    ;****** Wulf 1 Bugfix 2 ******************************************************
                    6896    ;****** Multiplication Error, found by D. Wulf *******************************
                    6897    ;
1B3D 30280F         6898            jnb     mul_underflow,PACK4
1B40 C228           6899            clr     mul_underflow
1B42 E530           6900            mov     A,FP_EXP        ;test of exceeding in limit case
1B44 6007           6901            jz      UNDER_MD        ;message about underflow
1B46 F4             6902            cpl     a               ;test of exceeding in limit case
1B47 6004           6903            jz      UNDER_MD        ;message about underflow
1B49 F4             6904            cpl     a               ;restore original exp
1B4A B40102         6905            cjne    a,#1,pack4      ;jump if not outer limit
BASIC52Q                                                                                                      PAGE 121

1B4D                6906    UNDER_MD:
1B4D 61A5           6907            ajmp    UNDERFLOW_AND_EXIT
                    6908    ;
                    6909    ;****** continue with original code: *****************************************
                    6910    ;
1B4F 792B           6911    PACK4:  MOV     R1,#FP_DIG12
                    6912            ;
                    6913            ; Now, pack
                    6914            ;
1B51 E6             6915    PLOOP:  MOV     A,@R0
1B52 C4             6916            SWAP    A               ;FLIP THE DIGITS
1B53 08             6917            INC     R0
1B54 D6             6918            XCHD    A,@R0
1B55 4206           6919            ORL     6,A             ;ACCUMULATE THE OR'ED DIGITS
1B57 F7             6920            MOV     @R1,A
1B58 08             6921            INC     R0
1B59 09             6922            INC     R1
1B5A B92FF4         6923            CJNE    R1,#FP_SIGN,PLOOP
1B5D EE             6924            MOV     A,R6
1B5E 7003           6925            JNZ     STORE_ALIGN_TEST_AND_EXIT
1B60 753000         6926            MOV     FP_EXP,#0       ;ZERO EXPONENT
                    6927            ;
                    6928            ;**************************************************************
                    6929            ;
1B63                6930    STORE_ALIGN_TEST_AND_EXIT:      ;Save the number align carry and exit
                    6931            ;
                    6932            ;**************************************************************
                    6933            ;
1B63 915E           6934            ACALL   LOAD_POINTERS
1B65 8909           6935            MOV     ARG_STACK,R1    ;SET UP THE NEW STACK
1B67 7830           6936            MOV     R0,#FP_EXP
                    6937            ;
                    6938            ; Now load the numbers
                    6939            ;
1B69 E6             6940    STORE2: MOV     A,@R0
1B6A F3             6941            MOVX    @R1,A           ;SAVE THE NUMBER
1B6B 18             6942            DEC     R0
1B6C 19             6943            DEC     R1
1B6D B82AF9         6944            CJNE    R0,#FP_CARRY,STORE2
                    6945            ;
1B70 E4             6946            CLR     A               ;NO ERRORS
                    6947            ;
1B71 22             6948    PRET:   RET                     ;EXIT
                    6949            ;
1B72                6950    INC_FP_EXP:
                    6951            ;
1B72 0530           6952            INC     FP_EXP
1B74 E530           6953            MOV     A,FP_EXP
1B76 70F9           6954            JNZ     PRET            ;EXIT IF NOT ZERO
1B78 D0E0           6955            POP     ACC             ;WASTE THE CALLING STACK
1B7A D0E0           6956            POP     ACC
1B7C 6194           6957            AJMP    OVERFLOW_AND_EXIT
                    6958    ;
                    6959    ;***********************************************************************
                    6960    ;
1B7E                6961    UNPACK_R0:      ; Unpack BCD digits and load into nibble locations
                    6962    ;
                    6963    ;***********************************************************************
BASIC52Q                                                                                                      PAGE 122

                    6964            ;
1B7E C001           6965            PUSH    R1B0
1B80 7932           6966            MOV     R1,#FP_NIB8
                    6967            ;
1B82 E2             6968    ULOOP:  MOVX    A,@R0
1B83 540F           6969            ANL     A,#0FH
1B85 F7             6970            MOV     @R1,A           ;SAVE THE NIBBLE
1B86 E2             6971            MOVX    A,@R0
1B87 C4             6972            SWAP    A
1B88 540F           6973            ANL     A,#0FH
1B8A 19             6974            DEC     R1
1B8B F7             6975            MOV     @R1,A           ;SAVE THE NIBBLE AGAIN
1B8C 18             6976            DEC     R0
1B8D 19             6977            DEC     R1
1B8E B92AF1         6978            CJNE    R1,#FP_NIB1-1,ULOOP
                    6979            ;
1B91 D001           6980            POP     R1B0
                    6981            ;
1B93 22             6982    LOAD7:  RET
                    6983            ;
                    6984            ;**************************************************************
                    6985            ;
1B94                6986    OVERFLOW_AND_EXIT:      ;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
                    6987            ;
                    6988            ;**************************************************************
                    6989            ;
1B94 782E           6990            MOV     R0,#FP_DIG78
1B96 7499           6991            MOV     A,#99H
                    6992            ;
1B98 F6             6993    OVE1:   MOV     @R0,A
1B99 18             6994            DEC     R0
1B9A B82AFB         6995            CJNE    R0,#FP_CARRY,OVE1
                    6996            ;
1B9D 7530FF         6997            MOV     FP_EXP,#0FFH
1BA0 7163           6998            ACALL   STORE_ALIGN_TEST_AND_EXIT
                    6999            ;
1BA2 D2E1           7000            SETB    ACC.OVERFLOW
1BA4 22             7001            RET
                    7002            ;
                    7003            ;**************************************************************
                    7004            ;
1BA5                7005    UNDERFLOW_AND_EXIT:     ;LOAD 0, SET UF BIT, AND EXIT
                    7006            ;
                    7007            ;**************************************************************
                    7008            ;
1BA5 71AB           7009            ACALL   ZERO_AND_EXIT
1BA7 E4             7010            CLR     A
1BA8 D2E0           7011            SETB    ACC.UNDERFLOW
1BAA 22             7012            RET
                    7013            ;
                    7014            ;**************************************************************
                    7015            ;
1BAB                7016    ZERO_AND_EXIT:          ;LOAD 0, SET ZERO BIT, AND EXIT
                    7017            ;
                    7018            ;**************************************************************
                    7019            ;
1BAB 71B2           7020            ACALL   FP_CLEAR
1BAD 7163           7021            ACALL   STORE_ALIGN_TEST_AND_EXIT
BASIC52Q                                                                                                      PAGE 123

1BAF D2E2           7022            SETB    ACC.ZERO
1BB1 22             7023            RET                     ;EXIT
                    7024            ;
                    7025            ;**************************************************************
                    7026            ;
1BB2                7027    FP_CLEAR:
                    7028            ;
                    7029            ; Clear internal storage
                    7030            ;
                    7031            ;**************************************************************
                    7032            ;
1BB2 E4             7033            CLR     A
1BB3 783D           7034            MOV     R0,#FP_ACC8+1
                    7035            ;
1BB5 F6             7036    FPC1:   MOV     @R0,A
1BB6 18             7037            DEC     R0
1BB7 B829FB         7038            CJNE    R0,#FP_TEMP,FPC1
1BBA 22             7039            RET
                    7040            ;
                    7041            ;**************************************************************
                    7042            ;
1BBB                7043    RIGHT:  ; Shift ACCUMULATOR RIGHT the number of nibbles in R7
                    7044            ; Save the shifted values in R4 if SAVE_ROUND is set
                    7045            ;
                    7046            ;**************************************************************
                    7047            ;
1BBB 7C00           7048            MOV     R4,#0           ;IN CASE OF NO SHIFT
                    7049            ;
1BBD C3             7050    RIGHT1: CLR     C
1BBE EF             7051    RIGHT2: MOV     A,R7            ;GET THE DIGITS TO SHIFT
1BBF 6022           7052            JZ      RIGHTL1         ;EXIT IF ZERO
1BC1 9402           7053            SUBB    A,#2            ;TWO TO DO?
1BC3 501F           7054            JNC     RIGHT5          ;SHIFT TWO NIBBLES
                    7055            ;
                    7056            ; Swap one nibble then exit
                    7057            ;
1BC5 C000           7058    RIGHT3: PUSH    R0B0            ;SAVE POINTER REGISTER
1BC7 C001           7059            PUSH    R1B0
                    7060            ;
1BC9 792E           7061            MOV     R1,#FP_DIG78    ;LOAD THE POINTERS
1BCB 782D           7062            MOV     R0,#FP_DIG56
1BCD EC             7063            MOV     A,R4            ;GET THE OVERFLOW REGISTER
1BCE D7             7064            XCHD    A,@R1           ;GET DIGIT 8
1BCF C4             7065            SWAP    A               ;FLIP FOR LOAD
1BD0 FC             7066            MOV     R4,A
                    7067            ;
1BD1 E7             7068    RIGHTL: MOV     A,@R1           ;GET THE LOW ORDER BYTE
1BD2 D6             7069            XCHD    A,@R0           ;SWAP NIBBLES
1BD3 C4             7070            SWAP    A               ;FLIP FOR STORE
1BD4 F7             7071            MOV     @R1,A           ;SAVE THE DIGITS
1BD5 18             7072            DEC     R0              ;BUMP THE POINTERS
1BD6 19             7073            DEC     R1
1BD7 B92AF7         7074            CJNE    R1,#FP_DIG12-1,RIGHTL   ;LOOP
                    7075            ;
1BDA E7             7076            MOV     A,@R1           ;ACC = CH8
1BDB C4             7077            SWAP    A               ;ACC = 8CH
1BDC 540F           7078            ANL     A,#0FH          ;ACC = 0CH
1BDE F7             7079            MOV     @R1,A           ;CARRY DONE
BASIC52Q                                                                                                      PAGE 124

1BDF D001           7080            POP     R1B0            ;EXIT
1BE1 D000           7081            POP     R0B0            ;RESTORE REGISTER
1BE3 22             7082    RIGHTL1:RET
                    7083            ;
1BE4 FF             7084    RIGHT5: MOV     R7,A            ;SAVE THE NEW SHIFT NUMBER
1BE5 E4             7085            CLR     A
1BE6 C52A           7086            XCH     A,FP_CARRY      ;SWAP THE NIBBLES
1BE8 C52B           7087            XCH     A,FP_DIG12
1BEA C52C           7088            XCH     A,FP_DIG34
1BEC C52D           7089            XCH     A,FP_DIG56
1BEE C52E           7090            XCH     A,FP_DIG78
1BF0 FC             7091            MOV     R4,A            ;SAVE THE LAST DIGIT SHIFTED
1BF1 80CB           7092            SJMP    RIGHT2
                    7093            ;
                    7094            ;***************************************************************
                    7095            ;
1BF3                7096    LEFT:   ; Shift ACCUMULATOR LEFT the number of nibbles in R7
                    7097            ;
                    7098            ;***************************************************************
                    7099            ;
1BF3 7C00           7100            MOV     R4,#00H         ;CLEAR FOR SOME ENTRYS
                    7101            ;
1BF5 C3             7102    LEFT1:  CLR     C
1BF6 EF             7103    LEFT2:  MOV     A,R7            ;GET SHIFT VALUE
1BF7 6022           7104            JZ      LEFTL1          ;EXIT IF ZERO
1BF9 9402           7105            SUBB    A,#2            ;SEE HOW MANY BYTES TO SHIFT
1BFB 501F           7106            JNC     LEFT5
                    7107            ;
1BFD C000           7108    LEFT3:  PUSH    R0B0            ;SAVE POINTER
1BFF C001           7109            PUSH    R1B0
1C01 782A           7110            MOV     R0,#FP_CARRY
1C03 792B           7111            MOV     R1,#FP_DIG12
                    7112            ;
1C05 E6             7113            MOV     A,@R0           ;ACC=CHCL
1C06 C4             7114            SWAP    A               ;ACC = CLCH
1C07 F6             7115            MOV     @R0,A           ;ACC = CLCH, @R0 = CLCH
                    7116            ;
1C08 E7             7117    LEFTL:  MOV     A,@R1           ;DIG 12
1C09 C4             7118            SWAP    A               ;DIG 21
1C0A D6             7119            XCHD    A,@R0
1C0B F7             7120            MOV     @R1,A           ;SAVE IT
1C0C 08             7121            INC     R0              ;BUMP POINTERS
1C0D 09             7122            INC     R1
1C0E B82EF7         7123            CJNE    R0,#FP_DIG78,LEFTL
                    7124            ;
1C11 EC             7125            MOV     A,R4
1C12 C4             7126            SWAP    A
1C13 D6             7127            XCHD    A,@R0
1C14 54F0           7128            ANL     A,#0F0H
1C16 FC             7129            MOV     R4,A
                    7130            ;
1C17 D001           7131            POP     R1B0
1C19 D000           7132            POP     R0B0            ;RESTORE
1C1B 22             7133    LEFTL1: RET                     ;DONE
                    7134            ;
1C1C FF             7135    LEFT5:  MOV     R7,A            ;RESTORE COUNT
1C1D E4             7136            CLR     A
1C1E CC             7137            XCH     A,R4            ;GET THE RESTORATION BYTE
BASIC52Q                                                                                                      PAGE 125

1C1F C52E           7138            XCH     A,FP_DIG78      ;DO THE SWAP
1C21 C52D           7139            XCH     A,FP_DIG56
1C23 C52C           7140            XCH     A,FP_DIG34
1C25 C52B           7141            XCH     A,FP_DIG12
1C27 C52A           7142            XCH     A,FP_CARRY
1C29 80CB           7143            SJMP    LEFT2
                    7144            ;
1C2B                7145    MUL_NIBBLE:
                    7146            ;
                    7147            ; Multiply the nibble in R7 by the FP_NIB locations
                    7148            ; accumulate the product in FP_ACC
                    7149            ;
                    7150            ; Set up the pointers for multiplication
                    7151            ;
1C2B 540F           7152            ANL     A,#0FH          ;STRIP OFF MS NIBBLE
1C2D FF             7153            MOV     R7,A
1C2E 783C           7154            MOV     R0,#FP_ACC8
1C30 7932           7155            MOV     R1,#FP_NIB8
1C32 E4             7156            CLR     A
1C33 F533           7157            MOV     FP_ACCX,A
                    7158            ;
1C35 18             7159    MNLOOP: DEC     R0              ;BUMP POINTER TO PROPAGATE CARRY
1C36 26             7160            ADD     A,@R0           ;ATTEMPT TO FORCE CARRY
1C37 D4             7161            DA      A               ;BCD ADJUST
1C38 30E403         7162            JNB     ACC.4,MNL0      ;DON'T ADJUST IF NO NEED
1C3B 18             7163            DEC     R0              ;PROPAGATE CARRY TO THE NEXT DIGIT
1C3C 06             7164            INC     @R0             ;DO THE ADJUSTING
1C3D 08             7165            INC     R0              ;RESTORE R0
                    7166            ;
1C3E D6             7167    MNL0:   XCHD    A,@R0           ;RESTORE INITIAL NUMBER
1C3F 8FF0           7168            MOV     B,R7            ;GET THE NUBBLE TO MULTIPLY
1C41 E7             7169            MOV     A,@R1           ;GET THE OTHER NIBBLE
1C42 A4             7170            MUL     AB              ;DO THE MULTIPLY
1C43 75F00A         7171            MOV     B,#10           ;NOW BCD ADJUST
1C46 84             7172            DIV     AB
1C47 C5F0           7173            XCH     A,B             ;GET THE REMAINDER
1C49 26             7174            ADD     A,@R0           ;PROPAGATE THE PARTIAL PRODUCTS
1C4A D4             7175            DA      A               ;BCD ADJUST
1C4B 30E402         7176            JNB     ACC.4,MNL1      ;PROPAGATE PARTIAL PRODUCT CARRY
1C4E 05F0           7177            INC     B
                    7178            ;
1C50 08             7179    MNL1:   INC     R0
1C51 D6             7180            XCHD    A,@R0           ;SAVE THE NEW PRODUCT
1C52 18             7181            DEC     R0
1C53 E5F0           7182            MOV     A,B             ;GET BACK THE QUOTIENT
1C55 19             7183            DEC     R1
1C56 B92ADC         7184            CJNE    R1,#FP_NIB1-1,MNLOOP
                    7185            ;
1C59 2533           7186            ADD     A,FP_ACCX       ;GET THE OVERFLOW
1C5B D4             7187            DA      A               ;ADJUST
1C5C F6             7188            MOV     @R0,A           ;SAVE IT
1C5D 22             7189            RET                     ;EXIT
                    7190            ;
                    7191            ;***************************************************************
                    7192            ;
1C5E                7193    LOAD_POINTERS:  ; Load the ARG_STACK into R0 and bump R1
                    7194            ;
                    7195            ;***************************************************************
BASIC52Q                                                                                                      PAGE 126

                    7196            ;
1C5E 75A001         7197            MOV     P2,#ARG_STACK_PAGE
1C61 A809           7198            MOV     R0,ARG_STACK
1C63 7406           7199            MOV     A,#FP_NUMBER_SIZE
1C65 28             7200            ADD     A,R0
1C66 F9             7201            MOV     R1,A
1C67 22             7202            RET
                    7203            ;
                    7204            ;***************************************************************
                    7205            ;
1C68                7206    MUL_DIV_EXP_AND_SIGN:
                    7207            ;
                    7208            ; Load the sign into R7, R6. R5 gets the sign for
                    7209            ; multiply and divide.
                    7210            ;
                    7211            ;***************************************************************
                    7212            ;
1C68 71B2           7213            ACALL   FP_CLEAR        ;CLEAR INTERNAL MEMORY
                    7214            ;
1C6A 915E           7215    MDES1:  ACALL   LOAD_POINTERS   ;LOAD REGISTERS
1C6C E2             7216            MOVX    A,@R0           ;ARG 1 EXP
1C6D FF             7217            MOV     R7,A            ;SAVED IN R7
1C6E E3             7218            MOVX    A,@R1           ;ARG 2 EXP
1C6F FE             7219            MOV     R6,A            ;SAVED IN R6
1C70 18             7220            DEC     R0              ;BUMP POINTERS TO SIGN
1C71 19             7221            DEC     R1
1C72 E2             7222            MOVX    A,@R0           ;GET THE SIGN
1C73 FC             7223            MOV     R4,A            ;SIGN OF ARG1
1C74 E3             7224            MOVX    A,@R1           ;GET SIGN OF NEXT ARG
1C75 FB             7225            MOV     R3,A            ;SIGN OF ARG2
1C76 6C             7226            XRL     A,R4            ;ACC GETS THE NEW SIGN
1C77 FD             7227            MOV     R5,A            ;R5 GETS THE NEW SIGN
                    7228            ;
                    7229            ; Bump the pointers to point at the LS digit
                    7230            ;
1C78 18             7231            DEC     R0
1C79 19             7232            DEC     R1
                    7233            ;
1C7A 22             7234            RET
                    7235            ;
                    7236            ;***************************************************************
                    7237            ;
1C7B                7238    LOADR1_MANTISSA:
                    7239            ;
                    7240            ; Load the mantissa of R0 into FP_Digits
                    7241            ;
                    7242            ;***************************************************************
                    7243            ;
1C7B C000           7244            PUSH    R0B0            ;SAVE REGISTER 1
1C7D 782E           7245            MOV     R0,#FP_DIG78    ;SET UP THE POINTER
                    7246            ;
1C7F E3             7247    LOADR1: MOVX    A,@R1
1C80 F6             7248            MOV     @R0,A
1C81 19             7249            DEC     R1
1C82 18             7250            DEC     R0
1C83 B82AF9         7251            CJNE    R0,#FP_CARRY,LOADR1
                    7252            ;
1C86 D000           7253            POP     R0B0
BASIC52Q                                                                                                      PAGE 127

1C88 22             7254            RET
                    7255            ;
                    7256            ;***************************************************************
                    7257            ;
1C89                7258    HEXSCAN:        ; Scan a string to determine if it is a hex number
                    7259                    ; set carry if hex, else carry = 0
                    7260            ;
                    7261            ;***************************************************************
                    7262            ;
1C89 B15F           7263            ACALL   GET_DPTR_CHARACTER
1C8B C083           7264            PUSH    DPH
1C8D C082           7265            PUSH    DPL             ;SAVE THE POINTER
                    7266            ;
1C8F E0             7267    HEXSC1: MOVX    A,@DPTR         ;GET THE CHARACTER
1C90 F1ED           7268            ACALL   DIGIT_CHECK     ;SEE IF A DIGIT
1C92 4012           7269            JC      HS1             ;CONTINUE IF A DIGIT
1C94 91A9           7270            ACALL   HEX_CHECK       ;SEE IF HEX
1C96 400E           7271            JC      HS1
                    7272            ;
1C98 C2E5           7273            CLR     ACC.5           ;NO LOWER CASE
1C9A B44803         7274            CJNE    A,#'H',HEXDON
1C9D D3             7275            SETB    C
1C9E 8001           7276            SJMP    HEXDO1          ;NUMBER IS VALID HEX, MAYBE
                    7277            ;
1CA0 C3             7278    HEXDON: CLR     C
                    7279            ;
1CA1 D082           7280    HEXDO1: POP     DPL             ;RESTORE POINTER
1CA3 D083           7281            POP     DPH
1CA5 22             7282            RET
                    7283            ;
1CA6 A3             7284    HS1:    INC     DPTR            ;BUMP TO NEXT CHARACTER
1CA7 80E6           7285            SJMP    HEXSC1          ;LOOP
                    7286            ;
1CA9                7287    HEX_CHECK:      ;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
                    7288            ;
1CA9 C2E5           7289            CLR     ACC.5           ;WASTE LOWER CASE
1CAB B44700         7290            CJNE    A,#'F'+1,HEX_CHECK1     ;SEE IF F OR LESS
1CAE                7291    HEX_CHECK1:
1CAE 4001           7292            JC      HC1
1CB0 22             7293            RET
                    7294            ;
1CB1 B44100         7295    HC1:    CJNE    A,#'A',HC11     ;SEE IF A OR GREATER
1CB4 B3             7296    HC11:   CPL     C
1CB5 22             7297            RET
                    7298            ;
1CB6                7299    PUSHR2R0:
                    7300            ;
1CB6 7B00           7301            MOV     R3,#HIGH CONVERT;CONVERSION LOCATION
1CB8 7958           7302            MOV     R1,#LOW CONVERT
1CBA D1F7           7303            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1CBC 740D           7304            MOV     A,#0DH          ;A CR TO TERMINATE
1CBE F3             7305            MOVX    @R1,A           ;SAVE THE CR
1CBF 900058         7306            MOV     DPTR,#CONVERT
                    7307            ;
                    7308            ; Falls thru to FLOATING INPUT
                    7309            ;
                    7310            ;***************************************************************
                    7311            ;
BASIC52Q                                                                                                      PAGE 128

1CC2                7312    FLOATING_POINT_INPUT:   ; Input a floating point number pointed to by
                    7313                            ; the DPTR
                    7314            ;
                    7315            ;***************************************************************
                    7316            ;
1CC2 71B2           7317            ACALL   FP_CLEAR        ;CLEAR EVERYTHING
1CC4 B15F           7318            ACALL   GET_DPTR_CHARACTER
1CC6 B165           7319            ACALL   PLUS_MINUS_TEST
1CC8 9278           7320            MOV     MSIGN,C         ;SAVE THE MANTISSA SIGN
                    7321            ;
                    7322            ; Now, set up for input loop
                    7323            ;
1CCA 7834           7324            MOV     R0,#FP_ACCC
1CCC 7E7F           7325            MOV     R6,#7FH         ;BASE EXPONENT
1CCE D2D5           7326            SETB    F0              ;SET INITIAL FLAG
                    7327            ;
1CD0 F1EB           7328    INLOOP: ACALL   GET_DIGIT_CHECK
1CD2 5007           7329            JNC     GTEST           ;IF NOT A CHARACTER, WHAT IS IT?
1CD4 540F           7330            ANL     A,#0FH          ;STRIP ASCII
1CD6 B138           7331            ACALL   STDIG           ;STORE THE DIGITS
                    7332            ;
1CD8 A3             7333    INLPIK: INC     DPTR            ;BUMP POINTER FOR LOOP
1CD9 80F5           7334            SJMP    INLOOP          ;LOOP FOR INPUT
                    7335            ;
1CDB B42E0C         7336    GTEST:  CJNE    A,#'.',GT1      ;SEE IF A RADIX
1CDE 205163         7337            JB      FOUND_RADIX,INERR
1CE1 D251           7338            SETB    FOUND_RADIX
1CE3 B834F2         7339            CJNE    R0,#FP_ACCC,INLPIK
1CE6 D252           7340            SETB    FIRST_RADIX     ;SET IF FIRST RADIX
1CE8 80EE           7341            SJMP    INLPIK          ;GET ADDITIONAL DIGITS
                    7342            ;
1CEA 20D557         7343    GT1:    JB      F0,INERR        ;ERROR IF NOT CLEARED
1CED B46502         7344            CJNE    A,#'e',GT11     ;CHECK FOR LOWER CASE
1CF0 8003           7345            SJMP    GT12
1CF2 B44533         7346    GT11:   CJNE    A,#'E',FINISH_UP
1CF5 B15E           7347    GT12:   ACALL   INC_AND_GET_DPTR_CHARACTER
1CF7 B165           7348            ACALL   PLUS_MINUS_TEST
1CF9 9250           7349            MOV     XSIGN,C         ;SAVE SIGN STATUS
1CFB F1EB           7350            ACALL   GET_DIGIT_CHECK
1CFD 5045           7351            JNC     INERR
                    7352            ;
1CFF 540F           7353            ANL     A,#0FH          ;STRIP ASCII BIAS OFF THE CHARACTER
1D01 FD             7354            MOV     R5,A            ;SAVE THE CHARACTER IN R5
                    7355            ;
1D02 A3             7356    GT2:    INC     DPTR
1D03 F1EB           7357            ACALL   GET_DIGIT_CHECK
1D05 500D           7358            JNC     FINISH1
1D07 540F           7359            ANL     A,#0FH          ;STRIP OFF BIAS
1D09 CD             7360            XCH     A,R5            ;GET THE LAST DIGIT
1D0A 75F00A         7361            MOV     B,#10           ;MULTIPLY BY TEN
1D0D A4             7362            MUL     AB
1D0E 2D             7363            ADD     A,R5            ;ADD TO ORIGINAL VALUE
1D0F FD             7364            MOV     R5,A            ;SAVE IN R5
1D10 50F0           7365            JNC     GT2             ;LOOP IF NO CARRY
1D12 7DFF           7366            MOV     R5,#0FFH        ;FORCE AN ERROR
                    7367            ;
1D14 ED             7368    FINISH1:MOV     A,R5            ;GET THE SIGN
1D15 305009         7369            JNB     XSIGN,POSNUM    ;SEE IF EXPONENT IS POS OR NEG
BASIC52Q                                                                                                      PAGE 129

1D18 C3             7370            CLR     C
1D19 9E             7371            SUBB    A,R6
1D1A F4             7372            CPL     A
1D1B 04             7373            INC     A
1D1C 4009           7374            JC      FINISH2
1D1E 7401           7375            MOV     A,#01H
1D20 22             7376            RET
                    7377            ;
1D21 2E             7378    POSNUM: ADD     A,R6            ;ADD TO EXPONENT
1D22 5003           7379            JNC     FINISH2
                    7380            ;
1D24 7402           7381    POSNM1: MOV     A,#02H
1D26 22             7382            RET
                    7383            ;
1D27 CE             7384    FINISH2:XCH     A,R6            ;SAVE THE EXPONENT
                    7385            ;
1D28                7386    FINISH_UP:
                    7387            ;
1D28 8E30           7388            MOV     FP_EXP,R6       ;SAVE EXPONENT
1D2A B83402         7389            CJNE    R0,#FP_ACCC,FINISH_UP1
1D2D 71B2           7390            ACALL   FP_CLEAR        ;CLEAR THE MEMORY IF 0
1D2F                7391    FINISH_UP1:
1D2F E509           7392            MOV     A,ARG_STACK     ;GET THE ARG STACK
1D31 C3             7393            CLR     C
1D32 940C           7394            SUBB    A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1D34 F509           7395            MOV     ARG_STACK,A     ;ADJUST FOR STORE
1D36 6111           7396            AJMP    PACK
                    7397            ;
1D38 C2D5           7398    STDIG:  CLR     F0              ;CLEAR INITIAL DESIGNATOR
1D3A 700B           7399            JNZ     STDIG1          ;CONTINUE IF NOT ZERO
1D3C B83408         7400            CJNE    R0,#FP_ACCC,STDIG1
1D3F 305204         7401            JNB     FIRST_RADIX,RET_X
                    7402            ;
1D42 DE02           7403    DECX:   DJNZ    R6,RET_X
                    7404            ;
1D44 74FF           7405    INERR:  MOV     A,#0FFH
                    7406            ;
1D46 22             7407    RET_X:  RET
                    7408            ;
1D47 205302         7409    STDIG1: JB      DONE_LOAD,FRTEST
1D4A C252           7410            CLR     FIRST_RADIX
                    7411            ;
1D4C 2052F3         7412    FRTEST: JB      FIRST_RADIX,DECX
                    7413            ;
1D4F 205101         7414    FDTEST: JB      FOUND_RADIX,FDT1
1D52 0E             7415            INC     R6
                    7416            ;
1D53 2053F0         7417    FDT1:   JB      DONE_LOAD,RET_X
1D56 B83D02         7418            CJNE    R0,#FP_ACC8+1,FDT2
1D59 D253           7419            SETB    DONE_LOAD
                    7420            ;
1D5B F6             7421    FDT2:   MOV     @R0,A           ;SAVE THE STRIPPED ACCUMULATOR
1D5C 08             7422            INC     R0              ;BUMP THE POINTER
1D5D 22             7423            RET                     ;EXIT
                    7424            ;
                    7425            ;***************************************************************
                    7426            ;
                    7427            ; I/O utilities
BASIC52Q                                                                                                      PAGE 130

                    7428            ;
                    7429            ;***************************************************************
                    7430            ;
1D5E                7431    INC_AND_GET_DPTR_CHARACTER:
                    7432            ;
1D5E A3             7433            INC     DPTR
                    7434            ;
1D5F                7435    GET_DPTR_CHARACTER:
                    7436            ;
1D5F E0             7437            MOVX    A,@DPTR         ;GET THE CHARACTER
1D60 B42016         7438            CJNE    A,#' ',PMT1     ;SEE IF A SPACE
                    7439            ;
                    7440            ; Kill spaces
                    7441            ;
1D63 80F9           7442            SJMP    INC_AND_GET_DPTR_CHARACTER
                    7443            ;
1D65                7444    PLUS_MINUS_TEST:
                    7445            ;
1D65 B4E302         7446            CJNE    A,#0E3H,PMT11   ;SEE IF A PLUS, PLUS TOKEN FROM BASIC
1D68 800E           7447            SJMP    PMT3
1D6A B42B02         7448    PMT11:  CJNE    A,#'+',PMT12
1D6D 8009           7449            SJMP    PMT3
1D6F B4E502         7450    PMT12:  CJNE    A,#0E5H,PMT13   ;SEE IF MINUS, MINUS TOKEN FROM BASIC
1D72 8003           7451            SJMP    PMT2
1D74 B42D02         7452    PMT13:  CJNE    A,#'-',PMT1
                    7453            ;
1D77 D3             7454    PMT2:   SETB    C
                    7455            ;
1D78 A3             7456    PMT3:   INC     DPTR
                    7457            ;
1D79 22             7458    PMT1:   RET
                    7459            ;
                    7460            ;***************************************************************
                    7461            ;
1D7A                7462    FLOATING_POINT_OUTPUT:  ; Output the number, format is in location 23
                    7463            ;
                    7464            ; IF FORMAT = 00 - FREE FLOATING
                    7465            ;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
                    7466            ;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
                    7467            ;                  N + X = 8 MAX
                    7468            ;
                    7469            ;***************************************************************
                    7470            ;
1D7A 916A           7471            ACALL   MDES1           ;GET THE NUMBER TO OUTPUT, R0 IS POINTER
1D7C 31A5           7472            ACALL   POP_AND_EXIT    ;OUTPUT POPS THE STACK
1D7E EF             7473            MOV     A,R7
1D7F FE             7474            MOV     R6,A            ;PUT THE EXPONENT IN R6
1D80 717E           7475            ACALL   UNPACK_R0       ;UNPACK THE NUMBER
1D82 782B           7476            MOV     R0,#FP_NIB1     ;POINT AT THE NUMBER
1D84 E517           7477            MOV     A,FORMAT        ;GET THE FORMAT
1D86 FB             7478            MOV     R3,A            ;SAVE IN CASE OF EXP FORMAT
1D87 6049           7479            JZ      FREE            ;FREE FLOATING?
1D89 B4F000         7480            CJNE    A,#0F0H,FPO1    ;SEE IF EXPONENTIAL
1D8C 5073           7481    FPO1:   JNC     EXPOUT
                    7482            ;
                    7483            ; If here, must be integer USING format
                    7484            ;
1D8E EE             7485            MOV     A,R6            ;GET THE EXPONENT
BASIC52Q                                                                                                      PAGE 131

1D8F 7002           7486            JNZ     FPO2
1D91 7E80           7487            MOV     R6,#80H
1D93 EB             7488    FPO2:   MOV     A,R3            ;GET THE FORMAT
1D94 C4             7489            SWAP    A               ;SPLIT INTEGER AND FRACTION
1D95 540F           7490            ANL     A,#0FH
1D97 FA             7491            MOV     R2,A            ;SAVE INTEGER
1D98 D167           7492            ACALL   NUM_LT          ;GET THE NUMBER OF INTEGERS
1D9A CA             7493            XCH     A,R2            ;FLIP FOR SUBB
1D9B C3             7494            CLR     C
1D9C 9A             7495            SUBB    A,R2
1D9D FF             7496            MOV     R7,A
1D9E 5006           7497            JNC     FPO3
1DA0 7D3F           7498            MOV     R5,#'?'         ;OUTPUT A QUESTION MARK
1DA2 D19C           7499            ACALL   SOUT1           ;NUMBER IS TOO LARGE FOR FORMAT
1DA4 A1D2           7500            AJMP    FREE
1DA6 BA0007         7501    FPO3:   CJNE    R2,#00,USING0   ;SEE IF ZERO
1DA9 1F             7502            DEC     R7
1DAA D189           7503            ACALL   SS7
1DAC D196           7504            ACALL   ZOUT            ;OUTPUT A ZERO
1DAE 8006           7505            SJMP    USING1
                    7506            ;
1DB0 D189           7507    USING0: ACALL   SS7             ;OUTPUT SPACES, IF NEED TO
1DB2 EA             7508            MOV     A,R2            ;OUTPUT DIGITS
1DB3 FF             7509            MOV     R7,A
1DB4 D14B           7510            ACALL   OUTR0
                    7511            ;
1DB6 EB             7512    USING1: MOV     A,R3
1DB7 540F           7513            ANL     A,#0FH          ;GET THE NUMBER RIGHT OF DP
1DB9 FA             7514            MOV     R2,A            ;SAVE IT
1DBA 60BD           7515            JZ      PMT1            ;EXIT IF ZERO
1DBC D192           7516            ACALL   ROUT            ;OUTPUT DP
1DBE D170           7517            ACALL   NUM_RT
1DC0 B50203         7518            CJNE    A,2,USINGX      ;COMPARE A TO R2
                    7519            ;
1DC3 EA             7520    USINGY: MOV     A,R2
1DC4 C180           7521            AJMP    Z7R7
                    7522            ;
1DC6 50FB           7523    USINGX: JNC     USINGY
                    7524            ;
1DC8 CA             7525    USING2: XCH     A,R2
1DC9 C3             7526            CLR     C
1DCA 9A             7527            SUBB    A,R2
1DCB CA             7528            XCH     A,R2
1DCC D180           7529            ACALL   Z7R7            ;OUTPUT ZEROS IF NEED TO
1DCE EA             7530            MOV     A,R2
1DCF FF             7531            MOV     R7,A
1DD0 C14B           7532            AJMP    OUTR0
                    7533            ;
                    7534            ; First, force exponential output, if need to
                    7535            ;
1DD2 EE             7536    FREE:   MOV     A,R6            ;GET THE EXPONENT
1DD3 7004           7537            JNZ     FREE1           ;IF ZERO, PRINT IT
1DD5 D19A           7538            ACALL   SOUT
1DD7 C196           7539            AJMP    ZOUT
                    7540            ;
1DD9 7BF0           7541    FREE1:  MOV     R3,#0F0H        ;IN CASE EXP NEEDED
1DDB 7477           7542            MOV     A,#80H-DIGIT-DIGIT-1
1DDD 2E             7543            ADD     A,R6
BASIC52Q                                                                                                      PAGE 132

1DDE 4021           7544            JC      EXPOUT
1DE0 94F7           7545            SUBB    A,#0F7H
1DE2 401D           7546            JC      EXPOUT
                    7547            ;
                    7548            ; Now, just print the number
                    7549            ;
1DE4 D18B           7550            ACALL   SINOUT          ;PRINT THE SIGN OF THE NUMBER
1DE6 D167           7551            ACALL   NUM_LT          ;GET THE NUMBER LEFT OF DP
1DE8 B40802         7552            CJNE    A,#8,FREE4
1DEB C14B           7553            AJMP    OUTR0
                    7554            ;
1DED D14B           7555    FREE4:  ACALL   OUTR0
1DEF D15D           7556            ACALL   ZTEST           ;TEST FOR TRAILING ZEROS
1DF1 6057           7557            JZ      U_RET           ;DONE IF ALL TRAILING ZEROS
1DF3 D192           7558            ACALL   ROUT            ;OUTPUT RADIX
                    7559            ;
1DF5 7F01           7560    FREE2:  MOV     R7,#1           ;OUTPUT ONE DIGIT
1DF7 D14B           7561            ACALL   OUTR0
1DF9 704F           7562            JNZ     U_RET
1DFB D15D           7563            ACALL   ZTEST
1DFD 604B           7564            JZ      U_RET
1DFF 80F4           7565            SJMP    FREE2           ;LOOP
                    7566            ;
1E01 D18B           7567    EXPOUT: ACALL   SINOUT          ;PRINT THE SIGN
1E03 7F01           7568            MOV     R7,#1           ;OUTPUT ONE CHARACTER
1E05 D14B           7569            ACALL   OUTR0
1E07 D192           7570            ACALL   ROUT            ;OUTPUT RADIX
1E09 EB             7571            MOV     A,R3            ;GET FORMAT
1E0A 540F           7572            ANL     A,#0FH          ;STRIP INDICATOR
1E0C 6006           7573            JZ      EXPOTX
                    7574            ;
1E0E FF             7575            MOV     R7,A            ;OUTPUT THE NUMBER OF DIGITS
1E0F 1F             7576            DEC     R7              ;ADJUST BECAUSE ONE CHAR ALREADY OUT
1E10 D14B           7577            ACALL   OUTR0
1E12 8002           7578            SJMP    EXPOT4
                    7579            ;
1E14 B1F5           7580    EXPOTX: ACALL   FREE2           ;OUTPUT UNTIL TRAILING ZEROS
                    7581            ;
1E16 D19A           7582    EXPOT4: ACALL   SOUT            ;OUTPUT A SPACE
1E18 7D45           7583            MOV     R5,#'E'
1E1A D19C           7584            ACALL   SOUT1           ;OUTPUT AN E
1E1C EE             7585            MOV     A,R6            ;GET THE EXPONENT
1E1D 6004           7586            JZ      XOUT0           ;EXIT IF ZERO
1E1F 14             7587            DEC     A               ;ADJUST FOR THE DIGIT ALREADY OUTPUT
1E20 B48005         7588            CJNE    A,#80H,XOUT2    ;SEE WHAT IT IS
                    7589            ;
1E23 D19A           7590    XOUT0:  ACALL   SOUT
1E25 E4             7591            CLR     A
1E26 800C           7592            SJMP    XOUT4
                    7593            ;
1E28 4006           7594    XOUT2:  JC      XOUT3           ;NEGATIVE EXPONENT
1E2A 7D2B           7595            MOV     R5,#'+'         ;OUTPUT A PLUS SIGN
1E2C D19C           7596            ACALL   SOUT1
1E2E 8004           7597            SJMP    XOUT4
                    7598            ;
1E30 D18E           7599    XOUT3:  ACALL   MOUT
1E32 F4             7600            CPL     A               ;FLIP BITS
1E33 04             7601            INC     A               ;BUMP
BASIC52Q                                                                                                      PAGE 133

                    7602            ;
1E34 C2E7           7603    XOUT4:  CLR     ACC.7
1E36 F8             7604            MOV     R0,A
1E37 7A00           7605            MOV     R2,#0
1E39 7958           7606            MOV     R1,#LOW CONVERT ;CONVERSION LOCATION
1E3B 7B00           7607            MOV     R3,#HIGH CONVERT
1E3D D1F7           7608            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1E3F 7858           7609            MOV     R0,#LOW CONVERT ;NOW, OUTPUT EXPONENT
                    7610            ;
1E41 E2             7611    EXPOT5: MOVX    A,@R0           ;GET THE CHARACTER
1E42 FD             7612            MOV     R5,A            ;OUTPUT IT
1E43 D19C           7613            ACALL   SOUT1
1E45 08             7614            INC     R0              ;BUMP THE POINTER
1E46 E8             7615            MOV     A,R0            ;GET THE POINTER
1E47 B501F7         7616            CJNE    A,R1B0,EXPOT5   ;LOOP
                    7617            ;
1E4A 22             7618    U_RET:  RET                     ;EXIT
                    7619            ;
1E4B                7620    OUTR0:  ; Output the characters pointed to by R0, also bias ascii
                    7621            ;
1E4B EF             7622            MOV     A,R7            ;GET THE COUNTER
1E4C 600E           7623            JZ      OUTR            ;EXIT IF DONE
1E4E E6             7624            MOV     A,@R0           ;GET THE NUMBER
1E4F 4430           7625            ORL     A,#30H          ;ASCII BIAS
1E51 08             7626            INC     R0              ;BUMP POINTER AND COUNTER
1E52 1F             7627            DEC     R7
1E53 FD             7628            MOV     R5,A            ;PUT CHARACTER IN OUTPUT REGISTER
1E54 D19C           7629            ACALL   SOUT1           ;OUTPUT THE CHARACTER
1E56 E4             7630            CLR     A               ;JUST FOR TEST
1E57 B833F1         7631            CJNE    R0,#FP_NIB8+1,OUTR0
1E5A 7455           7632            MOV     A,#55H          ;KNOW WHERE EXIT OCCURED
                    7633            ;
1E5C 22             7634    OUTR:   RET
                    7635            ;
1E5D A900           7636    ZTEST:  MOV     R1,R0B0         ;GET POINTER REGISTER
                    7637            ;
1E5F E7             7638    ZT0:    MOV     A,@R1           ;GET THE VALUE
1E60 7004           7639            JNZ     ZT1
1E62 09             7640            INC     R1              ;BUMP POINTER
1E63 B933F9         7641            CJNE    R1,#FP_NIB8+1,ZT0
                    7642            ;
1E66 22             7643    ZT1:    RET
                    7644            ;
1E67 EE             7645    NUM_LT: MOV     A,R6            ;GET EXPONENT
1E68 C3             7646            CLR     C               ;GET READY FOR SUBB
1E69 9480           7647            SUBB    A,#80H          ;SUB EXPONENT BIAS
1E6B 5001           7648            JNC     NL1             ;OK IF NO CARRY
1E6D E4             7649            CLR     A               ;NO DIGITS LEFT
                    7650            ;
1E6E FF             7651    NL1:    MOV     R7,A            ;SAVE THE COUNT
1E6F 22             7652            RET
                    7653            ;
1E70 C3             7654    NUM_RT: CLR     C               ;SUBB AGAIN
1E71 7480           7655            MOV     A,#80H          ;EXPONENT BIAS
1E73 9E             7656            SUBB    A,R6            ;GET THE BIASED EXPONENT
1E74 5001           7657            JNC     NR1
1E76 E4             7658            CLR     A
                    7659            ;
BASIC52Q                                                                                                      PAGE 134

1E77 22             7660    NR1:    RET                     ;EXIT
                    7661            ;
1E78 EF             7662    SPACE7: MOV     A,R7            ;GET THE NUMBER OF SPACES
1E79 60FC           7663            JZ      NR1             ;EXIT IF ZERO
1E7B D19A           7664            ACALL   SOUT            ;OUTPUT A SPACE
1E7D 1F             7665            DEC     R7              ;BUMP COUNTER
1E7E 80F8           7666            SJMP    SPACE7          ;LOOP
                    7667            ;
1E80 FF             7668    Z7R7:   MOV     R7,A
                    7669            ;
1E81 EF             7670    ZERO7:  MOV     A,R7            ;GET COUNTER
1E82 60F3           7671            JZ      NR1             ;EXIT IF ZERO
1E84 D196           7672            ACALL   ZOUT            ;OUTPUT A ZERO
1E86 1F             7673            DEC     R7              ;BUMP COUNTER
1E87 80F8           7674            SJMP    ZERO7           ;LOOP
                    7675            ;
1E89 D178           7676    SS7:    ACALL   SPACE7
                    7677            ;
1E8B EC             7678    SINOUT: MOV     A,R4            ;GET THE SIGN
1E8C 600C           7679            JZ      SOUT            ;OUTPUT A SPACE IF ZERO
                    7680            ;
1E8E 7D2D           7681    MOUT:   MOV     R5,#'-'
1E90 800A           7682            SJMP    SOUT1           ;OUTPUT A MINUS IF NOT
                    7683            ;
1E92 7D2E           7684    ROUT:   MOV     R5,#'.'         ;OUTPUT A RADIX
1E94 8006           7685            SJMP    SOUT1
                    7686            ;
1E96 7D30           7687    ZOUT:   MOV     R5,#'0'         ;OUTPUT A ZERO
1E98 8002           7688            SJMP    SOUT1
                    7689            ;
1E9A 7D20           7690    SOUT:   MOV     R5,#' '         ;OUTPUT A SPACE
                    7691            ;
1E9C 216C           7692    SOUT1:  AJMP    OUTPUT
                    7693            ;
                    7694            ;***************************************************************
                    7695            ;
1E9E                7696    CONVERT_ASCII_STRING_TO_BINARY:
                    7697            ;
                    7698            ;DPTR POINTS TO ASCII STRING
                    7699            ;PUT THE BINARY NUMBER IN R2:R0, ERROR IF >64K
                    7700            ;
                    7701            ;***************************************************************
                    7702            ;
1E9E 9189           7703    CASB:   ACALL   HEXSCAN         ;SEE IF HEX NUMBER
1EA0 9223           7704            MOV     ADD_IN,C        ;IF ADD_IN IS SET, THE NUMBER IS HEX
1EA2 F1EB           7705            ACALL   GET_DIGIT_CHECK
1EA4 B3             7706            CPL     C               ;FLIP FOR EXIT
1EA5 4028           7707            JC      RCASB
1EA7 7B00           7708            MOV     R3,#00H         ;ZERO R3:R1 FOR LOOP
1EA9 7900           7709            MOV     R1,#00H
1EAB 8015           7710            SJMP    CASB5
                    7711            ;
1EAD A3             7712    CASB2:  INC     DPTR
1EAE 8900           7713            MOV     R0B0,R1         ;SAVE THE PRESENT CONVERTED VALUE
1EB0 8B02           7714            MOV     R2B0,R3         ;IN R2:R0
1EB2 F1EB           7715            ACALL   GET_DIGIT_CHECK
1EB4 400C           7716            JC      CASB5
1EB6 302316         7717            JNB     ADD_IN,RCASB    ;CONVERSION COMPLETE
BASIC52Q                                                                                                      PAGE 135

1EB9 91A9           7718            ACALL   HEX_CHECK       ;SEE IF HEX NUMBER
1EBB 4003           7719            JC      CASB4           ;PROCEED IF GOOD
1EBD A3             7720            INC     DPTR            ;BUMP PAST H
1EBE 800F           7721            SJMP    RCASB
                    7722            ;
1EC0 2409           7723    CASB4:  ADD     A,#9            ;ADJUST HEX ASCII BIAS
                    7724            ;
1EC2 75F00A         7725    CASB5:  MOV     B,#10
1EC5 302303         7726            JNB     ADD_IN,CASB6
1EC8 75F010         7727            MOV     B,#16           ;HEX MODE
                    7728            ;
1ECB D1D6           7729    CASB6:  ACALL   MULNUM          ;ACCUMULATE THE DIGITS
1ECD 50DE           7730            JNC     CASB2           ;LOOP IF NO CARRY
                    7731            ;
1ECF E4             7732    RCASB:  CLR     A               ;RESET ACC
1ED0 92E1           7733            MOV     ACC.OVERFLOW,C  ;IF OVERFLOW, SAY SO
1ED2 22             7734            RET                     ;EXIT
                    7735            ;
1ED3 75F00A         7736    MULNUM10:MOV    B,#10
                    7737            ;
                    7738            ;***************************************************************
                    7739            ;
1ED6                7740    MULNUM: ; Take the next digit in the acc (masked to 0FH)
                    7741            ; accumulate in R3:R1
                    7742            ;
                    7743            ;***************************************************************
                    7744            ;
1ED6 C0E0           7745            PUSH    ACC             ;SAVE ACC
1ED8 C0F0           7746            PUSH    B               ;SAVE MULTIPLIER
1EDA E9             7747            MOV     A,R1            ;PUT LOW ORDER BITS IN ACC
1EDB A4             7748            MUL     AB              ;DO THE MULTIPLY
1EDC F9             7749            MOV     R1,A            ;PUT THE RESULT BACK
1EDD EB             7750            MOV     A,R3            ;GET THE HIGH ORDER BYTE
1EDE ABF0           7751            MOV     R3,B            ;SAVE THE OVERFLOW
1EE0 D0F0           7752            POP     B               ;GET THE MULTIPLIER
1EE2 A4             7753            MUL     AB              ;DO IT
1EE3 A2D2           7754            MOV     C,OV            ;SAVE OVERFLOW IN F0
1EE5 92D5           7755            MOV     F0,C
1EE7 2B             7756            ADD     A,R3            ;ADD OVERFLOW TO HIGH RESULT
1EE8 FB             7757            MOV     R3,A            ;PUT IT BACK
1EE9 D0E0           7758            POP     ACC             ;GET THE ORIGINAL ACC BACK
1EEB 72D5           7759            ORL     C,F0            ;OR CARRY AND OVERFLOW
1EED 4007           7760            JC      MULX            ;NO GOOD IF THE CARRY IS SET
                    7761            ;
1EEF 540F           7762    MUL11:  ANL     A,#0FH          ;MASK OFF HIGH ORDER BITS
1EF1 29             7763            ADD     A,R1            ;NOW ADD THE ACC
1EF2 F9             7764            MOV     R1,A            ;PUT IT BACK
1EF3 E4             7765            CLR     A               ;PROPAGATE THE CARRY
1EF4 3B             7766            ADDC    A,R3
1EF5 FB             7767            MOV     R3,A            ;PUT IT BACK
                    7768            ;
1EF6 22             7769    MULX:   RET                     ;EXIT WITH OR WITHOUT CARRY
                    7770            ;
1EF7                7771    CONVERT_BINARY_TO_ASCII_STRING:
                    7772    ;
                    7773    ;*****************************************************************************
                    7774    ;****** Elektor 3 Patch ******************************************************
                    7775    ;****** Performance improvements *********************************************
BASIC52Q                                                                                                      PAGE 136

                    7776    ;
                    7777    ;
                    7778    ;R3:R1 contains the address of the string
                    7779    ;R2:R0 contains the value to convert
                    7780    ;DPTR, R7, R6, and ACC gets clobbered
                    7781    ;
                    7782    ;***************************************************************
                    7783    ;
                    7784    ;       CLR     A               ;NO LEADING ZEROS
                    7785    ;       MOV     DPTR,#10000     ;SUBTRACT 10000
                    7786    ;       ACALL   RSUB            ;DO THE SUBTRACTION
                    7787    ;       MOV     DPTR,#1000      ;NOW 1000
                    7788    ;       ACALL   RSUB
                    7789    ;       MOV     DPTR,#100       ;NOW 100
                    7790    ;       ACALL   RSUB
                    7791    ;       MOV     DPTR,#10        ;NOW 10
                    7792    ;       ACALL   RSUB
                    7793    ;       MOV     DPTR,#1         ;NOW 1
                    7794    ;       ACALL   RSUB
                    7795    ;       JZ      RSUB2           ;JUMP OVER RET
                    7796    ;
                    7797    ;RSUB_R:        RET
                    7798    ;
                    7799    ;RSUB:  MOV     R6,#-1          ;SET UP THE COUNTER
                    7800    ;
                    7801    ;RSUB1: INC     R6              ;BUMP THE COUNTER
                    7802    ;       XCH     A,R2            ;DO A FAST COMPARE
                    7803    ;       CJNE    A,DPH,RSUB11
                    7804    ;RSUB11: XCH     A,R2
                    7805    ;       JC      FAST_DONE
                    7806    ;       XCH     A,R0            ;GET LOW BYTE
                    7807    ;       SUBB    A,DPL           ;SUBTRACT, CARRY IS CLEARED
                    7808    ;       XCH     A,R0            ;PUT IT BACK
                    7809    ;       XCH     A,R2            ;GET THE HIGH BYTE
                    7810    ;       SUBB    A,DPH           ;ADD THE HIGH BYTE
                    7811    ;       XCH     A,R2            ;PUT IT BACK
                    7812    ;       JNC     RSUB1           ;LOOP UNTIL CARRY
                    7813    ;
                    7814    ;       XCH     A,R0
                    7815    ;       ADD     A,DPL           ;RESTORE R2:R0
                    7816    ;       XCH     A,R0
                    7817    ;       XCH     A,R2
                    7818    ;       ADDC    A,DPH
                    7819    ;       XCH     A,R2
                    7820    ;
                    7821    ;FAST_DONE:
                    7822    ;
                    7823    ;       ORL     A,R6            ;OR THE COUNT VALUE
                    7824    ;       JZ      RSUB_R          ;RETURN IF ZERO
                    7825    ;
                    7826    ;RSUB2: MOV     A,#'0'          ;GET THE ASCII BIAS
                    7827    ;       ADD     A,R6            ;ADD THE COUNT
                    7828    ;
                    7829    ;RSUB4: MOV     P2,R3           ;SET UP P2
                    7830    ;       MOVX    @R1,A           ;PLACE THE VALUE IN MEMORY
                    7831    ;       INC     R1
                    7832    ;       CJNE    R1,#00H,RSUB3   ;SEE IF RAPPED AROUND
                    7833    ;       INC     R3              ;BUMP HIGH BYTE
BASIC52Q                                                                                                      PAGE 137

                    7834    ;
                    7835    ;RSUB3: RET                     ;EXIT
                    7836    ;
                    7837    ;****** Faster code starts here: *********************************************
                    7838    ;
1EF7 7D00           7839            mov     R5,#0
                    7840    ;
1EF9 EA             7841    RSUB1:  mov     A, R2
1EFA 75F00A         7842            mov     B,#0AH
1EFD 84             7843            div     AB
1EFE FA             7844            mov     R2,A
1EFF E8             7845            mov     A,R0
1F00 54F0           7846            anl     A,#0F0H
1F02 45F0           7847            orl     A,B
1F04 C4             7848            swap    A
1F05 75F00A         7849            mov     B,#0AH
1F08 84             7850            div     AB
1F09 C4             7851            swap    A
1F0A FE             7852            mov     R6,A
1F0B E8             7853            mov     A,R0
1F0C 540F           7854            anl     A,#0FH
1F0E C4             7855            swap    A
1F0F 45F0           7856            orl     A,B
1F11 C4             7857            swap    A
1F12 75F00A         7858            mov     B,#0AH
1F15 84             7859            div     AB
1F16 4E             7860            orl     A,R6
1F17 F8             7861            mov     R0,A
1F18 E5F0           7862            mov     A,B
1F1A 2430           7863            add     A,#30H
1F1C 0D             7864            inc     R5
1F1D C0E0           7865            push    ACC
1F1F EA             7866            mov     A,R2
1F20 48             7867            orl     A,R0
1F21 70D6           7868            jnz     RSUB1
                    7869    ;
1F23 D0E0           7870    RSUB2:  pop     ACC
1F25 8BA0           7871            mov     P2,R3
1F27 F3             7872            movx    @R1,A
1F28 09             7873            inc     R1
1F29 B90001         7874            cjne    R1,#0,RSUB3
1F2C 0B             7875            inc     R3
                    7876    ;
1F2D DDF4           7877    RSUB3:  djnz    R5,RSUB2
1F2F 22             7878            ret
                    7879    ;
                    7880    ;****** continue with original code: *****************************************
                    7881    ;
                    7882            ;***************************************************************
                    7883            ;
1F30                7884    HEXOUT: ; Output the hex number in R3:R1, supress leading zeros, if set
                    7885            ;
                    7886            ;***************************************************************
                    7887            ;
1F30 D19A           7888            ACALL   SOUT            ;OUTPUT A SPACE
1F32 A236           7889            MOV     C,ZSURP         ;GET ZERO SUPPRESSION BIT
1F34 9223           7890            MOV     ADD_IN,C
1F36 EB             7891            MOV     A,R3            ;GET HIGH NIBBLE AND PRINT IT
BASIC52Q                                                                                                      PAGE 138

1F37 F153           7892            ACALL   HOUTHI
1F39 EB             7893            MOV     A,R3
1F3A F154           7894            ACALL   HOUTLO
                    7895            ;
1F3C C223           7896    HEX2X:  CLR     ADD_IN          ;DON'T SUPPRESS ZEROS
1F3E E9             7897            MOV     A,R1            ;GET LOW NIBBLE AND PRINT IT
1F3F F153           7898            ACALL   HOUTHI
1F41 E9             7899            MOV     A,R1
1F42 F154           7900            ACALL   HOUTLO
1F44 7D48           7901            MOV     R5,#'H'         ;OUTPUT H TO INDICATE HEX MODE
                    7902            ;
1F46 C19C           7903    SOUT_1: AJMP    SOUT1
                    7904            ;
1F48 C223           7905    HOUT1:  CLR     ADD_IN          ;PRINTED SOMETHING, SO CLEAR ADD_IN
1F4A 2490           7906            ADD     A,#90H          ;CONVERT TO ASCII
1F4C D4             7907            DA      A
1F4D 3440           7908            ADDC    A,#40H
1F4F D4             7909            DA      A               ;GOT IT HERE
1F50 FD             7910            MOV     R5,A            ;OUTPUT THE BYTE
1F51 80F3           7911            SJMP    SOUT_1
                    7912            ;
1F53 C4             7913    HOUTHI: SWAP    A               ;SWAP TO OUTPUT HIGH NIBBLE
                    7914            ;
1F54 540F           7915    HOUTLO: ANL     A,#0FH          ;STRIP
1F56 70F0           7916            JNZ     HOUT1           ;PRINT IF NOT ZERO
1F58 3023ED         7917            JNB     ADD_IN,HOUT1    ;OUTPUT A ZERO IF NOT SUPRESSED
1F5B 22             7918            RET
                    7919    ;
                    7920    ;*****************************************************************************
                    7921    ;******* New baudrate detection **********************************************
                    7922    ;******* calculate r3:r1=-(Timer2 DIV 16) for serial mode ********************
                    7923    ;******* Wulf 3 alteration 2 *************************************************
                    7924    ;
                    7925    ;-- comment out for AT98LP52 -------------------------------------------------
                    7926    ;
                    7927    ;SERCALC:mov    a,#0F0h
                    7928    ;       mov     r3,a
                    7929    ;       mov     r1,TH2
                    7930    ;       anl     a,r1
                    7931    ;       swap    a
                    7932    ;       cpl     a
                    7933    ;       xch     a,r3
                    7934    ;       anl     a,TL2
                    7935    ;       xch     a,r1
                    7936    ;       anl     a,#00Fh
                    7937    ;       orl     a,r1
                    7938    ;       swap    a
                    7939    ;       cpl     a
                    7940    ;       mov     r1,ADCON        ;save BSY bit
                    7941    ;       mov     DAPR,#0         ;start A/D for 805xx test
                    7942    ;       xch     a,r1
                    7943    ;       ret
                    7944    ;
                    7945    ;-- insert for AT98LP52 -----------------------------------------------------
                    7946    ;TEST_MSG: db   'Speed OK?'
                    7947    ;       db      00h             ; Stop Code
                    7948    ;-- insert end --------------------------------------------------------------
                    7949    ;*****************************************************************************
BASIC52Q                                                                                                      PAGE 139

                    7950    ;
1F78                7951            ORG     1F78H
                    7952            ;
1F78 201A03         7953    CKS_I:  JB      CKS_B,CS_I
1F7B 02401B         7954            LJMP    401BH
                    7955            ;
1F7E 022088         7956    CS_I:   LJMP    2088H
                    7957            ;
1F81 4E4F2044       7958    E14X:   DB      'NO DATA"'
1F85 41544122   
                    7959            ;
1F89 94             7960    E11X:   DB      128+20
1F8A 41524954       7961            DB      'ARITH. OVERFLOW"'
1F8E 482E204F   
1F92 56455246   
1F96 4C4F5722   
                    7962            ;
1F9A 50524F47       7963    E16X:   DB      'PROGRAMMING"'
1F9E 52414D4D   
1FA2 494E4722   
                    7964            ;
1FA6 43414E         7965    E15X:   DB      'CAN'
1FA9 27             7966            DB      27H
1FAA 5420434F       7967            DB      'T CONTINUE"'
1FAE 4E54494E   
1FB2 554522     
                    7968            ;
1FB5 494E5641       7969    E10X:   DB      'INVALID LINE NUMBER"'
1FB9 4C494420   
1FBD 4C494E45   
1FC1 204E554D   
1FC5 42455222   
                    7970            ;
1FC9 50524F4D       7971    NOROM:  DB      'PROM MODE"'
1FCD 204D4F44   
1FD1 4522       
                    7972            ;
                    7973    ;*****************************************************************************
                    7974    ;****** Set a new version message ********************************************
                    7975    ;
                    7976    ;S_N:   DB      '*MCS-51(tm) BASIC V1.1*'
                    7977    ;
1FD3 2A4D4353       7978    S_N:    DB      '*MCS-BASIC-52 V1.31*"'
1FD7 2D424153   
1FDB 49432D35   
1FDF 32205631   
1FE3 2E33312A   
1FE7 22         
                    7979    ;
                    7980    ;*****************************************************************************
                    7981    ;
1FEB                7982            ORG     1FEBH           ;FOR LINK COMPATABILITY
                    7983            ;
1FEB                7984    GET_DIGIT_CHECK:        ; Get a character, then check for digit
                    7985            ;
1FEB B15F           7986            ACALL   GET_DPTR_CHARACTER
                    7987            ;
1FED                7988    DIGIT_CHECK:    ;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
BASIC52Q                                                                                                      PAGE 140

                    7989            ;
1FED B43A00         7990            CJNE    A,#'9'+1,DC10   ;SEE IF ASCII 9 OR LESS
1FF0 4001           7991    DC10:   JC      DC1
1FF2 22             7992            RET
                    7993            ;
1FF3 B43000         7994    DC1:    CJNE    A,#'0',DC11     ;SEE IF ASCII 0 OR GREATER
1FF6 B3             7995    DC11:   CPL     C
1FF7 22             7996            RET
                    7997            ;
1FF8                7998            ORG     1FF8H
                    7999            ;
1FF8 4552524F       8000    ERS:    DB      'ERROR: "'
1FFC 523A2022   
                    8001            ;
                    8002            ;***************************************************************
                    8003            ;
----                8004            XSEG    ;External Ram
                    8005            ;
                    8006            ;***************************************************************
                    8007            ;
0000                8008            DS      4
0004                8009    IBCNT:  DS      1               ;LENGTH OF A LINE
0005                8010    IBLN:   DS      2               ;THE LINE NUMBER
0007                8011    IBUF:   DS      LINLEN          ;THE INPUT BUFFER
0050                8012    CONVT:  DS      15              ;CONVERSION LOCATION FOR FPIN
                    8013            ;
0100                8014            ORG     100H
                    8015            ;
0100                8016    GTB:    DS      1               ;GET LOCATION
0101                8017    ERRLOC: DS      1               ;ERROR TYPE
0102                8018    ERRNUM: DS      2               ;WHERE TO GO ON AN ERROR
0104                8019    VARTOP: DS      2               ;TOP OF VARIABLE STORAGE
0106                8020    ST_ALL: DS      2               ;STORAGE ALLOCATION
0108                8021    MT_ALL: DS      2               ;MATRIX ALLOCATION
010A                8022    MEMTOP: DS      2               ;TOP OF MEMORY
010C                8023    RCELL:  DS      2               ;RANDOM NUMBER CELL
010E                8024            DS      FPSIZ-1
0113                8025    CXTAL:  DS      1               ;CRYSTAL
0114                8026            DS      FPSIZ-1
0119                8027    FPT1:   DS      1               ;FLOATINP POINT TEMP 1
011A                8028            DS      FPSIZ-1
011F                8029    FPT2:   DS      1               ;FLOATING POINT TEMP 2
0120                8030    INTLOC: DS      2               ;LOCATION TO GO TO ON INTERRUPT
0122                8031    STR_AL: DS      2               ;STRING ALLOCATION
0124                8032    SPV:    DS      2               ;SERIAL PORT BAUD RATE
0126                8033    TIV:    DS      2               ;TIMER INTERRUPT NUM AND LOC
0128                8034    PROGS:  DS      2               ;PROGRAM A PROM TIME OUT
                    8035    ;
                    8036    ;*****************************************************************************
                    8037    ;****** Disable Intel programming for to get room ****************************
                    8038    ;****** We don't need this, but don't remark it! *****************************
                    8039    ;
012A                8040    IPROGS: DS      2               ;INTELLIGENT PROM PROGRAMMER TIMEOUT
                    8041    ;
                    8042    ;*****************************************************************************
                    8043    ;
012C                8044    TM_TOP: DS      1
                    8045    ;
BASIC52Q                                                                                                      PAGE 141

                    8046            END
                    8047    
                    8048    
                    8049    

VERSION 1.2h ASSEMBLY COMPLETE, 0 ERRORS FOUND
BASIC52Q                                                                                                      PAGE 142

AABS . . . . . . . . . . . . . .  C ADDR  138FH  
AADD . . . . . . . . . . . . . .  C ADDR  1741H  
AANL . . . . . . . . . . . . . .  C ADDR  1484H  
AATAN. . . . . . . . . . . . . .  C ADDR  11E0H  
AATAN1 . . . . . . . . . . . . .  C ADDR  11EEH  
AC1. . . . . . . . . . . . . . .  C ADDR  096CH  
ACBYTE . . . . . . . . . . . . .  C ADDR  13ADH  
ACC. . . . . . . . . . . . . . .  D ADDR  00E0H  PREDEFINED  
ACOS . . . . . . . . . . . . . .  C ADDR  116DH  
ADBYTE . . . . . . . . . . . . .  C ADDR  13B6H  
ADCON. . . . . . . . . . . . . .    NUMB  00D8H  NOT USED  
ADDLP. . . . . . . . . . . . . .  C ADDR  19F2H  
ADDPTR . . . . . . . . . . . . .  C ADDR  05DEH  
ADDPTR1. . . . . . . . . . . . .  C ADDR  05E6H  
ADD_IN . . . . . . . . . . . . .  B ADDR  0023H  
ADD_R. . . . . . . . . . . . . .  C ADDR  19F0H  
ADIV . . . . . . . . . . . . . .  C ADDR  140AH  
AEL1 . . . . . . . . . . . . . .  C ADDR  1282H  
AELP . . . . . . . . . . . . . .  C ADDR  1270H  
AEQ. . . . . . . . . . . . . . .  C ADDR  13DBH  
AEQ1 . . . . . . . . . . . . . .  C ADDR  13DDH  
AETOX. . . . . . . . . . . . . .  C ADDR  1327H  
AEXL . . . . . . . . . . . . . .  C ADDR  134EH  
AEXP . . . . . . . . . . . . . .  C ADDR  132BH  
AEXP1. . . . . . . . . . . . . .  C ADDR  133DH  
AFREE. . . . . . . . . . . . . .  C ADDR  1711H  
AGE. . . . . . . . . . . . . . .  C ADDR  13E7H  
AGET . . . . . . . . . . . . . .  C ADDR  14A9H  
AGT. . . . . . . . . . . . . . .  C ADDR  13C5H  
AGT1 . . . . . . . . . . . . . .  C ADDR  13C9H  
AI1. . . . . . . . . . . . . . .  C ADDR  137AH  
AI11 . . . . . . . . . . . . . .  C ADDR  1381H  
AI2. . . . . . . . . . . . . . .  C ADDR  1382H  
AI21 . . . . . . . . . . . . . .  C ADDR  138AH  
AI3. . . . . . . . . . . . . . .  C ADDR  138EH  
AINT . . . . . . . . . . . . . .  C ADDR  136DH  
AL . . . . . . . . . . . . . . .  C ADDR  0D4FH  
AL1. . . . . . . . . . . . . . .  C ADDR  0D52H  
AL2. . . . . . . . . . . . . . .  C ADDR  0D57H  
AL3. . . . . . . . . . . . . . .  C ADDR  0D58H  
ALE. . . . . . . . . . . . . . .  C ADDR  13EBH  
ALEN . . . . . . . . . . . . . .  C ADDR  1721H  
ALN. . . . . . . . . . . . . . .  C ADDR  12C0H  
ALN1 . . . . . . . . . . . . . .  C ADDR  12CDH  
ALN11. . . . . . . . . . . . . .  C ADDR  12EFH  
ALNE . . . . . . . . . . . . . .  C ADDR  12E5H  
ALNL . . . . . . . . . . . . . .  C ADDR  12D3H  
ALNO . . . . . . . . . . . . . .  C ADDR  12F8H  
ALPAR. . . . . . . . . . . . . .  C ADDR  13ACH  
ALT. . . . . . . . . . . . . . .  C ADDR  13D6H  
ALT1 . . . . . . . . . . . . . .  C ADDR  13D8H  
AMUL . . . . . . . . . . . . . .  C ADDR  11B0H  
ANE. . . . . . . . . . . . . . .  C ADDR  13E1H  
ANEG . . . . . . . . . . . . . .  C ADDR  13A1H  
ANOT . . . . . . . . . . . . . .  C ADDR  1496H  
ANU. . . . . . . . . . . . . . .  C ADDR  0D44H  
AORL . . . . . . . . . . . . . .  C ADDR  148DH  
AP1. . . . . . . . . . . . . . .  C ADDR  14E5H  
BASIC52Q                                                                                                      PAGE 143

APCON. . . . . . . . . . . . . .  C ADDR  14E9H  
ARCAP2 . . . . . . . . . . . . .  C ADDR  14DFH  
ARG1_EXP_IS_LARGER . . . . . . .  C ADDR  1A56H  
ARG1_EXP_IS_LARGER1. . . . . . .  C ADDR  1A57H  
ARG1_EXP_IS_LARGER2. . . . . . .  C ADDR  1A5AH  
ARGF . . . . . . . . . . . . . .  B ADDR  0024H  
ARG_STACK. . . . . . . . . . . .    NUMB  0009H  
ARG_STACK_PAGE . . . . . . . . .    NUMB  0001H  
ARND . . . . . . . . . . . . . .  C ADDR  13F1H  
ASGN . . . . . . . . . . . . . .  C ADDR  1395H  
ASIN . . . . . . . . . . . . . .  C ADDR  1171H  
ASIN1. . . . . . . . . . . . . .  C ADDR  1187H  
ASQR . . . . . . . . . . . . . .  C ADDR  128DH  
ASTKA. . . . . . . . . . . . . .    NUMB  0009H  
ASTKAH . . . . . . . . . . . . .    NUMB  0001H  
ASUB . . . . . . . . . . . . . .  C ADDR  171CH  
AT2CON . . . . . . . . . . . . .  C ADDR  14D3H  
ATAN . . . . . . . . . . . . . .  C ADDR  11D0H  
ATCON. . . . . . . . . . . . . .  C ADDR  14D7H  
ATIM0. . . . . . . . . . . . . .  C ADDR  14C1H  
ATIM1. . . . . . . . . . . . . .  C ADDR  14C7H  
ATIM2. . . . . . . . . . . . . .  C ADDR  14CDH  
ATIME. . . . . . . . . . . . . .  C ADDR  1729H  
ATMOD. . . . . . . . . . . . . .  C ADDR  14DBH  
ATTAB. . . . . . . . . . . . . .  C ADDR  112AH  
AXBYTE . . . . . . . . . . . . .  C ADDR  13BEH  
AXBYTE1. . . . . . . . . . . . .  C ADDR  13C0H  
AXRL . . . . . . . . . . . . . .  C ADDR  1498H  
AXTAL. . . . . . . . . . . . . .  C ADDR  0FD9H  
AXTAL0 . . . . . . . . . . . . .  C ADDR  1657H  
AXTAL1 . . . . . . . . . . . . .  C ADDR  165CH  
AXTAL2 . . . . . . . . . . . . .  C ADDR  1679H  
AXTAL3 . . . . . . . . . . . . .  C ADDR  121FH  
A_D. . . . . . . . . . . . . . .  C ADDR  1260H  
A_IE . . . . . . . . . . . . . .  C ADDR  14B9H  
A_IP . . . . . . . . . . . . . .  C ADDR  14BDH  
B. . . . . . . . . . . . . . . .  D ADDR  00F0H  PREDEFINED  
B4800. . . . . . . . . . . . . .    NUMB  00B2H  NOT USED  
B9600. . . . . . . . . . . . . .    NUMB  00D9H  NOT USED  
BABC . . . . . . . . . . . . . .    NUMB  0027H  NOT USED  
BAUD19K. . . . . . . . . . . . .    NUMB  FFB2H  
BCHR . . . . . . . . . . . . . .  C ADDR  082FH  
BCHR1. . . . . . . . . . . . . .  C ADDR  0835H  
BCK. . . . . . . . . . . . . . .  C ADDR  078DH  
BD . . . . . . . . . . . . . . .  B ADDR  00DFH  NOT USED  
BELL . . . . . . . . . . . . . .    NUMB  0007H  
BG1. . . . . . . . . . . . . . .  C ADDR  0428H  
BG3. . . . . . . . . . . . . . .  C ADDR  0467H  
BI . . . . . . . . . . . . . . .  B ADDR  0032H  
BO . . . . . . . . . . . . . . .  B ADDR  002CH  
BOFAH. . . . . . . . . . . . . .    NUMB  0013H  
BOFAL. . . . . . . . . . . . . .    NUMB  0014H  
BOTH_PLUS. . . . . . . . . . . .  C ADDR  1A5EH  NOT USED  
BR0. . . . . . . . . . . . . . .  C ADDR  07F1H  
BR2. . . . . . . . . . . . . . .  C ADDR  083EH  
BS . . . . . . . . . . . . . . .    NUMB  0008H  
B_C. . . . . . . . . . . . . . .  C ADDR  0AA4H  
B_TXA. . . . . . . . . . . . . .  C ADDR  0F23H  
BASIC52Q                                                                                                      PAGE 144

B_TXA1 . . . . . . . . . . . . .  C ADDR  0F2DH  
C0 . . . . . . . . . . . . . . .  C ADDR  0CF6H  
C0C. . . . . . . . . . . . . . .  C ADDR  1025H  
C0ORX1 . . . . . . . . . . . . .  B ADDR  0034H  
C1 . . . . . . . . . . . . . . .  C ADDR  0CFDH  
C1C. . . . . . . . . . . . . . .  C ADDR  1030H  
C2 . . . . . . . . . . . . . . .  C ADDR  0D06H  
C2C. . . . . . . . . . . . . . .  C ADDR  102FH  
C2_T2. . . . . . . . . . . . . .  C ADDR  146CH  
C3C. . . . . . . . . . . . . . .  C ADDR  1035H  
CASB . . . . . . . . . . . . . .  C ADDR  1E9EH  NOT USED  
CASB2. . . . . . . . . . . . . .  C ADDR  1EADH  
CASB4. . . . . . . . . . . . . .  C ADDR  1EC0H  
CASB5. . . . . . . . . . . . . .  C ADDR  1EC2H  
CASB6. . . . . . . . . . . . . .  C ADDR  1ECBH  
CBIAS. . . . . . . . . . . . . .  C ADDR  167BH  
CC1. . . . . . . . . . . . . . .  C ADDR  1844H  
CCAL . . . . . . . . . . . . . .  C ADDR  051CH  
CCAL1. . . . . . . . . . . . . .  C ADDR  052CH  
CCLR3. . . . . . . . . . . . . .  C ADDR  068CH  
CCONT. . . . . . . . . . . . . .  C ADDR  183EH  
CERASE . . . . . . . . . . . . .  C ADDR  0500H  
CILOOP . . . . . . . . . . . . .  C ADDR  080FH  
CILOOP1. . . . . . . . . . . . .  C ADDR  0811H  
CIUB . . . . . . . . . . . . . .  B ADDR  001EH  
CI_RET . . . . . . . . . . . . .  C ADDR  07BEH  
CI_RET1. . . . . . . . . . . . .  C ADDR  07BFH  
CKS_B. . . . . . . . . . . . . .  B ADDR  001AH  
CKS_I. . . . . . . . . . . . . .  C ADDR  1F78H  
CL1. . . . . . . . . . . . . . .  C ADDR  106FH  
CL2. . . . . . . . . . . . . . .  C ADDR  1074H  
CL3. . . . . . . . . . . . . . .  C ADDR  1092H  
CL6. . . . . . . . . . . . . . .  C ADDR  1094H  
CL7. . . . . . . . . . . . . . .  C ADDR  109DH  
CLIST. . . . . . . . . . . . . .  C ADDR  104EH  
CLIST1 . . . . . . . . . . . . .  C ADDR  106BH  
CLN_UP . . . . . . . . . . . . .  C ADDR  0F17H  
CLOCK_CFG. . . . . . . . . . . .    NUMB  00B9H  
CLOOP. . . . . . . . . . . . . .  C ADDR  1A66H  
CL_1 . . . . . . . . . . . . . .  C ADDR  067DH  
CL_2 . . . . . . . . . . . . . .  C ADDR  068BH  NOT USED  
CMND1. . . . . . . . . . . . . .  C ADDR  1787H  
CMND11 . . . . . . . . . . . . .  C ADDR  17EBH  
CMND3. . . . . . . . . . . . . .  C ADDR  17C4H  
CMND31 . . . . . . . . . . . . .  C ADDR  17D1H  
CMND5. . . . . . . . . . . . . .  C ADDR  17DDH  
CMNDD. . . . . . . . . . . . . .  C ADDR  010FH  
CMNDLK . . . . . . . . . . . . .  C ADDR  0855H  
CMNDR. . . . . . . . . . . . . .  C ADDR  1794H  
CMNDSP . . . . . . . . . . . . .    NUMB  004DH  
CMNX . . . . . . . . . . . . . .  C ADDR  179BH  
CMNX1. . . . . . . . . . . . . .  C ADDR  17A8H  
CMPLK. . . . . . . . . . . . . .  C ADDR  1208H  
CN0. . . . . . . . . . . . . . .  C ADDR  0FFEH  
CN0T . . . . . . . . . . . . . .  C ADDR  101CH  
CN0T1. . . . . . . . . . . . . .  C ADDR  1005H  
CN0T2. . . . . . . . . . . . . .  C ADDR  1010H  
CN0T3. . . . . . . . . . . . . .  C ADDR  1012H  
BASIC52Q                                                                                                      PAGE 145

CN0T4. . . . . . . . . . . . . .  C ADDR  101BH  
CNEW . . . . . . . . . . . . . .  C ADDR  065CH  
CNEW1. . . . . . . . . . . . . .  C ADDR  0662H  
CNTRLC . . . . . . . . . . . . .    NUMB  0003H  
CNTRLD . . . . . . . . . . . . .    NUMB  0004H  
CNT_S. . . . . . . . . . . . . .  B ADDR  0035H  
CNULL. . . . . . . . . . . . . .  C ADDR  0B08H  
CNX. . . . . . . . . . . . . . .  C ADDR  0FF9H  
COB. . . . . . . . . . . . . . .  B ADDR  001BH  
CONB . . . . . . . . . . . . . .  B ADDR  0017H  
CONST. . . . . . . . . . . . . .  C ADDR  0FEFH  
CONVERT. . . . . . . . . . . . .    NUMB  0058H  
CONVERT_ASCII_STRING_TO_BINARY .  C ADDR  1E9EH  
CONVERT_BINARY_TO_ASCII_STRING .  C ADDR  1EF7H  
CONVT. . . . . . . . . . . . . .  X ADDR  0050H  
COUB . . . . . . . . . . . . . .  B ADDR  001CH  
CPROG. . . . . . . . . . . . . .  C ADDR  048AH  
CPROG1 . . . . . . . . . . . . .  C ADDR  048DH  NOT USED  
CPROG2 . . . . . . . . . . . . .  C ADDR  04B1H  NOT USED  
CPS. . . . . . . . . . . . . . .  C ADDR  0EA9H  
CR . . . . . . . . . . . . . . .    NUMB  000DH  
CR0. . . . . . . . . . . . . . .  C ADDR  03ECH  
CR1. . . . . . . . . . . . . . .  C ADDR  0400H  
CR11 . . . . . . . . . . . . . .  C ADDR  0403H  
CR2. . . . . . . . . . . . . . .  C ADDR  040CH  
CR20 . . . . . . . . . . . . . .  C ADDR  0419H  
CRAM . . . . . . . . . . . . . .  C ADDR  177FH  
CRLF . . . . . . . . . . . . . .  C ADDR  06A5H  
CRLF2. . . . . . . . . . . . . .  C ADDR  06A3H  
CROM . . . . . . . . . . . . . .  C ADDR  053CH  
CRP. . . . . . . . . . . . . . .  C ADDR  06ADH  
CRS. . . . . . . . . . . . . . .  C ADDR  03E0H  
CRS1 . . . . . . . . . . . . . .  C ADDR  03E5H  
CRS2 . . . . . . . . . . . . . .  C ADDR  03E8H  
CRST . . . . . . . . . . . . . .  C ADDR  038BH  
CRST1. . . . . . . . . . . . . .  C ADDR  03A4H  
CRST2. . . . . . . . . . . . . .  C ADDR  03A7H  
CRUN . . . . . . . . . . . . . .  C ADDR  0802H  
CS1. . . . . . . . . . . . . . .  C ADDR  0B47H  
CSC. . . . . . . . . . . . . . .  C ADDR  0BBDH  
CSETUP . . . . . . . . . . . . .  C ADDR  0B4BH  
CSETUP1. . . . . . . . . . . . .  C ADDR  0B56H  
CSTAKA . . . . . . . . . . . . .  C ADDR  142CH  
CSTAKA2. . . . . . . . . . . . .  C ADDR  142AH  
CSTKA. . . . . . . . . . . . . .    NUMB  0011H  
CSTKAH . . . . . . . . . . . . .    NUMB  0000H  
CSTS . . . . . . . . . . . . . .  C ADDR  07C8H  
CSTS1. . . . . . . . . . . . . .  C ADDR  07CEH  
CSTS2. . . . . . . . . . . . . .  C ADDR  07D4H  
CSY. . . . . . . . . . . . . . .  C ADDR  0A1EH  
CSY1 . . . . . . . . . . . . . .  C ADDR  0A2EH  
CSY2 . . . . . . . . . . . . . .  C ADDR  0A3AH  
CS_I . . . . . . . . . . . . . .  C ADDR  1F7EH  
CXFER. . . . . . . . . . . . . .  C ADDR  1773H  
CXTAL. . . . . . . . . . . . . .  X ADDR  0113H  
CY . . . . . . . . . . . . . . .  B ADDR  00D7H  PREDEFINED  
C_1. . . . . . . . . . . . . . .  C ADDR  0F12H  
C_2. . . . . . . . . . . . . . .  C ADDR  0F0DH  
BASIC52Q                                                                                                      PAGE 146

C_BIT. . . . . . . . . . . . . .  B ADDR  002EH  
C_EX . . . . . . . . . . . . . .  C ADDR  07D7H  
C_K. . . . . . . . . . . . . . .  C ADDR  0540H  
C_TST. . . . . . . . . . . . . .  C ADDR  0EC6H  
D1 . . . . . . . . . . . . . . .  C ADDR  05DCH  
DACK . . . . . . . . . . . . . .  B ADDR  0096H  
DAPR . . . . . . . . . . . . . .    NUMB  00DAH  NOT USED  
DBTWO. . . . . . . . . . . . . .  C ADDR  1194H  
DC1. . . . . . . . . . . . . . .  C ADDR  1FF3H  
DC10 . . . . . . . . . . . . . .  C ADDR  1FF0H  
DC11 . . . . . . . . . . . . . .  C ADDR  1FF6H  
DCMPX. . . . . . . . . . . . . .  C ADDR  05CCH  
DEC3210. . . . . . . . . . . . .  C ADDR  158BH  
DEC3211. . . . . . . . . . . . .  C ADDR  158FH  NOT USED  
DEC3212. . . . . . . . . . . . .  C ADDR  1590H  
DEC76. . . . . . . . . . . . . .  C ADDR  1647H  
DEC77. . . . . . . . . . . . . .  C ADDR  164CH  
DECDP. . . . . . . . . . . . . .  C ADDR  05C2H  
DECDP1 . . . . . . . . . . . . .  C ADDR  05C8H  
DECDP2 . . . . . . . . . . . . .  C ADDR  05C0H  
DECX . . . . . . . . . . . . . .  C ADDR  1D42H  
DEC_ASTKA. . . . . . . . . . . .  C ADDR  120BH  
DEC_ASTKA1 . . . . . . . . . . .  C ADDR  1212H  
DEC_R. . . . . . . . . . . . . .  C ADDR  1589H  
DELTST . . . . . . . . . . . . .  C ADDR  0EE1H  
DELTST1. . . . . . . . . . . . .  C ADDR  0EE3H  
DIGIT. . . . . . . . . . . . . .    NUMB  0004H  
DIGIT_CHECK. . . . . . . . . . .  C ADDR  1FEDH  
DIRF . . . . . . . . . . . . . .  B ADDR  002FH  
DIV0 . . . . . . . . . . . . . .  C ADDR  1ABDH  
DIV3 . . . . . . . . . . . . . .  C ADDR  1ACAH  
DIV4 . . . . . . . . . . . . . .  C ADDR  1AD7H  
DIV5 . . . . . . . . . . . . . .  C ADDR  1ADAH  
DIV6 . . . . . . . . . . . . . .  C ADDR  1AE2H  
DIV7 . . . . . . . . . . . . . .  C ADDR  1AF9H  
DIV8 . . . . . . . . . . . . . .  C ADDR  1B0EH  
DLD. . . . . . . . . . . . . . .  C ADDR  062BH  
DONE_LOAD. . . . . . . . . . . .  B ADDR  0053H  
DPH. . . . . . . . . . . . . . .  D ADDR  0083H  PREDEFINED  
DPL. . . . . . . . . . . . . . .  D ADDR  0082H  PREDEFINED  
DP_B . . . . . . . . . . . . . .  C ADDR  0E9BH  
DP_T . . . . . . . . . . . . . .  C ADDR  0EA2H  
DRQ. . . . . . . . . . . . . . .  B ADDR  0031H  
DT1. . . . . . . . . . . . . . .  C ADDR  0EE8H  
DTEMP. . . . . . . . . . . . . .  C ADDR  184DH  
DTYPE. . . . . . . . . . . . . .    NUMB  0003H  
DUBSUB . . . . . . . . . . . . .  C ADDR  0A02H  
D_CHK. . . . . . . . . . . . . .  C ADDR  0DCCH  
D_L1 . . . . . . . . . . . . . .  C ADDR  0AF8H  
D_UNDER. . . . . . . . . . . . .  C ADDR  1AC8H  
E10X . . . . . . . . . . . . . .  C ADDR  1FB5H  
E11X . . . . . . . . . . . . . .  C ADDR  1F89H  
E14X . . . . . . . . . . . . . .  C ADDR  1F81H  
E15X . . . . . . . . . . . . . .  C ADDR  1FA6H  
E16X . . . . . . . . . . . . . .  C ADDR  1F9AH  
E1X. . . . . . . . . . . . . . .  C ADDR  1746H  
E1XX . . . . . . . . . . . . . .  C ADDR  1885H  
E1XX1. . . . . . . . . . . . . .  C ADDR  1887H  
BASIC52Q                                                                                                      PAGE 147

E1XX2. . . . . . . . . . . . . .  C ADDR  188CH  
E2X. . . . . . . . . . . . . . .  C ADDR  1751H  
E3X. . . . . . . . . . . . . . .  C ADDR  1828H  
E3XX . . . . . . . . . . . . . .  C ADDR  09BDH  
E4XX . . . . . . . . . . . . . .  C ADDR  0BC1H  
E4YY . . . . . . . . . . . . . .  C ADDR  121AH  
E5X. . . . . . . . . . . . . . .  C ADDR  1816H  
E6X. . . . . . . . . . . . . . .  C ADDR  1761H  
E7X. . . . . . . . . . . . . . .  C ADDR  1804H  
EA . . . . . . . . . . . . . . .  B ADDR  00AFH  PREDEFINED  
EATC . . . . . . . . . . . . . .  C ADDR  0CE5H  
EBIAS. . . . . . . . . . . . . .  C ADDR  1261H  
EIG. . . . . . . . . . . . . . .  C ADDR  036DH  
EIGP . . . . . . . . . . . . . .  C ADDR  0E4EH  
EK . . . . . . . . . . . . . . .  C ADDR  0C0EH  
ENDBIT . . . . . . . . . . . . .  B ADDR  0029H  
EOF. . . . . . . . . . . . . . .    NUMB  0001H  
EP1. . . . . . . . . . . . . . .  C ADDR  0F45H  
EP2. . . . . . . . . . . . . . .  C ADDR  0F49H  
EP21 . . . . . . . . . . . . . .  C ADDR  0F52H  
EP22 . . . . . . . . . . . . . .  C ADDR  0F5BH  
EP3. . . . . . . . . . . . . . .  C ADDR  0F6FH  
EP4. . . . . . . . . . . . . . .  C ADDR  0F71H  
EP41 . . . . . . . . . . . . . .  C ADDR  0F76H  
EP42 . . . . . . . . . . . . . .  C ADDR  0F7BH  
EP5. . . . . . . . . . . . . . .  C ADDR  0F82H  
ER0. . . . . . . . . . . . . . .  C ADDR  1874H  
ER1. . . . . . . . . . . . . . .  C ADDR  18B8H  
ER2. . . . . . . . . . . . . . .  C ADDR  18C2H  
ER3. . . . . . . . . . . . . . .  C ADDR  18D1H  
ER31 . . . . . . . . . . . . . .  C ADDR  18EEH  
ER4. . . . . . . . . . . . . . .  C ADDR  18FBH  
ERA1 . . . . . . . . . . . . . .  C ADDR  050DH  
ERAMEND. . . . . . . . . . . . .    NUMB  03FFH  
ERL4 . . . . . . . . . . . . . .  C ADDR  0844H  
ERPAR. . . . . . . . . . . . . .  C ADDR  0CE3H  
ERRLK. . . . . . . . . . . . . .  C ADDR  04D6H  
ERRLOC . . . . . . . . . . . . .  X ADDR  0101H  
ERRNUM . . . . . . . . . . . . .  X ADDR  0102H  
ERROR. . . . . . . . . . . . . .  C ADDR  188FH  
ERROR0 . . . . . . . . . . . . .  C ADDR  189BH  
ERROR01. . . . . . . . . . . . .  C ADDR  18A2H  
ERROR1 . . . . . . . . . . . . .  C ADDR  1890H  
ERRS . . . . . . . . . . . . . .  C ADDR  18ADH  
ERS. . . . . . . . . . . . . . .  C ADDR  1FF8H  
ET0. . . . . . . . . . . . . . .  B ADDR  00A9H  PREDEFINED  
EX1. . . . . . . . . . . . . . .  B ADDR  00AAH  PREDEFINED  
EXA. . . . . . . . . . . . . . .  C ADDR  037BH  
EXC. . . . . . . . . . . . . . .  C ADDR  0383H  
EXI. . . . . . . . . . . . . . .  C ADDR  1836H  
EXP1 . . . . . . . . . . . . . .  C ADDR  17F8H  
EXP11. . . . . . . . . . . . . .  C ADDR  17F2H  
EXPONENTS_EQUAL. . . . . . . . .  C ADDR  1A5BH  
EXPOT4 . . . . . . . . . . . . .  C ADDR  1E16H  
EXPOT5 . . . . . . . . . . . . .  C ADDR  1E41H  
EXPOTX . . . . . . . . . . . . .  C ADDR  1E14H  
EXPOUT . . . . . . . . . . . . .  C ADDR  1E01H  
EXPRB. . . . . . . . . . . . . .  C ADDR  0F43H  
BASIC52Q                                                                                                      PAGE 148

E_FIND . . . . . . . . . . . . .  C ADDR  0A93H  
F0 . . . . . . . . . . . . . . .  B ADDR  00D5H  PREDEFINED  
FCMP . . . . . . . . . . . . . .  C ADDR  1202H  
FDT1 . . . . . . . . . . . . . .  C ADDR  1D53H  
FDT2 . . . . . . . . . . . . . .  C ADDR  1D5BH  
FDTEST . . . . . . . . . . . . .  C ADDR  1D4FH  NOT USED  
FINDC. . . . . . . . . . . . . .  C ADDR  0EEEH  
FINDCR . . . . . . . . . . . . .  C ADDR  0EECH  
FINISH1. . . . . . . . . . . . .  C ADDR  1D14H  
FINISH2. . . . . . . . . . . . .  C ADDR  1D27H  
FINISH_UP. . . . . . . . . . . .  C ADDR  1D28H  
FINISH_UP1 . . . . . . . . . . .  C ADDR  1D2FH  
FIRST_RADIX. . . . . . . . . . .  B ADDR  0052H  
FL1. . . . . . . . . . . . . . .  C ADDR  0AD3H  
FL11 . . . . . . . . . . . . . .  C ADDR  0AD7H  
FL2. . . . . . . . . . . . . . .  C ADDR  0AECH  
FL3. . . . . . . . . . . . . . .  C ADDR  0ADCH  
FLOATING_ADD . . . . . . . . . .  C ADDR  1993H  
FLOATING_COMP. . . . . . . . . .  C ADDR  1A43H  
FLOATING_DIV . . . . . . . . . .  C ADDR  1AB0H  
FLOATING_MUL . . . . . . . . . .  C ADDR  1A73H  
FLOATING_POINT_INPUT . . . . . .  C ADDR  1CC2H  
FLOATING_POINT_OUTPUT. . . . . .  C ADDR  1D7AH  
FLOATING_SUB . . . . . . . . . .  C ADDR  1989H  
FMUL0. . . . . . . . . . . . . .  C ADDR  1A78H  
FMUL1. . . . . . . . . . . . . .  C ADDR  1A7AH  
FMUL2. . . . . . . . . . . . . .  C ADDR  1A8CH  
FMUL21 . . . . . . . . . . . . .  C ADDR  1A8EH  
FMUL3. . . . . . . . . . . . . .  C ADDR  1A9DH  
FMUL_OVER. . . . . . . . . . . .  C ADDR  1A88H  
FNDCL2 . . . . . . . . . . . . .  C ADDR  0EF6H  
FNDCL3 . . . . . . . . . . . . .  C ADDR  0EFAH  
FORMAT . . . . . . . . . . . . .    NUMB  0017H  
FOUND_RADIX. . . . . . . . . . .  B ADDR  0051H  
FOV. . . . . . . . . . . . . . .  C ADDR  1A8AH  
FPC1 . . . . . . . . . . . . . .  C ADDR  1BB5H  
FPO1 . . . . . . . . . . . . . .  C ADDR  1D8CH  
FPO2 . . . . . . . . . . . . . .  C ADDR  1D93H  
FPO3 . . . . . . . . . . . . . .  C ADDR  1DA6H  
FPONE. . . . . . . . . . . . . .  C ADDR  16F2H  
FPSIZ. . . . . . . . . . . . . .    NUMB  0006H  
FPT1 . . . . . . . . . . . . . .  X ADDR  0119H  
FPT2 . . . . . . . . . . . . . .  X ADDR  011FH  
FPTS . . . . . . . . . . . . . .  C ADDR  104BH  
FPTST. . . . . . . . . . . . . .  C ADDR  1038H  
FPTST1 . . . . . . . . . . . . .  C ADDR  1045H  
FP_ACC1. . . . . . . . . . . . .    NUMB  0035H  NOT USED  
FP_ACC2. . . . . . . . . . . . .    NUMB  0036H  NOT USED  
FP_ACC3. . . . . . . . . . . . .    NUMB  0037H  NOT USED  
FP_ACC4. . . . . . . . . . . . .    NUMB  0038H  NOT USED  
FP_ACC5. . . . . . . . . . . . .    NUMB  0039H  NOT USED  
FP_ACC6. . . . . . . . . . . . .    NUMB  003AH  NOT USED  
FP_ACC7. . . . . . . . . . . . .    NUMB  003BH  NOT USED  
FP_ACC8. . . . . . . . . . . . .    NUMB  003CH  
FP_ACCC. . . . . . . . . . . . .    NUMB  0034H  
FP_ACCS. . . . . . . . . . . . .    NUMB  003DH  NOT USED  
FP_ACCX. . . . . . . . . . . . .    NUMB  0033H  
FP_BASE. . . . . . . . . . . . .  C ADDR  196FH  
BASIC52Q                                                                                                      PAGE 149

FP_BASE1 . . . . . . . . . . . .  C ADDR  1971H  
FP_BASE10. . . . . . . . . . . .  C ADDR  1983H  
FP_BASE11. . . . . . . . . . . .  C ADDR  1985H  
FP_BASE12. . . . . . . . . . . .  C ADDR  1987H  
FP_BASE2 . . . . . . . . . . . .  C ADDR  1973H  
FP_BASE3 . . . . . . . . . . . .  C ADDR  1975H  
FP_BASE4 . . . . . . . . . . . .  C ADDR  1977H  
FP_BASE5 . . . . . . . . . . . .  C ADDR  1979H  
FP_BASE6 . . . . . . . . . . . .  C ADDR  197BH  
FP_BASE7 . . . . . . . . . . . .  C ADDR  197DH  
FP_BASE8 . . . . . . . . . . . .  C ADDR  197FH  
FP_BASE9 . . . . . . . . . . . .  C ADDR  1981H  
FP_CARRY . . . . . . . . . . . .    NUMB  002AH  
FP_CLEAR . . . . . . . . . . . .  C ADDR  1BB2H  
FP_DIG12 . . . . . . . . . . . .    NUMB  002BH  
FP_DIG34 . . . . . . . . . . . .    NUMB  002CH  
FP_DIG56 . . . . . . . . . . . .    NUMB  002DH  
FP_DIG78 . . . . . . . . . . . .    NUMB  002EH  
FP_EXP . . . . . . . . . . . . .    NUMB  0030H  
FP_NIB1. . . . . . . . . . . . .    NUMB  002BH  
FP_NIB2. . . . . . . . . . . . .    NUMB  002CH  NOT USED  
FP_NIB3. . . . . . . . . . . . .    NUMB  002DH  NOT USED  
FP_NIB4. . . . . . . . . . . . .    NUMB  002EH  NOT USED  
FP_NIB5. . . . . . . . . . . . .    NUMB  002FH  NOT USED  
FP_NIB6. . . . . . . . . . . . .    NUMB  0030H  NOT USED  
FP_NIB7. . . . . . . . . . . . .    NUMB  0031H  NOT USED  
FP_NIB8. . . . . . . . . . . . .    NUMB  0032H  
FP_NUMBER_SIZE . . . . . . . . .    NUMB  0006H  
FP_SIGN. . . . . . . . . . . . .    NUMB  002FH  
FP_STATUS. . . . . . . . . . . .    NUMB  0028H  
FP_TEMP. . . . . . . . . . . . .    NUMB  0029H  
FREE . . . . . . . . . . . . . .  C ADDR  1DD2H  
FREE1. . . . . . . . . . . . . .  C ADDR  1DD9H  
FREE2. . . . . . . . . . . . . .  C ADDR  1DF5H  
FREE4. . . . . . . . . . . . . .  C ADDR  1DEDH  
FRTEST . . . . . . . . . . . . .  C ADDR  1D4CH  
FS . . . . . . . . . . . . . . .  C ADDR  13D0H  
FSIZE. . . . . . . . . . . . . .    NUMB  0011H  
FSTK . . . . . . . . . . . . . .  C ADDR  13CBH  
FSUB10 . . . . . . . . . . . . .  C ADDR  1A41H  
FSUB5. . . . . . . . . . . . . .  C ADDR  1A10H  
FSUB6. . . . . . . . . . . . . .  C ADDR  1A1BH  
FSUB7. . . . . . . . . . . . . .  C ADDR  1A1FH  
FSUB8. . . . . . . . . . . . . .  C ADDR  1A2AH  
FSUB81 . . . . . . . . . . . . .  C ADDR  1A2DH  
FSUB9. . . . . . . . . . . . . .  C ADDR  1A30H  
FTYPE. . . . . . . . . . . . . .    NUMB  0001H  
FUL1 . . . . . . . . . . . . . .  C ADDR  15B0H  
FULL . . . . . . . . . . . . . .  C ADDR  15A8H  
F_VAR. . . . . . . . . . . . . .  C ADDR  0619H  
F_VAR0 . . . . . . . . . . . . .  C ADDR  0620H  
F_VAR1 . . . . . . . . . . . . .  C ADDR  0636H  
F_VAR2 . . . . . . . . . . . . .  C ADDR  0643H  
G1 . . . . . . . . . . . . . . .  C ADDR  058FH  
G2 . . . . . . . . . . . . . . .  C ADDR  05A2H  
G3 . . . . . . . . . . . . . . .  C ADDR  05A6H  
G4 . . . . . . . . . . . . . . .  C ADDR  05A9H  
G5 . . . . . . . . . . . . . . .  C ADDR  05ACH  
BASIC52Q                                                                                                      PAGE 150

GC . . . . . . . . . . . . . . .  C ADDR  0ECDH  
GCI. . . . . . . . . . . . . . .  C ADDR  0ED5H  
GCI1 . . . . . . . . . . . . . .  C ADDR  0ED7H  
GCI11. . . . . . . . . . . . . .  C ADDR  0EDEH  
GETEND . . . . . . . . . . . . .  C ADDR  058AH  
GETLIN . . . . . . . . . . . . .  C ADDR  058CH  
GET_DIGIT_CHECK. . . . . . . . .  C ADDR  1FEBH  
GET_DPTR_CHARACTER . . . . . . .  C ADDR  1D5FH  
GET_NUM. . . . . . . . . . . . .  C ADDR  1957H  
GLN. . . . . . . . . . . . . . .  C ADDR  0AD1H  
GT1. . . . . . . . . . . . . . .  C ADDR  1CEAH  
GT11 . . . . . . . . . . . . . .  C ADDR  1CF2H  
GT12 . . . . . . . . . . . . . .  C ADDR  1CF5H  
GT2. . . . . . . . . . . . . . .  C ADDR  1D02H  
GTB. . . . . . . . . . . . . . .  X ADDR  0100H  
GTEST. . . . . . . . . . . . . .  C ADDR  1CDBH  
GTRD . . . . . . . . . . . . . .  B ADDR  0018H  
GTX. . . . . . . . . . . . . . .  C ADDR  1547H  
GTX1 . . . . . . . . . . . . . .  C ADDR  155AH  
GTYPE. . . . . . . . . . . . . .    NUMB  0002H  
HC1. . . . . . . . . . . . . . .  C ADDR  1CB1H  
HC11 . . . . . . . . . . . . . .  C ADDR  1CB4H  
HEX2X. . . . . . . . . . . . . .  C ADDR  1F3CH  NOT USED  
HEXDO1 . . . . . . . . . . . . .  C ADDR  1CA1H  
HEXDON . . . . . . . . . . . . .  C ADDR  1CA0H  
HEXOUT . . . . . . . . . . . . .  C ADDR  1F30H  
HEXSC1 . . . . . . . . . . . . .  C ADDR  1C8FH  
HEXSCAN. . . . . . . . . . . . .  C ADDR  1C89H  
HEX_CHECK. . . . . . . . . . . .  C ADDR  1CA9H  
HEX_CHECK1 . . . . . . . . . . .  C ADDR  1CAEH  
HMODE. . . . . . . . . . . . . .  B ADDR  0037H  
HOUT1. . . . . . . . . . . . . .  C ADDR  1F48H  
HOUTHI . . . . . . . . . . . . .  C ADDR  1F53H  
HOUTLO . . . . . . . . . . . . .  C ADDR  1F54H  
HS1. . . . . . . . . . . . . . .  C ADDR  1CA6H  
H_RET. . . . . . . . . . . . . .  C ADDR  196BH  
I2 . . . . . . . . . . . . . . .  C ADDR  123BH  
I21. . . . . . . . . . . . . . .  C ADDR  1247H  
IAN. . . . . . . . . . . . . . .  C ADDR  00F3H  
IAT. . . . . . . . . . . . . . .  C ADDR  090BH  
IAT1 . . . . . . . . . . . . . .  C ADDR  090EH  
IBCNT. . . . . . . . . . . . . .  X ADDR  0004H  
IBLK . . . . . . . . . . . . . .  C ADDR  193FH  
IBLK1. . . . . . . . . . . . . .  C ADDR  194EH  
IBLN . . . . . . . . . . . . . .  X ADDR  0005H  
IBUF . . . . . . . . . . . . . .  X ADDR  0007H  
ICLR . . . . . . . . . . . . . .  C ADDR  069AH  
ICLR1. . . . . . . . . . . . . .  C ADDR  069FH  
IE . . . . . . . . . . . . . . .  D ADDR  00A8H  PREDEFINED  
IFIX . . . . . . . . . . . . . .  C ADDR  1223H  
IFIXL. . . . . . . . . . . . . .  C ADDR  0E90H  
IGC. . . . . . . . . . . . . . .  C ADDR  0ECBH  
ILOOP. . . . . . . . . . . . . .  C ADDR  0813H  
ILOOP1 . . . . . . . . . . . . .  C ADDR  081FH  
IMOV . . . . . . . . . . . . . .  C ADDR  1566H  
IN2. . . . . . . . . . . . . . .  C ADDR  0DFDH  
IN2A . . . . . . . . . . . . . .  C ADDR  0E02H  
IN3. . . . . . . . . . . . . . .  C ADDR  0E0FH  
BASIC52Q                                                                                                      PAGE 151

IN3A . . . . . . . . . . . . . .  C ADDR  0E20H  
IN5. . . . . . . . . . . . . . .  C ADDR  0E40H  
IN6. . . . . . . . . . . . . . .  C ADDR  0E49H  
INBIT. . . . . . . . . . . . . .  B ADDR  001DH  
INC3210. . . . . . . . . . . . .  C ADDR  1576H  
INC3211. . . . . . . . . . . . .  C ADDR  157BH  
INC3212. . . . . . . . . . . . .  C ADDR  1580H  
INCH1. . . . . . . . . . . . . .  C ADDR  07AAH  
INCH11 . . . . . . . . . . . . .  C ADDR  07AFH  
INCH12 . . . . . . . . . . . . .  C ADDR  07B4H  
INCH13 . . . . . . . . . . . . .  C ADDR  07BBH  
INCHAR . . . . . . . . . . . . .  C ADDR  0791H  
INCHAR1. . . . . . . . . . . . .  C ADDR  0799H  
INCHAR2. . . . . . . . . . . . .  C ADDR  07A1H  
INC_AND_GET_DPTR_CHARACTER . . .  C ADDR  1D5EH  
INC_ASTKA. . . . . . . . . . . .  C ADDR  124FH  
INC_FP_EXP . . . . . . . . . . .  C ADDR  1B72H  
INERR. . . . . . . . . . . . . .  C ADDR  1D44H  
INL0 . . . . . . . . . . . . . .  C ADDR  06D6H  NOT USED  
INL1 . . . . . . . . . . . . . .  C ADDR  06DDH  
INL11. . . . . . . . . . . . . .  C ADDR  06E6H  
INL2 . . . . . . . . . . . . . .  C ADDR  06D3H  
INL2B. . . . . . . . . . . . . .  C ADDR  06ECH  
INL2B1 . . . . . . . . . . . . .  C ADDR  06F2H  
INL2B2 . . . . . . . . . . . . .  C ADDR  06F5H  
INL6 . . . . . . . . . . . . . .  C ADDR  06FEH  
INLINE . . . . . . . . . . . . .  C ADDR  06D8H  
INLOOP . . . . . . . . . . . . .  C ADDR  1CD0H  
INLPIK . . . . . . . . . . . . .  C ADDR  1CD8H  
INLX . . . . . . . . . . . . . .  C ADDR  06E8H  
INPROG . . . . . . . . . . . . .  B ADDR  0011H  
INP_B. . . . . . . . . . . . . .  B ADDR  0022H  
INS. . . . . . . . . . . . . . .  C ADDR  0103H  
INSR . . . . . . . . . . . . . .  C ADDR  1517H  
INSR1. . . . . . . . . . . . . .  C ADDR  1523H  
INTBIT . . . . . . . . . . . . .  B ADDR  0012H  
INTERR . . . . . . . . . . . . .  C ADDR  0F30H  
INTERR1. . . . . . . . . . . . .  C ADDR  0F32H  
INTERX . . . . . . . . . . . . .  C ADDR  0938H  
INTERX1. . . . . . . . . . . . .  C ADDR  093BH  
INTERX2. . . . . . . . . . . . .  C ADDR  0941H  
INTERX3. . . . . . . . . . . . .  C ADDR  0948H  
INTERX4. . . . . . . . . . . . .  C ADDR  094DH  
INTGER . . . . . . . . . . . . .  C ADDR  0F35H  
INTGRC . . . . . . . . . . . . .  B ADDR  0019H  NOT USED  
INTLOC . . . . . . . . . . . . .  X ADDR  0120H  
INTPEN . . . . . . . . . . . . .  B ADDR  0016H  
INTXAH . . . . . . . . . . . . .    NUMB  0042H  
INTXAL . . . . . . . . . . . . .    NUMB  0043H  
IP . . . . . . . . . . . . . . .  D ADDR  00B8H  PREDEFINED  
IPROGS . . . . . . . . . . . . .  X ADDR  012AH  NOT USED  
IRAMTOP. . . . . . . . . . . . .    NUMB  00FFH  
ISAV . . . . . . . . . . . . . .  B ADDR  002BH  
ISTA0. . . . . . . . . . . . . .  C ADDR  0950H  
ISTA01 . . . . . . . . . . . . .  C ADDR  095AH  
ISTA1. . . . . . . . . . . . . .  C ADDR  095CH  
ISTAT. . . . . . . . . . . . . .  C ADDR  08F8H  
ISTAT1 . . . . . . . . . . . . .  C ADDR  0900H  
BASIC52Q                                                                                                      PAGE 152

ISTAX. . . . . . . . . . . . . .  C ADDR  091CH  
ISTAX1 . . . . . . . . . . . . .  C ADDR  0921H  
ISTAY. . . . . . . . . . . . . .  C ADDR  0925H  
ISTAY1 . . . . . . . . . . . . .  C ADDR  0928H  
ISTAY2 . . . . . . . . . . . . .  C ADDR  092DH  
IST_CAL. . . . . . . . . . . . .  C ADDR  09E7H  
ITRAP. . . . . . . . . . . . . .  C ADDR  086AH  
ITRAP1 . . . . . . . . . . . . .  C ADDR  0872H  
ITRAP2 . . . . . . . . . . . . .  C ADDR  087AH  
ITRAP21. . . . . . . . . . . . .  C ADDR  087DH  NOT USED  
ITRAP3 . . . . . . . . . . . . .  C ADDR  0882H  
ITRET. . . . . . . . . . . . . .  C ADDR  0F40H  
I_DL . . . . . . . . . . . . . .  C ADDR  185BH  
I_DR . . . . . . . . . . . . . .  C ADDR  1902H  
I_L. . . . . . . . . . . . . . .  C ADDR  0849H  
I_PI . . . . . . . . . . . . . .  C ADDR  0E95H  
I_RET. . . . . . . . . . . . . .  C ADDR  1871H  
I_S. . . . . . . . . . . . . . .  C ADDR  0933H  
I_S1 . . . . . . . . . . . . . .  C ADDR  0936H  
I_T0 . . . . . . . . . . . . . .  B ADDR  0026H  
L20DPI . . . . . . . . . . . . .  C ADDR  0573H  
L31DPI . . . . . . . . . . . . .  C ADDR  05BAH  
LCLR . . . . . . . . . . . . . .  C ADDR  05E7H  
LDPTRI . . . . . . . . . . . . .  C ADDR  05B0H  
LD_A . . . . . . . . . . . . . .  C ADDR  0FE9H  
LD_T . . . . . . . . . . . . . .  C ADDR  0582H  
LEFT . . . . . . . . . . . . . .  C ADDR  1BF3H  
LEFT1. . . . . . . . . . . . . .  C ADDR  1BF5H  
LEFT2. . . . . . . . . . . . . .  C ADDR  1BF6H  
LEFT3. . . . . . . . . . . . . .  C ADDR  1BFDH  NOT USED  
LEFT5. . . . . . . . . . . . . .  C ADDR  1C1CH  
LEFTL. . . . . . . . . . . . . .  C ADDR  1C08H  
LEFTL1 . . . . . . . . . . . . .  C ADDR  1C1BH  
LF . . . . . . . . . . . . . . .    NUMB  000AH  
LIN1 . . . . . . . . . . . . . .  C ADDR  155CH  
LINE . . . . . . . . . . . . . .  C ADDR  14F0H  
LINE0. . . . . . . . . . . . . .  C ADDR  14EDH  
LINE1. . . . . . . . . . . . . .  C ADDR  150BH  
LINEB. . . . . . . . . . . . . .  B ADDR  0015H  
LINLEN . . . . . . . . . . . . .    NUMB  0049H  
LMOV . . . . . . . . . . . . . .  C ADDR  156DH  
LNTAB. . . . . . . . . . . . . .  C ADDR  16A9H  
LN_D . . . . . . . . . . . . . .  C ADDR  131BH  
LOAD1. . . . . . . . . . . . . .  C ADDR  19ADH  
LOAD2. . . . . . . . . . . . . .  C ADDR  19BDH  
LOAD21 . . . . . . . . . . . . .  C ADDR  19C5H  
LOAD22 . . . . . . . . . . . . .  C ADDR  19CAH  
LOAD23 . . . . . . . . . . . . .  C ADDR  19CEH  
LOAD25 . . . . . . . . . . . . .  C ADDR  19E3H  
LOAD7. . . . . . . . . . . . . .  C ADDR  1B93H  NOT USED  
LOADR1 . . . . . . . . . . . . .  C ADDR  1C7FH  
LOADR1_MANTISSA. . . . . . . . .  C ADDR  1C7BH  
LOAD_POINTERS. . . . . . . . . .  C ADDR  1C5EH  
LP . . . . . . . . . . . . . . .  B ADDR  0097H  
LPB. . . . . . . . . . . . . . .  B ADDR  0019H  
LTOUT1 . . . . . . . . . . . . .  C ADDR  074AH  
LTX. . . . . . . . . . . . . . .  C ADDR  1528H  
LTX1 . . . . . . . . . . . . . .  C ADDR  152FH  
BASIC52Q                                                                                                      PAGE 153

LTX2 . . . . . . . . . . . . . .  C ADDR  1543H  
L_RET. . . . . . . . . . . . . .  C ADDR  0EEBH  
MDES1. . . . . . . . . . . . . .  C ADDR  1C6AH  
MEMTOP . . . . . . . . . . . . .  X ADDR  010AH  
MILLIV . . . . . . . . . . . . .    NUMB  0047H  
MNL0 . . . . . . . . . . . . . .  C ADDR  1C3EH  
MNL1 . . . . . . . . . . . . . .  C ADDR  1C50H  
MNLOOP . . . . . . . . . . . . .  C ADDR  1C35H  
MOUT . . . . . . . . . . . . . .  C ADDR  1E8EH  
MSIGN. . . . . . . . . . . . . .  B ADDR  0078H  
MT1. . . . . . . . . . . . . . .    NUMB  0045H  
MT2. . . . . . . . . . . . . . .    NUMB  0046H  
MT_ALL . . . . . . . . . . . . .  X ADDR  0108H  
MU1. . . . . . . . . . . . . . .  C ADDR  136BH  NOT USED  
MUL11. . . . . . . . . . . . . .  C ADDR  1EEFH  NOT USED  
MULNUM . . . . . . . . . . . . .  C ADDR  1ED6H  
MULNUM10 . . . . . . . . . . . .  C ADDR  1ED3H  
MULX . . . . . . . . . . . . . .  C ADDR  1EF6H  
MUL_DIV_EXP_AND_SIGN . . . . . .  C ADDR  1C68H  
MUL_NIBBLE . . . . . . . . . . .  C ADDR  1C2BH  
MUL_UNDERFLOW. . . . . . . . . .  B ADDR  0028H  
N4 . . . . . . . . . . . . . . .  C ADDR  0BC6H  
NL1. . . . . . . . . . . . . . .  C ADDR  1E6EH  
NLC. . . . . . . . . . . . . . .  C ADDR  077AH  
NLC1 . . . . . . . . . . . . . .  C ADDR  077FH  
NLC2 . . . . . . . . . . . . . .  C ADDR  0782H  
NLC3 . . . . . . . . . . . . . .  C ADDR  0786H  
NMARK_L. . . . . . . . . . . . .  C ADDR  1A96H  
NMOV . . . . . . . . . . . . . .  C ADDR  159DH  
NMOV1. . . . . . . . . . . . . .  C ADDR  15A7H  
NOGO . . . . . . . . . . . . . .  C ADDR  056EH  
NOPASS . . . . . . . . . . . . .  C ADDR  0F21H  
NOROM. . . . . . . . . . . . . .  C ADDR  1FC9H  
NO_C . . . . . . . . . . . . . .  B ADDR  0030H  
NR1. . . . . . . . . . . . . . .  C ADDR  1E77H  
NTWO . . . . . . . . . . . . . .  C ADDR  1161H  
NULL . . . . . . . . . . . . . .    NUMB  0000H  
NULLCT . . . . . . . . . . . . .    NUMB  0015H  
NUMC . . . . . . . . . . . . . .  C ADDR  0C19H  
NUMC1. . . . . . . . . . . . . .  C ADDR  0C22H  
NUM_LT . . . . . . . . . . . . .  C ADDR  1E67H  
NUM_RT . . . . . . . . . . . . .  C ADDR  1E70H  
ONE. . . . . . . . . . . . . . .  C ADDR  0E8EH  
ON_ERR . . . . . . . . . . . . .  B ADDR  0013H  
OOPS . . . . . . . . . . . . . .  C ADDR  0D3AH  
OPBOL. . . . . . . . . . . . . .  C ADDR  00CFH  
OPTAB. . . . . . . . . . . . . .  C ADDR  0057H  
OTI. . . . . . . . . . . . . . .  B ADDR  0014H  
OTS. . . . . . . . . . . . . . .  B ADDR  0010H  
OTST . . . . . . . . . . . . . .  C ADDR  1938H  
OTST1. . . . . . . . . . . . . .  C ADDR  193EH  
OUTPUT . . . . . . . . . . . . .  C ADDR  196CH  
OUTR . . . . . . . . . . . . . .  C ADDR  1E5CH  
OUTR0. . . . . . . . . . . . . .  C ADDR  1E4BH  
OV . . . . . . . . . . . . . . .  B ADDR  00D2H  PREDEFINED  
OVE1 . . . . . . . . . . . . . .  C ADDR  1B98H  
OVERFLOW . . . . . . . . . . . .    NUMB  0001H  
OVERFLOW_AND_EXIT. . . . . . . .  C ADDR  1B94H  
BASIC52Q                                                                                                      PAGE 154

P1 . . . . . . . . . . . . . . .  D ADDR  0090H  PREDEFINED  
P2 . . . . . . . . . . . . . . .  D ADDR  00A0H  PREDEFINED  
P3 . . . . . . . . . . . . . . .  D ADDR  00B0H  PREDEFINED  
PACK . . . . . . . . . . . . . .  C ADDR  1B11H  
PACK0. . . . . . . . . . . . . .  C ADDR  1B1AH  
PACK1. . . . . . . . . . . . . .  C ADDR  1B1BH  NOT USED  
PACK11 . . . . . . . . . . . . .  C ADDR  1B23H  
PACK2. . . . . . . . . . . . . .  C ADDR  1B25H  
PACK3. . . . . . . . . . . . . .  C ADDR  1B37H  
PACK31 . . . . . . . . . . . . .  C ADDR  1B38H  
PACK4. . . . . . . . . . . . . .  C ADDR  1B4FH  
PAREN_INT. . . . . . . . . . . .  C ADDR  0E97H  
PCL. . . . . . . . . . . . . . .  C ADDR  1439H  
PCON . . . . . . . . . . . . . .  D ADDR  0087H  PREDEFINED  
PCON0. . . . . . . . . . . . . .    NUMB  0087H  NOT USED  
PG1. . . . . . . . . . . . . . .  C ADDR  04BDH  
PG10 . . . . . . . . . . . . . .  C ADDR  04BCH  
PG101. . . . . . . . . . . . . .  C ADDR  04B5H  
PG2. . . . . . . . . . . . . . .  C ADDR  04C3H  
PG31 . . . . . . . . . . . . . .  C ADDR  04F7H  
PG4. . . . . . . . . . . . . . .  C ADDR  04C0H  
PG5. . . . . . . . . . . . . . .  C ADDR  04CBH  
PG6. . . . . . . . . . . . . . .  C ADDR  04D0H  
PG7. . . . . . . . . . . . . . .  C ADDR  04D9H  
PG8. . . . . . . . . . . . . . .  C ADDR  046FH  
PGR. . . . . . . . . . . . . . .  C ADDR  04B3H  
PGU. . . . . . . . . . . . . . .  C ADDR  04F8H  
PHEAD. . . . . . . . . . . . . .    NUMB  0016H  
PIE. . . . . . . . . . . . . . .  C ADDR  17FEH  
PIPI . . . . . . . . . . . . . .  C ADDR  147FH  
PLNEXP . . . . . . . . . . . . .  C ADDR  1430H  
PLOOP. . . . . . . . . . . . . .  C ADDR  1B51H  
PLUS_MINUS_TEST. . . . . . . . .  C ADDR  1D65H  
PMT1 . . . . . . . . . . . . . .  C ADDR  1D79H  
PMT11. . . . . . . . . . . . . .  C ADDR  1D6AH  
PMT12. . . . . . . . . . . . . .  C ADDR  1D6FH  
PMT13. . . . . . . . . . . . . .  C ADDR  1D74H  
PMT2 . . . . . . . . . . . . . .  C ADDR  1D77H  
PMT3 . . . . . . . . . . . . . .  C ADDR  1D78H  
PMTOP. . . . . . . . . . . . . .  C ADDR  164FH  
PMTOP1 . . . . . . . . . . . . .  C ADDR  1652H  
PN0. . . . . . . . . . . . . . .  C ADDR  06C3H  
PN01 . . . . . . . . . . . . . .  C ADDR  06CCH  
PN02 . . . . . . . . . . . . . .  C ADDR  06CDH  
PN1. . . . . . . . . . . . . . .  C ADDR  06B9H  
POLY1. . . . . . . . . . . . . .  C ADDR  11A3H  
POLYC. . . . . . . . . . . . . .  C ADDR  119BH  
POPAS. . . . . . . . . . . . . .  C ADDR  0FD3H  
POP_AND_EXIT . . . . . . . . . .  C ADDR  19A5H  
POP_T1 . . . . . . . . . . . . .  C ADDR  1448H  
POSNM1 . . . . . . . . . . . . .  C ADDR  1D24H  NOT USED  
POSNUM . . . . . . . . . . . . .  C ADDR  1D21H  
POTWO. . . . . . . . . . . . . .  C ADDR  1192H  
PP . . . . . . . . . . . . . . .  C ADDR  15BAH  
PPL. . . . . . . . . . . . . . .  C ADDR  15CDH  
PPL1 . . . . . . . . . . . . . .  C ADDR  15D2H  
PPL2 . . . . . . . . . . . . . .  C ADDR  15D7H  
PPL21. . . . . . . . . . . . . .  C ADDR  15DCH  
BASIC52Q                                                                                                      PAGE 155

PPL22. . . . . . . . . . . . . .  C ADDR  15E1H  
PPL3 . . . . . . . . . . . . . .  C ADDR  15F0H  
PPL4 . . . . . . . . . . . . . .  C ADDR  15F5H  
PPL41. . . . . . . . . . . . . .  C ADDR  15FEH  
PPL6 . . . . . . . . . . . . . .  C ADDR  1622H  
PPL61. . . . . . . . . . . . . .  C ADDR  162BH  
PPL7 . . . . . . . . . . . . . .  C ADDR  162FH  
PPL71. . . . . . . . . . . . . .  C ADDR  1630H  
PPL9 . . . . . . . . . . . . . .  C ADDR  1643H  
PPL91. . . . . . . . . . . . . .  C ADDR  1644H  
PPLX . . . . . . . . . . . . . .  C ADDR  1609H  
PPLY . . . . . . . . . . . . . .  C ADDR  1616H  
PPLY1. . . . . . . . . . . . . .  C ADDR  161BH  
PPX. . . . . . . . . . . . . . .  C ADDR  15E5H  
PRET . . . . . . . . . . . . . .  C ADDR  1B71H  
PRNTCR . . . . . . . . . . . . .  C ADDR  06C1H  
PROGS. . . . . . . . . . . . . .  X ADDR  0128H  
PSTART . . . . . . . . . . . . .    NUMB  0200H  
PSW. . . . . . . . . . . . . . .  D ADDR  00D0H  PREDEFINED  
PTIME. . . . . . . . . . . . . .  C ADDR  0709H  
PUSHAS . . . . . . . . . . . . .  C ADDR  0FDDH  
PUSHC. . . . . . . . . . . . . .  C ADDR  1433H  
PUSHCS . . . . . . . . . . . . .  C ADDR  0BB1H  
PUSHCS1. . . . . . . . . . . . .  C ADDR  0BB6H  
PUSHCS2. . . . . . . . . . . . .  C ADDR  0BBCH  
PUSHR2R0 . . . . . . . . . . . .  C ADDR  1CB6H  
PUSH_ONE . . . . . . . . . . . .  C ADDR  1443H  
PUSH_T1. . . . . . . . . . . . .  C ADDR  144FH  
PUSH_T11 . . . . . . . . . . . .  C ADDR  1451H  
PUSH_T12 . . . . . . . . . . . .  C ADDR  1453H  
P_E. . . . . . . . . . . . . . .  C ADDR  0CDFH  
P_T2 . . . . . . . . . . . . . .  C ADDR  1456H  
P_Z. . . . . . . . . . . . . . .  C ADDR  1375H  
R0B0 . . . . . . . . . . . . . .    NUMB  0000H  
R1B0 . . . . . . . . . . . . . .    NUMB  0001H  
R2B0 . . . . . . . . . . . . . .    NUMB  0002H  
R3B0 . . . . . . . . . . . . . .    NUMB  0003H  
R3CK . . . . . . . . . . . . . .  C ADDR  09D5H  
R4B0 . . . . . . . . . . . . . .    NUMB  0004H  
R5B0 . . . . . . . . . . . . . .    NUMB  0005H  
R6B0 . . . . . . . . . . . . . .    NUMB  0006H  
R76S . . . . . . . . . . . . . .  C ADDR  0DEFH  
R7B0 . . . . . . . . . . . . . .    NUMB  0007H  
RC1. . . . . . . . . . . . . . .  C ADDR  066FH  
RC2. . . . . . . . . . . . . . .  C ADDR  0673H  
RCAPH2 . . . . . . . . . . . . .    NUMB  00CBH  
RCAPL2 . . . . . . . . . . . . .    NUMB  00CAH  
RCASB. . . . . . . . . . . . . .  C ADDR  1ECFH  
RCELL. . . . . . . . . . . . . .  X ADDR  010CH  
RCL. . . . . . . . . . . . . . .  C ADDR  0885H  
RCL1 . . . . . . . . . . . . . .  C ADDR  088AH  
RCL2 . . . . . . . . . . . . . .  C ADDR  0892H  
RCL3 . . . . . . . . . . . . . .  C ADDR  0898H  
RCL4 . . . . . . . . . . . . . .  C ADDR  089EH  
RCL5 . . . . . . . . . . . . . .  C ADDR  08A4H  
RCL6 . . . . . . . . . . . . . .  C ADDR  08AAH  
RCLEAR . . . . . . . . . . . . .  C ADDR  0664H  
RDYS . . . . . . . . . . . . . .  C ADDR  00FDH  
BASIC52Q                                                                                                      PAGE 156

RECIP. . . . . . . . . . . . . .  C ADDR  127CH  
RETBIT . . . . . . . . . . . . .  B ADDR  0025H  
RET_X. . . . . . . . . . . . . .  C ADDR  1D46H  
RF1. . . . . . . . . . . . . . .  C ADDR  055EH  
RF2. . . . . . . . . . . . . . .  C ADDR  0565H  
RF3. . . . . . . . . . . . . . .  C ADDR  056BH  
RFX. . . . . . . . . . . . . . .  C ADDR  0564H  
RI . . . . . . . . . . . . . . .  B ADDR  0098H  PREDEFINED  
RIGHT. . . . . . . . . . . . . .  C ADDR  1BBBH  
RIGHT1 . . . . . . . . . . . . .  C ADDR  1BBDH  NOT USED  
RIGHT2 . . . . . . . . . . . . .  C ADDR  1BBEH  
RIGHT3 . . . . . . . . . . . . .  C ADDR  1BC5H  NOT USED  
RIGHT5 . . . . . . . . . . . . .  C ADDR  1BE4H  
RIGHTL . . . . . . . . . . . . .  C ADDR  1BD1H  
RIGHTL1. . . . . . . . . . . . .  C ADDR  1BE3H  
RL1. . . . . . . . . . . . . . .  C ADDR  0AF4H  
RLINE. . . . . . . . . . . . . .  C ADDR  0AF2H  
RMOV . . . . . . . . . . . . . .  C ADDR  1581H  
RO1. . . . . . . . . . . . . . .  C ADDR  0543H  
RO11 . . . . . . . . . . . . . .  C ADDR  054EH  
ROMADR . . . . . . . . . . . . .    NUMB  8000H  
ROMFD. . . . . . . . . . . . . .  C ADDR  055BH  
ROM_P. . . . . . . . . . . . . .  C ADDR  06AFH  
ROM_P1 . . . . . . . . . . . . .  C ADDR  06B7H  
ROUT . . . . . . . . . . . . . .  C ADDR  1E92H  
RROM . . . . . . . . . . . . . .  C ADDR  07C0H  
RS0. . . . . . . . . . . . . . .  B ADDR  00D3H  PREDEFINED  
RSUB1. . . . . . . . . . . . . .  C ADDR  1EF9H  
RSUB2. . . . . . . . . . . . . .  C ADDR  1F23H  
RSUB3. . . . . . . . . . . . . .  C ADDR  1F2DH  
RTST . . . . . . . . . . . . . .  C ADDR  0AC7H  
RTST1. . . . . . . . . . . . . .  C ADDR  0AD0H  
RTXAH. . . . . . . . . . . . . .    NUMB  0012H  
RTXAL. . . . . . . . . . . . . .    NUMB  0010H  
RV . . . . . . . . . . . . . . .  C ADDR  11B5H  
S0RELH . . . . . . . . . . . . .    NUMB  00BAH  NOT USED  
S0RELL . . . . . . . . . . . . .    NUMB  00AAH  NOT USED  
S13. . . . . . . . . . . . . . .  C ADDR  0D3DH  
S20DP. . . . . . . . . . . . . .  C ADDR  1424H  
S31DP. . . . . . . . . . . . . .  C ADDR  0605H  
S31DP2 . . . . . . . . . . . . .  C ADDR  0603H  
S31L . . . . . . . . . . . . . .  C ADDR  170EH  
SA . . . . . . . . . . . . . . .  C ADDR  0D1BH  
SA1. . . . . . . . . . . . . . .  C ADDR  0D22H  
SA2. . . . . . . . . . . . . . .  C ADDR  0D26H  
SAFE_MOD . . . . . . . . . . . .    NUMB  00A1H  
SAVE_T . . . . . . . . . . . . .    NUMB  004AH  
SBAUD. . . . . . . . . . . . . .  C ADDR  16F9H  
SBUF . . . . . . . . . . . . . .  D ADDR  0099H  PREDEFINED  
SCALL. . . . . . . . . . . . . .  C ADDR  0E63H  
SCLOCK . . . . . . . . . . . . .  C ADDR  1918H  
SCLR . . . . . . . . . . . . . .  C ADDR  068FH  
SCON . . . . . . . . . . . . . .  D ADDR  0098H  PREDEFINED  
SC_R . . . . . . . . . . . . . .  C ADDR  192DH  
SD0. . . . . . . . . . . . . . .  C ADDR  0D5CH  
SD01 . . . . . . . . . . . . . .  C ADDR  0D59H  
SDI. . . . . . . . . . . . . . .  C ADDR  0DBCH  
SDIMX. . . . . . . . . . . . . .  C ADDR  0D61H  
BASIC52Q                                                                                                      PAGE 157

SE0. . . . . . . . . . . . . . .  C ADDR  0CBEH  
SE1. . . . . . . . . . . . . . .  C ADDR  199FH  
SERR1. . . . . . . . . . . . . .  C ADDR  18B3H  
SETFSYS. . . . . . . . . . . . .  C ADDR  0437H  
SETREG . . . . . . . . . . . . .  C ADDR  1253H  
SETREG1. . . . . . . . . . . . .  C ADDR  1254H  
SF2. . . . . . . . . . . . . . .  C ADDR  0A53H  
SF21 . . . . . . . . . . . . . .  C ADDR  0A56H  
SF3. . . . . . . . . . . . . . .  C ADDR  0A72H  
SFOR . . . . . . . . . . . . . .  C ADDR  0A3CH  
SGOSUB . . . . . . . . . . . . .  C ADDR  0B2DH  
SGOTO. . . . . . . . . . . . . .  C ADDR  0AAAH  
SGS0 . . . . . . . . . . . . . .  C ADDR  0B2FH  
SGS1 . . . . . . . . . . . . . .  C ADDR  0B35H  
SGT1 . . . . . . . . . . . . . .  C ADDR  0AACH  
SGT11. . . . . . . . . . . . . .  C ADDR  0AB7H  
SGT2 . . . . . . . . . . . . . .  C ADDR  0AB9H  
SGT21. . . . . . . . . . . . . .  C ADDR  0AC1H  
SIF. . . . . . . . . . . . . . .  C ADDR  0A86H  
SIF1 . . . . . . . . . . . . . .  C ADDR  0A90H  
SIGNS_DIFFERENT. . . . . . . . .  C ADDR  1A53H  
SIN0 . . . . . . . . . . . . . .  C ADDR  11FCH  
SINOUT . . . . . . . . . . . . .  C ADDR  1E8BH  
SINPUT . . . . . . . . . . . . .  C ADDR  0DF5H  
SINTAB . . . . . . . . . . . . .  C ADDR  16CEH  
SLET . . . . . . . . . . . . . .  C ADDR  096EH  
SLET0. . . . . . . . . . . . . .  C ADDR  09C2H  
SLET1. . . . . . . . . . . . . .  C ADDR  09C6H  
SLET2. . . . . . . . . . . . . .  C ADDR  09C8H  
SM . . . . . . . . . . . . . . .  C ADDR  0C5FH  
SM01 . . . . . . . . . . . . . .  C ADDR  0C6DH  
SM02 . . . . . . . . . . . . . .  C ADDR  0C71H  
SNEXT. . . . . . . . . . . . . .  C ADDR  0B5FH  
SONERR . . . . . . . . . . . . .  C ADDR  140FH  
SONEXT . . . . . . . . . . . . .  C ADDR  1419H  
SOT. . . . . . . . . . . . . . .  C ADDR  0E56H  
SOUT . . . . . . . . . . . . . .  C ADDR  1E9AH  
SOUT1. . . . . . . . . . . . . .  C ADDR  1E9CH  
SOUT_1 . . . . . . . . . . . . .  C ADDR  1F46H  
SP . . . . . . . . . . . . . . .  D ADDR  0081H  PREDEFINED  
SP0. . . . . . . . . . . . . . .  C ADDR  0C3CH  
SP1. . . . . . . . . . . . . . .  C ADDR  0C43H  
SP2. . . . . . . . . . . . . . .  C ADDR  0C3FH  
SP4. . . . . . . . . . . . . . .  C ADDR  0C47H  NOT USED  
SP6. . . . . . . . . . . . . . .  C ADDR  0C52H  
SP7. . . . . . . . . . . . . . .  C ADDR  0C57H  
SP8. . . . . . . . . . . . . . .  C ADDR  0C75H  
SP9. . . . . . . . . . . . . . .  C ADDR  0CD7H  
SP9A . . . . . . . . . . . . . .  C ADDR  0CDEH  
SPACE7 . . . . . . . . . . . . .  C ADDR  1E78H  
SPEOP. . . . . . . . . . . . . .  C ADDR  09D9H  
SPEOP1 . . . . . . . . . . . . .  C ADDR  09DDH  
SPH0 . . . . . . . . . . . . . .  C ADDR  0C29H  
SPH1 . . . . . . . . . . . . . .  C ADDR  0C2BH  
SPINT. . . . . . . . . . . . . .  B ADDR  001FH  
SPOP . . . . . . . . . . . . . .  C ADDR  0A7DH  
SPOP1. . . . . . . . . . . . . .  C ADDR  0A85H  
SPRINT . . . . . . . . . . . . .  C ADDR  0C2DH  
BASIC52Q                                                                                                      PAGE 158

SPRINT1. . . . . . . . . . . . .  C ADDR  0C31H  
SPRINT2. . . . . . . . . . . . .  C ADDR  0C38H  
SPSAV. . . . . . . . . . . . . .    NUMB  003EH  
SPUSH. . . . . . . . . . . . . .  C ADDR  0A76H  
SPV. . . . . . . . . . . . . . .  X ADDR  0124H  
SP_H . . . . . . . . . . . . . .    NUMB  004BH  
SP_L . . . . . . . . . . . . . .    NUMB  004CH  
SQ . . . . . . . . . . . . . . .  C ADDR  0C7CH  
SQR1 . . . . . . . . . . . . . .  C ADDR  12A3H  
SQR2 . . . . . . . . . . . . . .  C ADDR  12AAH  
SQR4 . . . . . . . . . . . . . .  C ADDR  12ADH  
SQR41. . . . . . . . . . . . . .  C ADDR  12BEH  
SQ_ERR . . . . . . . . . . . . .  C ADDR  128AH  
SR0. . . . . . . . . . . . . . .  C ADDR  0B14H  
SR01 . . . . . . . . . . . . . .  C ADDR  0B24H  
SRD. . . . . . . . . . . . . . .  C ADDR  0BE9H  
SRD0 . . . . . . . . . . . . . .  C ADDR  0BE5H  
SRD1 . . . . . . . . . . . . . .  C ADDR  0BF2H  
SRD2 . . . . . . . . . . . . . .  C ADDR  0BF4H  
SRD21. . . . . . . . . . . . . .  C ADDR  0BFEH  
SRD4 . . . . . . . . . . . . . .  C ADDR  0BFFH  
SRD5 . . . . . . . . . . . . . .  C ADDR  0C06H  
SRD51. . . . . . . . . . . . . .  C ADDR  0C09H  
SRD6 . . . . . . . . . . . . . .  C ADDR  0C11H  
SREAD. . . . . . . . . . . . . .  C ADDR  0BE3H  
SRESTR . . . . . . . . . . . . .  C ADDR  0BCEH  
SRESTR1. . . . . . . . . . . . .  C ADDR  0BD0H  
SRETI. . . . . . . . . . . . . .  C ADDR  0B0EH  
SRETRN . . . . . . . . . . . . .  C ADDR  0B10H  
SRT. . . . . . . . . . . . . . .  C ADDR  1219H  
SS . . . . . . . . . . . . . . .  C ADDR  0D12H  
SS7. . . . . . . . . . . . . . .  C ADDR  1E89H  
SSOOP. . . . . . . . . . . . . .  C ADDR  099DH  
SSTOP. . . . . . . . . . . . . .  C ADDR  0858H  
SSTOP0 . . . . . . . . . . . . .  C ADDR  0860H  
STACKTP. . . . . . . . . . . . .    NUMB  00FEH  
STATD. . . . . . . . . . . . . .  C ADDR  0123H  
STDIG. . . . . . . . . . . . . .  C ADDR  1D38H  
STDIG1 . . . . . . . . . . . . .  C ADDR  1D47H  
STEROT . . . . . . . . . . . . .  C ADDR  070FH  
STESIZ . . . . . . . . . . . . .    NUMB  0009H  
STJ. . . . . . . . . . . . . . .  C ADDR  0020H  
STK. . . . . . . . . . . . . . .  C ADDR  0041H  
STONE. . . . . . . . . . . . . .  C ADDR  1686H  
STONE1 . . . . . . . . . . . . .  C ADDR  168BH  
STOPBIT. . . . . . . . . . . . .  B ADDR  0020H  
STORE2 . . . . . . . . . . . . .  C ADDR  1B69H  
STORE_ALIGN_TEST_AND_EXIT. . . .  C ADDR  1B63H  
STP. . . . . . . . . . . . . . .  C ADDR  00EEH  
STQ. . . . . . . . . . . . . . .  C ADDR  0033H  
STRING . . . . . . . . . . . . .  C ADDR  060CH  
STRIP. . . . . . . . . . . . . .  C ADDR  11DAH  
STR_AL . . . . . . . . . . . . .  X ADDR  0122H  
STS. . . . . . . . . . . . . . .  C ADDR  003EH  
STU. . . . . . . . . . . . . . .  C ADDR  0044H  
ST_A . . . . . . . . . . . . . .  C ADDR  0FE5H  
ST_ALL . . . . . . . . . . . . .  X ADDR  0106H  
SUBLP. . . . . . . . . . . . . .  C ADDR  19FBH  
BASIC52Q                                                                                                      PAGE 159

SUI. . . . . . . . . . . . . . .  C ADDR  192EH  
SUNTIL . . . . . . . . . . . . .  C ADDR  0B01H  
SUO. . . . . . . . . . . . . . .  C ADDR  1933H  
SWAP_AND_EXIT. . . . . . . . . .  C ADDR  199BH  NOT USED  
SWAP_ASTKA . . . . . . . . . . .  C ADDR  145AH  
SWHILE . . . . . . . . . . . . .  C ADDR  0AFCH  
SX . . . . . . . . . . . . . . .  C ADDR  0C81H  
SX1. . . . . . . . . . . . . . .  C ADDR  0C97H  
S_0. . . . . . . . . . . . . . .  C ADDR  0982H  
S_1. . . . . . . . . . . . . . .  C ADDR  09B2H  
S_11 . . . . . . . . . . . . . .  C ADDR  09BAH  
S_3. . . . . . . . . . . . . . .  C ADDR  0991H  
S_4. . . . . . . . . . . . . . .  C ADDR  099FH  
S_41 . . . . . . . . . . . . . .  C ADDR  09A6H  
S_5. . . . . . . . . . . . . . .  C ADDR  09ADH  
S_C. . . . . . . . . . . . . . .  C ADDR  0EBFH  
S_C_1. . . . . . . . . . . . . .  C ADDR  0E72H  
S_DO . . . . . . . . . . . . . .  C ADDR  0F05H  
S_E. . . . . . . . . . . . . . .  C ADDR  098CH  
S_L. . . . . . . . . . . . . . .  C ADDR  1461H  
S_LEN. . . . . . . . . . . . . .    NUMB  003FH  
S_N. . . . . . . . . . . . . . .  C ADDR  1FD3H  
S_ON . . . . . . . . . . . . . .  C ADDR  0CEBH  
S_WU . . . . . . . . . . . . . .  C ADDR  0B03H  
T2CON. . . . . . . . . . . . . .    NUMB  00C8H  
T2MOD. . . . . . . . . . . . . .    NUMB  00C9H  
TB . . . . . . . . . . . . . . .  C ADDR  15B5H  
TBR. . . . . . . . . . . . . . .  C ADDR  1599H  
TBYTE. . . . . . . . . . . . . .  C ADDR  1596H  
TCON . . . . . . . . . . . . . .  D ADDR  0088H  PREDEFINED  
TEMP1. . . . . . . . . . . . . .    NUMB  000BH  
TEMP2. . . . . . . . . . . . . .    NUMB  000CH  
TEMP3. . . . . . . . . . . . . .    NUMB  000DH  
TEMP4. . . . . . . . . . . . . .    NUMB  000EH  
TEMP5. . . . . . . . . . . . . .    NUMB  000FH  
TEMPD. . . . . . . . . . . . . .  C ADDR  1854H  
TEMP_COMP. . . . . . . . . . . .  C ADDR  131CH  
TEROT. . . . . . . . . . . . . .  C ADDR  0711H  
TEROT01. . . . . . . . . . . . .  C ADDR  0717H  
TEROT02. . . . . . . . . . . . .  C ADDR  071EH  
TEROT03. . . . . . . . . . . . .  C ADDR  0727H  
TEROT04. . . . . . . . . . . . .  C ADDR  072FH  
TEROT1 . . . . . . . . . . . . .  C ADDR  0766H  
TEROT11. . . . . . . . . . . . .  C ADDR  076CH  
TEROT2 . . . . . . . . . . . . .  C ADDR  0773H  
TEST_USER. . . . . . . . . . . .  C ADDR  17E0H  
TF1. . . . . . . . . . . . . . .  B ADDR  008FH  PREDEFINED  
TH0. . . . . . . . . . . . . . .  D ADDR  008CH  PREDEFINED  
TH1. . . . . . . . . . . . . . .  D ADDR  008DH  PREDEFINED  
TH2. . . . . . . . . . . . . . .    NUMB  00CDH  
THREE. . . . . . . . . . . . . .  C ADDR  0E78H  
TI . . . . . . . . . . . . . . .  B ADDR  0099H  PREDEFINED  
TIMER_LOAD . . . . . . . . . . .  C ADDR  052DH  
TIMER_LOAD1. . . . . . . . . . .  C ADDR  052FH  
TIV. . . . . . . . . . . . . . .  X ADDR  0126H  
TL0. . . . . . . . . . . . . . .  D ADDR  008AH  PREDEFINED  
TL1. . . . . . . . . . . . . . .  D ADDR  008BH  PREDEFINED  
TL2. . . . . . . . . . . . . . .    NUMB  00CCH  
BASIC52Q                                                                                                      PAGE 160

TMOD . . . . . . . . . . . . . .  D ADDR  0089H  PREDEFINED  
TMR0 . . . . . . . . . . . . . .    NUMB  00C8H  
TMR1 . . . . . . . . . . . . . .    NUMB  00C9H  
TMR2 . . . . . . . . . . . . . .    NUMB  00CAH  
TM_TOP . . . . . . . . . . . . .  X ADDR  012CH  
TOKTAB . . . . . . . . . . . . .  C ADDR  0175H  
TR . . . . . . . . . . . . . . .  C ADDR  1913H  
TR0. . . . . . . . . . . . . . .  B ADDR  008CH  PREDEFINED  
TR1. . . . . . . . . . . . . . .  B ADDR  008EH  PREDEFINED  
TRC2 . . . . . . . . . . . . . .    NUMB  00CEH  
TT2C . . . . . . . . . . . . . .    NUMB  00CBH  
TTC. . . . . . . . . . . . . . .    NUMB  00CCH  
TTIME. . . . . . . . . . . . . .  C ADDR  1167H  
TTM. . . . . . . . . . . . . . .    NUMB  00CDH  
TVH. . . . . . . . . . . . . . .    NUMB  0048H  
TVL. . . . . . . . . . . . . . .    NUMB  0049H  
TWO. . . . . . . . . . . . . . .  C ADDR  0E85H  
TWOL . . . . . . . . . . . . . .  C ADDR  14A1H  
TWO_EX . . . . . . . . . . . . .  C ADDR  14B3H  
TWO_EY . . . . . . . . . . . . .  C ADDR  14B4H  
TWO_R2 . . . . . . . . . . . . .  C ADDR  14B1H  
TXAH . . . . . . . . . . . . . .    NUMB  000AH  
TXAL . . . . . . . . . . . . . .    NUMB  0008H  
TXX. . . . . . . . . . . . . . .  C ADDR  075FH  
T_1. . . . . . . . . . . . . . .  C ADDR  073AH  
T_ADD. . . . . . . . . . . . . .    NUMB  00E3H  
T_ASC. . . . . . . . . . . . . .    NUMB  00D1H  
T_BIT. . . . . . . . . . . . . .  B ADDR  0092H  
T_BUF. . . . . . . . . . . . . .  C ADDR  176CH  
T_CHR. . . . . . . . . . . . . .    NUMB  00D3H  
T_CMND . . . . . . . . . . . . .    NUMB  00F0H  
T_CMP. . . . . . . . . . . . . .  C ADDR  07E3H  
T_CR . . . . . . . . . . . . . .    NUMB  00AAH  
T_DATA . . . . . . . . . . . . .    NUMB  009CH  
T_DIR. . . . . . . . . . . . . .    NUMB  0090H  
T_DP . . . . . . . . . . . . . .  C ADDR  0EB8H  
T_ELSE . . . . . . . . . . . . .    NUMB  00A8H  
T_EQU. . . . . . . . . . . . . .    NUMB  00EAH  
T_F1 . . . . . . . . . . . . . .  C ADDR  0A9EH  
T_GOSB . . . . . . . . . . . . .    NUMB  009FH  
T_GOTO . . . . . . . . . . . . .    NUMB  0083H  
T_HH . . . . . . . . . . . . . .    NUMB  0040H  
T_IE . . . . . . . . . . . . . .    NUMB  00C6H  
T_IP . . . . . . . . . . . . . .    NUMB  00C7H  
T_L. . . . . . . . . . . . . . .  C ADDR  196CH  
T_LAST . . . . . . . . . . . . .    NUMB  00A4H  
T_LL . . . . . . . . . . . . . .    NUMB  0041H  
T_LPAR . . . . . . . . . . . . .    NUMB  00E0H  
T_MTOP . . . . . . . . . . . . .    NUMB  00C4H  
T_NEG. . . . . . . . . . . . . .    NUMB  00E9H  
T_P1 . . . . . . . . . . . . . .    NUMB  00CFH  
T_PC . . . . . . . . . . . . . .    NUMB  00D0H  
T_REM. . . . . . . . . . . . . .    NUMB  0096H  
T_SPC. . . . . . . . . . . . . .    NUMB  00A9H  
T_STEP . . . . . . . . . . . . .    NUMB  00A7H  
T_STOP . . . . . . . . . . . . .    NUMB  0090H  
T_SUB. . . . . . . . . . . . . .    NUMB  00E5H  
T_T. . . . . . . . . . . . . . .  C ADDR  08B0H  
BASIC52Q                                                                                                      PAGE 161

T_T01. . . . . . . . . . . . . .  C ADDR  08BEH  
T_T1 . . . . . . . . . . . . . .  C ADDR  08CEH  
T_T2 . . . . . . . . . . . . . .  C ADDR  08DFH  
T_TAB. . . . . . . . . . . . . .    NUMB  00A4H  
T_THEN . . . . . . . . . . . . .    NUMB  00A5H  
T_TIME . . . . . . . . . . . . .    NUMB  00C5H  
T_TO . . . . . . . . . . . . . .    NUMB  00A6H  
T_TRAP . . . . . . . . . . . . .  C ADDR  08E5H  
T_ULAST. . . . . . . . . . . . .    NUMB  00BEH  
T_UOP. . . . . . . . . . . . . .    NUMB  00B0H  
T_USE. . . . . . . . . . . . . .    NUMB  00D2H  
T_XTAL . . . . . . . . . . . . .    NUMB  00C3H  
T_X_S. . . . . . . . . . . . . .  C ADDR  0B39H  
U3 . . . . . . . . . . . . . . .  C ADDR  0C9BH  
U4 . . . . . . . . . . . . . . .  C ADDR  0C9FH  
U5 . . . . . . . . . . . . . . .  C ADDR  0CA9H  
U5A. . . . . . . . . . . . . . .  C ADDR  0CC0H  
U6 . . . . . . . . . . . . . . .  C ADDR  0CCDH  
U7 . . . . . . . . . . . . . . .  C ADDR  0CCFH  
U8 . . . . . . . . . . . . . . .  C ADDR  0CC9H  
U8A. . . . . . . . . . . . . . .  C ADDR  0CC4H  
U8B. . . . . . . . . . . . . . .  C ADDR  0CC6H  NOT USED  
UBIT . . . . . . . . . . . . . .  B ADDR  002AH  
UE . . . . . . . . . . . . . . .  C ADDR  1513H  
ULOOP. . . . . . . . . . . . . .  C ADDR  1B82H  
UNDERFLOW. . . . . . . . . . . .    NUMB  0000H  
UNDERFLOW_AND_EXIT . . . . . . .  C ADDR  1BA5H  
UNDER_MD . . . . . . . . . . . .  C ADDR  1B4DH  
UNPACK_R0. . . . . . . . . . . .  C ADDR  1B7EH  
UOPBOL . . . . . . . . . . . . .  C ADDR  00E0H  
UPB. . . . . . . . . . . . . . .  B ADDR  0027H  
UPP0 . . . . . . . . . . . . . .  C ADDR  10AEH  
UPP01. . . . . . . . . . . . . .  C ADDR  10B1H  
UPP02. . . . . . . . . . . . . .  C ADDR  10BCH  
UPP03. . . . . . . . . . . . . .  C ADDR  10C1H  
UPP04. . . . . . . . . . . . . .  C ADDR  10C6H  
UPP1 . . . . . . . . . . . . . .  C ADDR  10DDH  
UPP11. . . . . . . . . . . . . .  C ADDR  10E3H  
UPP1A. . . . . . . . . . . . . .  C ADDR  10D9H  
UPP2 . . . . . . . . . . . . . .  C ADDR  10ECH  
UPP3 . . . . . . . . . . . . . .  C ADDR  1101H  
UPP4 . . . . . . . . . . . . . .  C ADDR  110DH  
UPP41. . . . . . . . . . . . . .  C ADDR  1115H  
UPP42. . . . . . . . . . . . . .  C ADDR  1119H  
UPP7 . . . . . . . . . . . . . .  C ADDR  1121H  
UPP7A. . . . . . . . . . . . . .  C ADDR  111FH  
UPP8 . . . . . . . . . . . . . .  C ADDR  1123H  
UPP81. . . . . . . . . . . . . .  C ADDR  1125H  
UPP9 . . . . . . . . . . . . . .  C ADDR  10CDH  
UPP91. . . . . . . . . . . . . .  C ADDR  10D5H  
UPPL . . . . . . . . . . . . . .  C ADDR  10A3H  
UPPL0. . . . . . . . . . . . . .  C ADDR  10A0H  
UPRNT. . . . . . . . . . . . . .  C ADDR  06BFH  
UP_2 . . . . . . . . . . . . . .  C ADDR  10F7H  
UP_3 . . . . . . . . . . . . . .  C ADDR  10FAH  NOT USED  
UP_4 . . . . . . . . . . . . . .  C ADDR  10FDH  
USENT. . . . . . . . . . . . . .  C ADDR  0047H  
USING0 . . . . . . . . . . . . .  C ADDR  1DB0H  
BASIC52Q                                                                                                      PAGE 162

USING1 . . . . . . . . . . . . .  C ADDR  1DB6H  
USING2 . . . . . . . . . . . . .  C ADDR  1DC8H  NOT USED  
USINGX . . . . . . . . . . . . .  C ADDR  1DC6H  
USINGY . . . . . . . . . . . . .  C ADDR  1DC3H  
U_ID1. . . . . . . . . . . . . .  C ADDR  1860H  
U_IDL. . . . . . . . . . . . . .  B ADDR  0021H  
U_RET. . . . . . . . . . . . . .  C ADDR  1E4AH  
V4 . . . . . . . . . . . . . . .  C ADDR  0DB4H  
VAR. . . . . . . . . . . . . . .  C ADDR  0D65H  
VAR1 . . . . . . . . . . . . . .  C ADDR  0D67H  
VAR11. . . . . . . . . . . . . .  C ADDR  0D71H  
VAR2 . . . . . . . . . . . . . .  C ADDR  0D9AH  
VARB . . . . . . . . . . . . . .  C ADDR  0A0DH  
VARCOP . . . . . . . . . . . . .  C ADDR  1472H  
VARD . . . . . . . . . . . . . .  C ADDR  0A10H  
VARTOP . . . . . . . . . . . . .  X ADDR  0104H  
VAR_ER . . . . . . . . . . . . .  C ADDR  0F01H  
VX . . . . . . . . . . . . . . .  C ADDR  0D80H  
VY . . . . . . . . . . . . . . .  C ADDR  0D74H  
V_C. . . . . . . . . . . . . . .  C ADDR  1474H  
WCR. . . . . . . . . . . . . . .  C ADDR  0EFCH  
WE . . . . . . . . . . . . . . .  C ADDR  0F41H  
X3120. . . . . . . . . . . . . .  C ADDR  0DADH  
X31DP. . . . . . . . . . . . . .  C ADDR  0579H  
XBILT. . . . . . . . . . . . . .  C ADDR  0FB8H  
XBILT1 . . . . . . . . . . . . .  C ADDR  0FC2H  
XBIT . . . . . . . . . . . . . .  B ADDR  002DH  
XLPAR. . . . . . . . . . . . . .  C ADDR  0FC4H  
XOP. . . . . . . . . . . . . . .  C ADDR  0F86H  
XOP1 . . . . . . . . . . . . . .  C ADDR  0F90H  
XOP11. . . . . . . . . . . . . .  C ADDR  0FA3H  
XOP12. . . . . . . . . . . . . .  C ADDR  0FADH  
XOP2 . . . . . . . . . . . . . .  C ADDR  0FAFH  
XOP3 . . . . . . . . . . . . . .  C ADDR  0FCAH  
XOUT0. . . . . . . . . . . . . .  C ADDR  1E23H  
XOUT2. . . . . . . . . . . . . .  C ADDR  1E28H  
XOUT3. . . . . . . . . . . . . .  C ADDR  1E30H  
XOUT4. . . . . . . . . . . . . .  C ADDR  1E34H  
XPOP . . . . . . . . . . . . . .  C ADDR  0FD1H  
XSIGN. . . . . . . . . . . . . .  B ADDR  0050H  
XTALV. . . . . . . . . . . . . .  C ADDR  17ECH  
XXI. . . . . . . . . . . . . . .  C ADDR  0B67H  
XXI1 . . . . . . . . . . . . . .  C ADDR  0B76H  
XXI2 . . . . . . . . . . . . . .  C ADDR  0BABH  
XXI3 . . . . . . . . . . . . . .  C ADDR  0BAFH  
X_TR . . . . . . . . . . . . . .  C ADDR  0BD6H  
Z7R7 . . . . . . . . . . . . . .  C ADDR  1E80H  
ZERO . . . . . . . . . . . . . .    NUMB  0002H  
ZERO7. . . . . . . . . . . . . .  C ADDR  1E81H  
ZERO_AND_EXIT. . . . . . . . . .  C ADDR  1BABH  
ZERO_DIVIDE. . . . . . . . . . .    NUMB  0003H  
ZOUT . . . . . . . . . . . . . .  C ADDR  1E96H  
ZRO. . . . . . . . . . . . . . .  C ADDR  04E0H  
ZSURP. . . . . . . . . . . . . .  B ADDR  0036H  
ZT0. . . . . . . . . . . . . . .  C ADDR  1E5FH  
ZT1. . . . . . . . . . . . . . .  C ADDR  1E66H  
ZTEST. . . . . . . . . . . . . .  C ADDR  1E5DH  
